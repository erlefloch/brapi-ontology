{
  "BrAPI-Core": {
    "Common Crop Names": {
      "Calls": {
        "/commoncropnames": {
          "methods": {
            "get": {
              "description": "List the common crop names for the crops available in a database server. \n\nThis call is ** required ** for multi-crop systems where data from multiple \ncrops may be stored in the same database server. A distinct database server \nis defined by everything in the URL before \"/brapi/v2\", including host \nname and base path.\n\nThis call is recommended for single crop systems to be compatible with \nmulti-crop clients. For a single crop system the response should contain \nan array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, \nStudies, and Germplasm.",
              "parameters": [{
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "description": "array of crop names available on the server",
                                "example": [
                                  "Tomatillo",
                                  "Paw Paw"
                                ],
                                "items": {
                                  "description": "supported crop name",
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "commonCropNamesResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Common Crop Names",
              "tags": [
                "Common Crop Names"
              ]
            }
          }
        }
      },
      "Datatypes": {}
    },
    "Lists": {
      "Calls": {
        "/lists": {
          "methods": {
            "get": {
              "description": "Get filtered set of generic lists",
              "parameters": [{
                  "description": "The type of objects contained by this generic list",
                  "in": "query",
                  "name": "listType",
                  "required": false,
                  "schema": {
                    "$ref": "#/components/schemas/ListTypes"
                  }
                }, {
                  "description": "The human readable name of this generic list",
                  "in": "query",
                  "name": "listName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of this generic list",
                  "in": "query",
                  "name": "listDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The source tag of this generic list",
                  "in": "query",
                  "name": "listSource",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get filtered set of generic lists",
              "tags": [
                "Lists"
              ]
            },
            "post": {
              "description": "Create new list objects in the database",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ListNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create New List Objects",
              "tags": [
                "Lists"
              ]
            }
          }
        },
        "/lists/{listDbId}": {
          "methods": {
            "get": {
              "description": "Get a specific generic lists",
              "parameters": [{
                  "description": "The unique ID of this generic list",
                  "in": "path",
                  "name": "listDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific List",
              "tags": [
                "Lists"
              ]
            },
            "put": {
              "description": "Update an existing generic list",
              "parameters": [{
                  "description": "The unique ID of this generic list",
                  "in": "path",
                  "name": "listDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing generic list",
              "tags": [
                "Lists"
              ]
            }
          }
        },
        "/lists/{listDbId}/items": {
          "methods": {
            "post": {
              "description": "Add new data to a specific generic lists",
              "parameters": [{
                  "description": "The unique ID of this generic list",
                  "in": "path",
                  "name": "listDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "example": [
                        "758a78c0",
                        "2c78f9ee"
                      ],
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/ListDetails"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "listResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Add Items to a specific List",
              "tags": [
                "Lists"
              ]
            }
          }
        },
        "/search/lists": {
          "methods": {
            "post": {
              "description": "Advanced searching for the list resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ListSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Lists",
              "tags": [
                "Lists"
              ]
            }
          }
        },
        "/search/lists/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Advanced searching for the list resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ListsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the results of a List search request",
              "tags": [
                "Lists"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "ListDetails": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "example": {},
              "type": "object"
            },
            "data": {
              "description": "The list of DbIds contained in this list",
              "example": [
                "758a78c0",
                "2c78f9ee"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "dateCreated": {
              "description": "Timestamp when the entity was first created",
              "format": "date-time",
              "type": "string"
            },
            "dateModified": {
              "description": "Timestamp when the entity was last updated",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "listDbId": {
              "description": "The unique identifier for a List",
              "example": "6f621cfa",
              "type": "string"
            },
            "listDescription": {
              "description": "Description of a List",
              "example": "This is a list of germplasm I would like to investigate next season",
              "type": "string"
            },
            "listName": {
              "description": "Human readable name of a List",
              "example": "MyGermplasm_Sept_2020",
              "type": "string"
            },
            "listOwnerName": {
              "description": "Human readable name of a List Owner. (usually a user or person)",
              "example": "Bob Robertson",
              "type": "string"
            },
            "listOwnerPersonDbId": {
              "description": "The unique identifier for a List Owner. (usually a user or person)",
              "example": "58db0628",
              "type": "string"
            },
            "listSize": {
              "description": "The number of elements in a List",
              "example": 53,
              "type": "integer"
            },
            "listSource": {
              "description": "The description of where a List originated from",
              "example": "GeneBank Repository 1.3",
              "type": "string"
            },
            "listType": {
              "enum": [
                "germplasm",
                "markers",
                "programs",
                "trials",
                "studies",
                "observationUnits",
                "observations",
                "observationVariables",
                "samples"
              ],
              "example": "germplasm",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ListNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "example": {},
              "type": "object"
            },
            "data": {
              "description": "The list of DbIds contained in this list",
              "example": [
                "758a78c0",
                "2c78f9ee"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "dateCreated": {
              "description": "Timestamp when the entity was first created",
              "format": "date-time",
              "type": "string"
            },
            "dateModified": {
              "description": "Timestamp when the entity was last updated",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "listDescription": {
              "description": "Description of a List",
              "example": "This is a list of germplasm I would like to investigate next season",
              "type": "string"
            },
            "listName": {
              "description": "Human readable name of a List",
              "example": "MyGermplasm_Sept_2020",
              "type": "string"
            },
            "listOwnerName": {
              "description": "Human readable name of a List Owner. (usually a user or person)",
              "example": "Bob Robertson",
              "type": "string"
            },
            "listOwnerPersonDbId": {
              "description": "The unique identifier for a List Owner. (usually a user or person)",
              "example": "58db0628",
              "type": "string"
            },
            "listSize": {
              "description": "The number of elements in a List",
              "example": 53,
              "type": "integer"
            },
            "listSource": {
              "description": "The description of where a List originated from",
              "example": "GeneBank Repository 1.3",
              "type": "string"
            },
            "listType": {
              "enum": [
                "germplasm",
                "markers",
                "programs",
                "trials",
                "studies",
                "observationUnits",
                "observations",
                "observationVariables",
                "samples"
              ],
              "example": "germplasm",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ListSearchRequest": {
          "properties": {
            "dateCreatedRangeEnd": {
              "format": "date-time",
              "type": "string"
            },
            "dateCreatedRangeStart": {
              "format": "date-time",
              "type": "string"
            },
            "dateModifiedRangeEnd": {
              "format": "date-time",
              "type": "string"
            },
            "dateModifiedRangeStart": {
              "format": "date-time",
              "type": "string"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listDbIds": {
              "example": [
                "55f20cf6",
                "3193ca3d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listNames": {
              "example": [
                "Planing List 1",
                "Bobs List"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listOwnerNames": {
              "example": [
                "Bob Robertson",
                "Rob Robertson"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listOwnerPersonDbIds": {
              "example": [
                "bob@bob.com",
                "rob@bob.com"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listSources": {
              "example": [
                "USER",
                "SYSTEM",
                "EXTERNAL"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "listType": {
              "enum": [
                "germplasm",
                "markers",
                "programs",
                "trials",
                "studies",
                "observationUnits",
                "observations",
                "observationVariables",
                "samples"
              ],
              "example": "germplasm",
              "type": "string"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "ListSummary": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "example": {},
              "type": "object"
            },
            "dateCreated": {
              "description": "Timestamp when the entity was first created",
              "format": "date-time",
              "type": "string"
            },
            "dateModified": {
              "description": "Timestamp when the entity was last updated",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "listDbId": {
              "description": "The unique identifier for a List",
              "example": "6f621cfa",
              "type": "string"
            },
            "listDescription": {
              "description": "Description of a List",
              "example": "This is a list of germplasm I would like to investigate next season",
              "type": "string"
            },
            "listName": {
              "description": "Human readable name of a List",
              "example": "MyGermplasm_Sept_2020",
              "type": "string"
            },
            "listOwnerName": {
              "description": "Human readable name of a List Owner. (usually a user or person)",
              "example": "Bob Robertson",
              "type": "string"
            },
            "listOwnerPersonDbId": {
              "description": "The unique identifier for a List Owner. (usually a user or person)",
              "example": "58db0628",
              "type": "string"
            },
            "listSize": {
              "description": "The number of elements in a List",
              "example": 53,
              "type": "integer"
            },
            "listSource": {
              "description": "The description of where a List originated from",
              "example": "GeneBank Repository 1.3",
              "type": "string"
            },
            "listType": {
              "enum": [
                "germplasm",
                "markers",
                "programs",
                "trials",
                "studies",
                "observationUnits",
                "observations",
                "observationVariables",
                "samples"
              ],
              "example": "germplasm",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "Locations": {
      "Calls": {
        "/locations": {
          "methods": {
            "get": {
              "description": "Get a list of locations.\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
              "parameters": [{
                  "description": "Filter by location type specified.",
                  "in": "query",
                  "name": "locationType",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by location DbId",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Locations",
              "tags": [
                "Locations"
              ]
            },
            "post": {
              "description": "Add new locations to database\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/LocationNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Locations",
              "tags": [
                "Locations"
              ]
            }
          }
        },
        "/locations/{locationDbId}": {
          "methods": {
            "get": {
              "description": "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
              "parameters": [{
                  "description": "The internal DB id for a location",
                  "in": "path",
                  "name": "locationDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Location",
              "tags": [
                "Locations"
              ]
            },
            "put": {
              "description": "Update the details for an existing location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
              "parameters": [{
                  "description": "The internal DB id for a location",
                  "in": "path",
                  "name": "locationDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LocationNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update the details for an existing Location",
              "tags": [
                "Locations"
              ]
            }
          }
        },
        "/search/locations": {
          "methods": {
            "post": {
              "description": "Advanced searching for the locations resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/LocationSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Locations",
              "tags": [
                "Locations"
              ]
            }
          }
        },
        "/search/locations/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Advanced searching for the locations resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LocationListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the results of a Locations search request",
              "tags": [
                "Locations"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Location": {
          "properties": {
            "abbreviation": {
              "description": "An abbreviation which represents this location",
              "example": "L1",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "example": {},
              "type": "object"
            },
            "coordinateDescription": {
              "description": "Describes the precision and landmarks of the coordinate values used for this location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)",
              "example": "North East corner of greenhouse",
              "type": "string"
            },
            "coordinateUncertainty": {
              "description": "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
              "example": "20",
              "type": "string"
            },
            "coordinates": {
              "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSON",
              "type": "object"
            },
            "countryCode": {
              "description": " [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
              "example": "PER",
              "type": "string"
            },
            "countryName": {
              "description": "The full name of the country where this location is\n\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
              "example": "Peru",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://brapi.org",
              "format": "uri",
              "type": "string"
            },
            "environmentType": {
              "description": "Describes the general type of environment of the location. (ex. forest, field, nursery, etc)",
              "example": "Nursery",
              "type": "string"
            },
            "exposure": {
              "description": "Describes the level of protection/exposure for things like sun light and wind.",
              "example": "Structure, no exposure",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "instituteAddress": {
              "description": "The street address of the institute representing this location\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
              "example": "71 Pilgrim Avenue Chevy Chase MD 20815",
              "type": "string"
            },
            "instituteName": {
              "description": "Each institute/laboratory can have several experimental field\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
              "example": "Plant Science Institute",
              "type": "string"
            },
            "locationDbId": {
              "description": "The unique identifier for a Location",
              "example": "3cfdd67d",
              "type": "string"
            },
            "locationName": {
              "description": "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
              "example": "Location 1",
              "type": "string"
            },
            "locationType": {
              "description": "The type of location this represents (ex. Breeding Location, Storage Location, etc)",
              "example": "Storage Location",
              "type": "string"
            },
            "siteStatus": {
              "description": "Description of the accessibility of the location (ex. Public, Private)",
              "example": "Private",
              "type": "string"
            },
            "slope": {
              "description": "Describes the approximate slope (height/distance) of the location.",
              "example": "0",
              "type": "string"
            },
            "topography": {
              "description": "Describes the topography of the land at the location. (ex. Plateau, Cirque, Hill, Valley, etc)",
              "example": "Valley",
              "type": "string"
            }
          },
          "type": "object"
        },
        "LocationNewRequest": {
          "properties": {
            "abbreviation": {
              "description": "An abbreviation which represents this location",
              "example": "L1",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "example": {},
              "type": "object"
            },
            "coordinateDescription": {
              "description": "Describes the precision and landmarks of the coordinate values used for this location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)",
              "example": "North East corner of greenhouse",
              "type": "string"
            },
            "coordinateUncertainty": {
              "description": "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
              "example": "20",
              "type": "string"
            },
            "coordinates": {
              "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSON",
              "type": "object"
            },
            "countryCode": {
              "description": " [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
              "example": "PER",
              "type": "string"
            },
            "countryName": {
              "description": "The full name of the country where this location is\n\nMIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
              "example": "Peru",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://brapi.org",
              "format": "uri",
              "type": "string"
            },
            "environmentType": {
              "description": "Describes the general type of environment of the location. (ex. forest, field, nursery, etc)",
              "example": "Nursery",
              "type": "string"
            },
            "exposure": {
              "description": "Describes the level of protection/exposure for things like sun light and wind.",
              "example": "Structure, no exposure",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "instituteAddress": {
              "description": "The street address of the institute representing this location\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
              "example": "71 Pilgrim Avenue Chevy Chase MD 20815",
              "type": "string"
            },
            "instituteName": {
              "description": "Each institute/laboratory can have several experimental field\n\nMIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
              "example": "Plant Science Institute",
              "type": "string"
            },
            "locationName": {
              "description": "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
              "example": "Location 1",
              "type": "string"
            },
            "locationType": {
              "description": "The type of location this represents (ex. Breeding Location, Storage Location, etc)",
              "example": "Storage Location",
              "type": "string"
            },
            "siteStatus": {
              "description": "Description of the accessibility of the location (ex. Public, Private)",
              "example": "Private",
              "type": "string"
            },
            "slope": {
              "description": "Describes the approximate slope (height/distance) of the location.",
              "example": "0",
              "type": "string"
            },
            "topography": {
              "description": "Describes the topography of the land at the location. (ex. Plateau, Cirque, Hill, Valley, etc)",
              "example": "Valley",
              "type": "string"
            }
          },
          "type": "object"
        },
        "LocationSearchRequest": {
          "properties": {
            "abbreviations": {
              "description": "An abbreviation which represents this location",
              "example": [
                "L1",
                "LHC"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "altitudeMax": {
              "description": "The maximum altitude to search for",
              "example": 200,
              "type": "number"
            },
            "altitudeMin": {
              "description": "The minimum altitude to search for",
              "example": 20,
              "type": "number"
            },
            "coordinates": {
              "description": "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
              "example": {
                "geometry": {
                  "coordinates": [
                    [
                      [
                        -77.456654,
                        42.241133
                      ],
                      [
                        -75.414133,
                        41.508282
                      ],
                      [
                        -76.506042,
                        42.417373
                      ],
                      [
                        -77.456654,
                        42.241133
                      ]
                    ]
                  ],
                  "type": "Polygon"
                },
                "type": "Feature"
              },
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSONSearchArea",
              "type": "object"
            },
            "countryCodes": {
              "description": "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec",
              "example": [
                "USA",
                "PER"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "countryNames": {
              "description": "The full name of the country to search for",
              "example": [
                "United States of America",
                "Peru"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "instituteAddresses": {
              "description": "The street address of the institute to search for",
              "example": [
                "123 Main Street",
                "456 Side Street"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "instituteNames": {
              "description": "The name of the institute to search for",
              "example": [
                "The Institute",
                "The Other Institute"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationDbIds": {
              "description": "The location ids to search for",
              "example": [
                "b28911cf",
                "5071d1e4"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationNames": {
              "description": "A human readable names to search for",
              "example": [
                "Location Alpha",
                "The Large Hadron Collider"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationTypes": {
              "description": "The type of location this represents (ex. Breeding Location, Storage Location, etc)",
              "example": [
                "Nursery",
                "Storage Location"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "People": {
      "Calls": {
        "/people": {
          "methods": {
            "get": {
              "description": "Get filtered list of people",
              "parameters": [{
                  "description": "A persons first name",
                  "in": "query",
                  "name": "firstName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "A persons last name",
                  "in": "query",
                  "name": "lastName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a person",
                  "in": "query",
                  "name": "personDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
                  "in": "query",
                  "name": "userID",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get filtered list of People",
              "tags": [
                "People"
              ]
            },
            "post": {
              "description": "Create new People entities. `personDbId` is generated and managed by the server.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/PersonNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new People",
              "tags": [
                "People"
              ]
            }
          }
        },
        "/people/{personDbId}": {
          "methods": {
            "get": {
              "description": "Get the details for a specific Person",
              "parameters": [{
                  "description": "The unique ID of a person",
                  "in": "path",
                  "name": "personDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details for a specific Person",
              "tags": [
                "People"
              ]
            },
            "put": {
              "description": "Update an existing Person",
              "parameters": [{
                  "description": "The unique ID of a person",
                  "in": "path",
                  "name": "personDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PersonNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Person",
              "tags": [
                "People"
              ]
            }
          }
        },
        "/search/people": {
          "methods": {
            "post": {
              "description": "Advanced searching for the programs resource.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/PersonSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for People",
              "tags": [
                "People"
              ]
            }
          }
        },
        "/search/people/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Advanced searching for the people resource.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PersonListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the results of a People search request",
              "tags": [
                "People"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Person": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "description": {
              "description": "description of this person",
              "example": "Bob likes pina coladas and getting caught in the rain.",
              "type": "string"
            },
            "emailAddress": {
              "description": "email address for this person",
              "example": "bob@bob.com",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "firstName": {
              "description": "Persons first name",
              "example": "Bob",
              "type": "string"
            },
            "lastName": {
              "description": "Persons last name",
              "example": "Robertson",
              "type": "string"
            },
            "mailingAddress": {
              "description": "physical address of this person",
              "example": "123 Street Ave, City, State, Country",
              "type": "string"
            },
            "middleName": {
              "description": "Persons middle name",
              "example": "Danger",
              "type": "string"
            },
            "personDbId": {
              "description": "Unique ID for a person",
              "example": "14340a54",
              "type": "string"
            },
            "phoneNumber": {
              "description": "phone number of this person",
              "example": "+1-555-555-5555",
              "type": "string"
            },
            "userID": {
              "description": "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
              "example": "bob-23",
              "type": "string"
            }
          },
          "type": "object"
        },
        "PersonNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "description": {
              "description": "description of this person",
              "example": "Bob likes pina coladas and getting caught in the rain.",
              "type": "string"
            },
            "emailAddress": {
              "description": "email address for this person",
              "example": "bob@bob.com",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "firstName": {
              "description": "Persons first name",
              "example": "Bob",
              "type": "string"
            },
            "lastName": {
              "description": "Persons last name",
              "example": "Robertson",
              "type": "string"
            },
            "mailingAddress": {
              "description": "physical address of this person",
              "example": "123 Street Ave, City, State, Country",
              "type": "string"
            },
            "middleName": {
              "description": "Persons middle name",
              "example": "Danger",
              "type": "string"
            },
            "phoneNumber": {
              "description": "phone number of this person",
              "example": "+1-555-555-5555",
              "type": "string"
            },
            "userID": {
              "description": "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
              "example": "bob-23",
              "type": "string"
            }
          },
          "type": "object"
        },
        "PersonSearchRequest": {
          "properties": {
            "emailAddresses": {
              "description": "email address for this person",
              "example": [
                "bob@bob.com",
                "rob@bob.com"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "firstNames": {
              "description": "Persons first name",
              "example": [
                "Bob",
                "Rob"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "lastNames": {
              "description": "Persons last name",
              "example": [
                "Robertson",
                "Smith"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "mailingAddresses": {
              "description": "physical address of this person",
              "example": [
                "123 Main Street",
                "456 Side Street"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "middleNames": {
              "description": "Persons middle name",
              "example": [
                "Danger",
                "Fight"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "personDbIds": {
              "description": "Unique ID for this person",
              "example": [
                "1e7731ab",
                "bc28cff8"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "phoneNumbers": {
              "description": "phone number of this person",
              "example": [
                "9995555555",
                "8884444444"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "userIDs": {
              "description": "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
              "example": [
                "bob",
                "rob"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Programs": {
      "Calls": {
        "/programs": {
          "methods": {
            "get": {
              "description": "Get a filtered list of breeding Programs. This list can be filtered by common crop name to narrow results to a specific crop.",
              "parameters": [{
                  "description": "Filter by the common crop name. Exact match.",
                  "in": "query",
                  "name": "commonCropName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Program filter to only return trials associated with given program id.",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by program name. Exact match.",
                  "in": "query",
                  "name": "programName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by program abbreviation. Exact match.",
                  "in": "query",
                  "name": "abbreviation",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of breeding Programs",
              "tags": [
                "Programs"
              ]
            },
            "post": {
              "description": "Add new breeding Programs to the database. The `programDbId` is set by the server, all other fields are take from the request body, or a default value is used.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ProgramNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new breeding Programs to the database",
              "tags": [
                "Programs"
              ]
            }
          }
        },
        "/programs/{programDbId}": {
          "methods": {
            "get": {
              "description": "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
              "parameters": [{
                  "description": "Filter by the common crop name. Exact match.",
                  "in": "path",
                  "name": "programDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a breeding Program by Id",
              "tags": [
                "Programs"
              ]
            },
            "put": {
              "description": "Update the details of an existing breeding Program.",
              "parameters": [{
                  "description": "Filter by the common crop name. Exact match.",
                  "in": "path",
                  "name": "programDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ProgramNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update an existing Program",
              "tags": [
                "Programs"
              ]
            }
          }
        },
        "/search/programs": {
          "methods": {
            "post": {
              "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ProgramSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Programs",
              "tags": [
                "Programs"
              ]
            }
          }
        },
        "/search/programs/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ProgramListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Programs search request",
              "tags": [
                "Programs"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Program": {
          "properties": {
            "abbreviation": {
              "description": "An abbreviation which represents this program",
              "example": "P1",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop which this program is for",
              "example": "Tomatillo",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "leadPersonDbId": {
              "description": "The unique identifier of the program leader",
              "example": "fe6f5c50",
              "type": "string"
            },
            "leadPersonName": {
              "description": "The name of the program leader",
              "example": "Bob Robertson",
              "type": "string"
            },
            "objective": {
              "description": "The primary objective of the program",
              "example": "Make a better tomatillo",
              "type": "string"
            },
            "programDbId": {
              "description": "The ID which uniquely identifies the program",
              "example": "f60f15b2",
              "type": "string"
            },
            "programName": {
              "description": "Human readable name of the program",
              "example": "Tomatillo_Breeding_Program",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ProgramNewRequest": {
          "properties": {
            "abbreviation": {
              "description": "An abbreviation which represents this program",
              "example": "P1",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop which this program is for",
              "example": "Tomatillo",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "leadPersonDbId": {
              "description": "The unique identifier of the program leader",
              "example": "fe6f5c50",
              "type": "string"
            },
            "leadPersonName": {
              "description": "The name of the program leader",
              "example": "Bob Robertson",
              "type": "string"
            },
            "objective": {
              "description": "The primary objective of the program",
              "example": "Make a better tomatillo",
              "type": "string"
            },
            "programName": {
              "description": "Human readable name of the program",
              "example": "Tomatillo_Breeding_Program",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ProgramSearchRequest": {
          "properties": {
            "abbreviations": {
              "description": "An abbreviation of a program to search for",
              "example": [
                "P1",
                "P2"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "commonCropNames": {
              "description": "Common name for the crop which this program is for",
              "example": [
                "Tomatillo",
                "Paw Paw"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "leadPersonDbIds": {
              "description": "The person DbIds of the program leader to search for",
              "example": [
                "d8bd96c7",
                "a2b9c8e7"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "leadPersonNames": {
              "description": "The names of the program leader to search for",
              "example": [
                "Bob Robertson",
                "Rob Robertson"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "objectives": {
              "description": "A program objective to search for",
              "example": [
                "Objective Code One",
                "This is a longer objective search query"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "programDbIds": {
              "description": "A program identifier to search for",
              "example": [
                "8f5de35b",
                "0e2d4a13"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "programNames": {
              "description": "A name of a program to search for",
              "example": [
                "Better Breeding Program",
                "Best Breeding Program"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Seasons": {
      "Calls": {
        "/seasons": {
          "methods": {
            "get": {
              "description": "Call to retrieve all seasons in the database.\n\nA season is made of 2 parts; the primary year and a term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\" or this could be a month, like \n\"May\" or \"June\" or this could be an arbitrary season name which is meaningful to the breeding \nprogram like \"PlantingTime_3\" or \"Season E\"",
              "parameters": [{
                  "description": "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                  "example": "b230a1d2, Spring_2017, 3",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\".",
                  "example": "Spring",
                  "in": "query",
                  "name": "season",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The 4 digit year of a season. Example \"2017\"",
                  "example": 2017,
                  "in": "query",
                  "name": "year",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeasonListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Seasons",
              "tags": [
                "Seasons"
              ]
            },
            "post": {
              "description": "Add new season entries to the database",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/Season"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeasonListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "POST new Seasons",
              "tags": [
                "Seasons"
              ]
            }
          }
        },
        "/seasons/{seasonDbId}": {
          "methods": {
            "get": {
              "description": "Get the a single Season",
              "parameters": [{
                  "description": "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                  "example": "b230a1d2, Spring_2017, 3",
                  "in": "path",
                  "name": "seasonDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeasonSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the a single Season",
              "tags": [
                "Seasons"
              ]
            },
            "put": {
              "description": "Update existing Seasons",
              "parameters": [{
                  "description": "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                  "example": "b230a1d2, Spring_2017, 3",
                  "in": "path",
                  "name": "seasonDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Season"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeasonSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update existing Seasons",
              "tags": [
                "Seasons"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Season": {
          "properties": {
            "seasonDbId": {
              "description": "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
              "example": "Spring_2018",
              "type": "string"
            },
            "seasonName": {
              "description": "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
              "example": "Spring",
              "type": "string"
            },
            "year": {
              "description": "The 4 digit year of the season.",
              "example": 2018,
              "type": "integer"
            }
          },
          "required": [
            "seasonDbId"
          ],
          "type": "object"
        }
      }
    },
    "Server Info": {
      "Calls": {
        "/serverinfo": {
          "methods": {
            "get": {
              "description": "Implementation Notes\n\nHaving a consistent structure for the path string of each call is very \nimportant for teams to be able to connect and find errors. Read more on Github.\n\nHere are the rules for the path of each call that should be returned\n\nEvery word in the call path should match the documentation exactly, both in \nspelling and capitalization. Note that path strings are all lower case, but \npath parameters are camel case.\n\nEach path should start relative to \\\"/\\\" and therefore should not include \\\"/\\\"\n\nNo leading or trailing slashes (\\\"/\\\") \n\nPath parameters are wrapped in curly braces (\\\"{}\\\"). The name of the path parameter \nshould be spelled exactly as it is specified in the documentation.\n\nExamples \n\nGOOD   \"call\": \"germplasm/{germplasmDbId}/pedigree\" \n\nBAD  \"call\": \"germplasm/{id}/pedigree\"\n\nBAD  \"call\": \"germplasm/{germplasmDBid}/pedigree\" \n\nBAD  \"call\": \"brapi/v2/germplasm/{germplasmDbId}/pedigree\" \n\nBAD  \"call\": \"/germplasm/{germplasmDbId}/pedigree/\" \n\nBAD  \"call\": \"germplasm/<germplasmDbId>/pedigree\"",
              "parameters": [{
                  "description": "The data format supported by the call.",
                  "in": "query",
                  "name": "dataType",
                  "required": false,
                  "schema": {
                    "$ref": "#/components/schemas/WSMIMEDataTypes"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/ServerInfo"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "ServerInfoResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the list of implemented Calls",
              "tags": [
                "Server Info"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "ServerInfo": {
          "properties": {
            "calls": {
              "description": "Array of available calls on this server",
              "items": {
                "properties": {
                  "dataTypes": {
                    "description": "The possible data formats returned by the available call",
                    "example": [
                      "application/json"
                    ],
                    "items": {
                      "enum": [
                        "application/json",
                        "text/csv",
                        "text/tsv",
                        "application/flapjack"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "methods": {
                    "description": "The possible HTTP Methods to be used with the available call",
                    "example": [
                      "GET",
                      "POST"
                    ],
                    "items": {
                      "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "service": {
                    "description": "The name of the available call as recorded in the documentation",
                    "example": "germplasm/{germplasmDbId}/pedigree",
                    "type": "string"
                  },
                  "versions": {
                    "description": "The supported versions of a particular call",
                    "example": [
                      "2.0",
                      "2.1"
                    ],
                    "items": {
                      "enum": [
                        "2.0",
                        "2.1",
                        "2.2"
                      ],
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "service",
                  "versions",
                  "methods"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "contactEmail": {
              "description": "A contact email address for this server management",
              "example": "contact@institute.org",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "institute.org/server",
              "type": "string"
            },
            "location": {
              "description": "Physical location of this server (ie. City, Country)",
              "example": "USA",
              "type": "string"
            },
            "organizationName": {
              "description": "The name of the organization that manages this server and data",
              "example": "The Institute",
              "type": "string"
            },
            "organizationURL": {
              "description": "The URL of the organization that manages this server and data",
              "example": "institute.org/home",
              "type": "string"
            },
            "serverDescription": {
              "description": "A description of this server",
              "example": "The BrAPI Test Server\nWeb Server - Apache Tomcat 7.0.32\nDatabase - Postgres 10\nSupported BrAPI Version - V2.0",
              "type": "string"
            },
            "serverName": {
              "description": "The name of this server",
              "example": "The BrAPI Test Server",
              "type": "string"
            }
          },
          "required": [
            "calls"
          ],
          "type": "object"
        }
      }
    },
    "Studies": {
      "Calls": {
        "/search/studies": {
          "methods": {
            "post": {
              "description": "Get list of studies\nStartDate and endDate should be ISO-8601 format for dates\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/StudySearchRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudyListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Studies",
              "tags": [
                "Studies"
              ]
            }
          }
        },
        "/search/studies/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudyListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Studies search request",
              "tags": [
                "Studies"
              ]
            }
          }
        },
        "/studies": {
          "methods": {
            "get": {
              "description": "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates",
              "parameters": [{
                  "description": "Common name for the crop associated with this study",
                  "in": "query",
                  "name": "commonCropName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on study type unique identifier",
                  "in": "query",
                  "name": "studyType",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Program filter to only return studies associated with given program id.",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by location",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by season or year",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by trial",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study DbId",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study name",
                  "in": "query",
                  "name": "studyName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study code",
                  "in": "query",
                  "name": "studyCode",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study PUI",
                  "in": "query",
                  "name": "studyPUI",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by germplasm DbId",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by observation variable DbId",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter active status true/false.",
                  "in": "query",
                  "name": "active",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "Name of the field to sort by.",
                  "in": "query",
                  "name": "sortBy",
                  "required": false,
                  "schema": {
                    "enum": [
                      "studyDbId",
                      "trialDbId",
                      "programDbId",
                      "locationDbId",
                      "seasonDbId",
                      "studyType",
                      "studyName",
                      "studyLocation",
                      "programName"
                    ],
                    "type": "string"
                  }
                }, {
                  "description": "Sort order direction. Ascending/Descending.",
                  "in": "query",
                  "name": "sortOrder",
                  "required": false,
                  "schema": {
                    "enum": [
                      "asc",
                      "ASC",
                      "desc",
                      "DESC"
                    ],
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudyListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Studies",
              "tags": [
                "Studies"
              ]
            },
            "post": {
              "description": "Create new studies\n\nImplementation Notes\n\nStartDate and endDate should be ISO-8601 format for dates\n\n`studDbId` is generated by the server.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/StudyNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudyListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Studies.",
              "tags": [
                "Studies"
              ]
            }
          }
        },
        "/studies/{studyDbId}": {
          "methods": {
            "get": {
              "description": "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
              "parameters": [{
                  "description": "Identifier of the study. Usually a number, could be alphanumeric.",
                  "in": "path",
                  "name": "studyDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudySingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details for a specific Study",
              "tags": [
                "Studies"
              ]
            },
            "put": {
              "description": "Update an existing Study with new data",
              "parameters": [{
                  "description": "Identifier of the study. Usually a number, could be alphanumeric.",
                  "in": "path",
                  "name": "studyDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/StudyNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/StudySingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Study",
              "tags": [
                "Studies"
              ]
            }
          }
        },
        "/studytypes": {
          "methods": {
            "get": {
              "description": "Call to retrieve the list of study types.",
              "parameters": [{
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "description": "the list of all study types available in this server.",
                                "example": [
                                  "Crossing Nursery",
                                  "Yield study"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "studyTypesResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Study Types",
              "tags": [
                "Studies"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Study": {
          "properties": {
            "active": {
              "description": "Is this study currently active",
              "example": true,
              "type": "boolean"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop associated with this study",
              "example": "Grape",
              "type": "string"
            },
            "contacts": {
              "description": "List of contact entities associated with this study",
              "items": {
                "properties": {
                  "contactDbId": {
                    "description": "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "5f4e5509",
                    "type": "string"
                  },
                  "email": {
                    "description": "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                    "example": "bob@bob.com",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  },
                  "name": {
                    "description": "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                    "example": "Bob Robertson",
                    "type": "string"
                  },
                  "orcid": {
                    "description": "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "http://orcid.org/0000-0001-8640-1750",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                    "example": "PI",
                    "type": "string"
                  }
                },
                "required": [
                  "contactDbId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "culturalPractices": {
              "description": "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.",
              "example": "Irrigation was applied according needs during summer to prevent water stress.",
              "type": "string"
            },
            "dataLinks": {
              "description": "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.",
              "items": {
                "properties": {
                  "dataFormat": {
                    "description": "The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "Image Archive",
                    "type": "string"
                  },
                  "description": {
                    "description": "The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "Raw drone images collected for this study",
                    "type": "string"
                  },
                  "fileFormat": {
                    "description": "The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "application/zip",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "image-archive.zip",
                    "type": "string"
                  },
                  "provenance": {
                    "description": "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.",
                    "example": "Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline",
                    "type": "string"
                  },
                  "scientificType": {
                    "description": "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc",
                    "example": "Environmental",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.",
                    "example": "https://brapi.org/image-archive.zip",
                    "format": "uri",
                    "type": "string"
                  },
                  "version": {
                    "description": "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).",
                    "example": "1.0.3",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "endDate": {
              "description": "The date the study ends\n\nMIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended",
              "format": "date-time",
              "type": "string"
            },
            "environmentParameters": {
              "description": "Environmental parameters that were kept constant throughout the study and did not change between observation units.\n\nMIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).",
              "items": {
                "properties": {
                  "description": {
                    "description": "Human-readable value of the environment parameter (defined above) constant within the experiment",
                    "example": "the soil type was clay",
                    "type": "string"
                  },
                  "parameterName": {
                    "description": "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ",
                    "example": "soil type",
                    "type": "string"
                  },
                  "parameterPUI": {
                    "description": "URI pointing to an ontology class for the parameter",
                    "example": "PECO:0007155",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit of the value for this parameter",
                    "example": "pH",
                    "type": "string"
                  },
                  "unitPUI": {
                    "description": "URI pointing to an ontology class for the unit",
                    "example": "PECO:0007059",
                    "type": "string"
                  },
                  "value": {
                    "description": "Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.",
                    "example": "clay soil",
                    "type": "string"
                  },
                  "valuePUI": {
                    "description": "URI pointing to an ontology class for the parameter value",
                    "example": "ENVO:00002262",
                    "type": "string"
                  }
                },
                "required": [
                  "parameterName",
                  "description"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "experimentalDesign": {
              "description": "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology",
              "properties": {
                "PUI": {
                  "description": "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.",
                  "example": "CO_715:0000145",
                  "type": "string"
                },
                "description": {
                  "description": "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'.",
                  "example": "Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthFacility": {
              "description": "Short description of the facility in which the study was carried out.",
              "properties": {
                "PUI": {
                  "description": "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.",
                  "example": "CO_715:0000162",
                  "type": "string"
                },
                "description": {
                  "description": "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.",
                  "example": "field environment condition, greenhouse",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "lastUpdate": {
              "description": "The date and time when this study was last modified",
              "properties": {
                "timestamp": {
                  "format": "date-time",
                  "type": "string"
                },
                "version": {
                  "example": "1.2.3",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "license": {
              "description": "The usage license associated with the study data",
              "example": "MIT License",
              "type": "string"
            },
            "locationDbId": {
              "description": "The unique identifier for a Location",
              "example": "3cfdd67d",
              "type": "string"
            },
            "locationName": {
              "description": "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
              "example": "Location 1",
              "type": "string"
            },
            "observationLevels": {
              "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
              "example": [{
                  "levelName": "field",
                  "levelOrder": 0
                }, {
                  "levelName": "block",
                  "levelOrder": 1
                }, {
                  "levelName": "plot",
                  "levelOrder": 2
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
                "properties": {
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitHierarchyLevel",
                "type": "object"
              },
              "type": "array"
            },
            "observationUnitsDescription": {
              "description": "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.",
              "example": "Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter.",
              "type": "string"
            },
            "seasons": {
              "description": "List of seasons over which this study was performed.",
              "example": [
                "Spring_2018"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "startDate": {
              "description": "The date this study started\n\nMIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started",
              "format": "date-time",
              "type": "string"
            },
            "studyCode": {
              "description": "A short human readable code for a study",
              "example": "Grape_Yield_Spring_2018",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server\n\nMIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.",
              "example": "175ac75a",
              "type": "string"
            },
            "studyDescription": {
              "description": "The description of this study\n\nMIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study",
              "example": "This is a yield study for Spring 2018",
              "type": "string"
            },
            "studyName": {
              "description": "The human readable name for a study\n\nMIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study",
              "example": "INRA's Walnut Genetic Resources Observation at Kenya",
              "type": "string"
            },
            "studyPUI": {
              "description": "A permanent unique identifier associated with this study data. For example, a URI or DOI",
              "example": "doi:10.155454/12349537312",
              "type": "string"
            },
            "studyType": {
              "description": "The type of study being performed. ex. \"Yield Trial\", etc",
              "example": "Phenotyping",
              "type": "string"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial",
              "example": "48b327ea",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial",
              "example": "Grape_Yield_Trial",
              "type": "string"
            }
          },
          "type": "object"
        },
        "StudyNewRequest": {
          "properties": {
            "active": {
              "description": "Is this study currently active",
              "example": true,
              "type": "boolean"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop associated with this study",
              "example": "Grape",
              "type": "string"
            },
            "contacts": {
              "description": "List of contact entities associated with this study",
              "items": {
                "properties": {
                  "contactDbId": {
                    "description": "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "5f4e5509",
                    "type": "string"
                  },
                  "email": {
                    "description": "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                    "example": "bob@bob.com",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  },
                  "name": {
                    "description": "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                    "example": "Bob Robertson",
                    "type": "string"
                  },
                  "orcid": {
                    "description": "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "http://orcid.org/0000-0001-8640-1750",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                    "example": "PI",
                    "type": "string"
                  }
                },
                "required": [
                  "contactDbId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "culturalPractices": {
              "description": "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.",
              "example": "Irrigation was applied according needs during summer to prevent water stress.",
              "type": "string"
            },
            "dataLinks": {
              "description": "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.",
              "items": {
                "properties": {
                  "dataFormat": {
                    "description": "The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "Image Archive",
                    "type": "string"
                  },
                  "description": {
                    "description": "The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "Raw drone images collected for this study",
                    "type": "string"
                  },
                  "fileFormat": {
                    "description": "The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "application/zip",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                    "example": "image-archive.zip",
                    "type": "string"
                  },
                  "provenance": {
                    "description": "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.",
                    "example": "Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline",
                    "type": "string"
                  },
                  "scientificType": {
                    "description": "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc",
                    "example": "Environmental",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.",
                    "example": "https://brapi.org/image-archive.zip",
                    "format": "uri",
                    "type": "string"
                  },
                  "version": {
                    "description": "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).",
                    "example": "1.0.3",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "endDate": {
              "description": "The date the study ends\n\nMIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended",
              "format": "date-time",
              "type": "string"
            },
            "environmentParameters": {
              "description": "Environmental parameters that were kept constant throughout the study and did not change between observation units.\n\nMIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).",
              "items": {
                "properties": {
                  "description": {
                    "description": "Human-readable value of the environment parameter (defined above) constant within the experiment",
                    "example": "the soil type was clay",
                    "type": "string"
                  },
                  "parameterName": {
                    "description": "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ",
                    "example": "soil type",
                    "type": "string"
                  },
                  "parameterPUI": {
                    "description": "URI pointing to an ontology class for the parameter",
                    "example": "PECO:0007155",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit of the value for this parameter",
                    "example": "pH",
                    "type": "string"
                  },
                  "unitPUI": {
                    "description": "URI pointing to an ontology class for the unit",
                    "example": "PECO:0007059",
                    "type": "string"
                  },
                  "value": {
                    "description": "Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.",
                    "example": "clay soil",
                    "type": "string"
                  },
                  "valuePUI": {
                    "description": "URI pointing to an ontology class for the parameter value",
                    "example": "ENVO:00002262",
                    "type": "string"
                  }
                },
                "required": [
                  "parameterName",
                  "description"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "experimentalDesign": {
              "description": "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology",
              "properties": {
                "PUI": {
                  "description": "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.",
                  "example": "CO_715:0000145",
                  "type": "string"
                },
                "description": {
                  "description": "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'.",
                  "example": "Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthFacility": {
              "description": "Short description of the facility in which the study was carried out.",
              "properties": {
                "PUI": {
                  "description": "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.",
                  "example": "CO_715:0000162",
                  "type": "string"
                },
                "description": {
                  "description": "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.",
                  "example": "field environment condition, greenhouse",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "lastUpdate": {
              "description": "The date and time when this study was last modified",
              "properties": {
                "timestamp": {
                  "format": "date-time",
                  "type": "string"
                },
                "version": {
                  "example": "1.2.3",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "license": {
              "description": "The usage license associated with the study data",
              "example": "MIT License",
              "type": "string"
            },
            "locationDbId": {
              "description": "The unique identifier for a Location",
              "example": "3cfdd67d",
              "type": "string"
            },
            "locationName": {
              "description": "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
              "example": "Location 1",
              "type": "string"
            },
            "observationLevels": {
              "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
              "example": [{
                  "levelName": "field",
                  "levelOrder": 0
                }, {
                  "levelName": "block",
                  "levelOrder": 1
                }, {
                  "levelName": "plot",
                  "levelOrder": 2
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
                "properties": {
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitHierarchyLevel",
                "type": "object"
              },
              "type": "array"
            },
            "observationUnitsDescription": {
              "description": "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.",
              "example": "Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter.",
              "type": "string"
            },
            "seasons": {
              "description": "List of seasons over which this study was performed.",
              "example": [
                "Spring_2018"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "startDate": {
              "description": "The date this study started\n\nMIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started",
              "format": "date-time",
              "type": "string"
            },
            "studyCode": {
              "description": "A short human readable code for a study",
              "example": "Grape_Yield_Spring_2018",
              "type": "string"
            },
            "studyDescription": {
              "description": "The description of this study\n\nMIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study",
              "example": "This is a yield study for Spring 2018",
              "type": "string"
            },
            "studyName": {
              "description": "The human readable name for a study\n\nMIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study",
              "example": "INRA's Walnut Genetic Resources Observation at Kenya",
              "type": "string"
            },
            "studyPUI": {
              "description": "A permanent unique identifier associated with this study data. For example, a URI or DOI",
              "example": "doi:10.155454/12349537312",
              "type": "string"
            },
            "studyType": {
              "description": "The type of study being performed. ex. \"Yield Trial\", etc",
              "example": "Phenotyping",
              "type": "string"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial",
              "example": "48b327ea",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial",
              "example": "Grape_Yield_Trial",
              "type": "string"
            }
          },
          "type": "object"
        },
        "StudySearchRequest": {
          "properties": {
            "active": {
              "description": "Is this study currently active",
              "example": true,
              "type": "boolean"
            },
            "commonCropNames": {
              "description": "Common name for the crop which this program is for",
              "example": [
                "Tomatillo",
                "Paw Paw"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationDbIds": {
              "description": "The location ids to search for",
              "example": [
                "b28911cf",
                "5071d1e4"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationNames": {
              "description": "A human readable names to search for",
              "example": [
                "Location Alpha",
                "The Large Hadron Collider"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableDbIds": {
              "description": "List of observation variable IDs to search for",
              "example": [
                "819e508f",
                "f540b703"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableNames": {
              "description": "The names of Variables to search for",
              "example": [
                "Plant Height in meters",
                "Wheat rust score 1-5"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "programDbIds": {
              "description": "A program identifier to search for",
              "example": [
                "8f5de35b",
                "0e2d4a13"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "programNames": {
              "description": "A name of a program to search for",
              "example": [
                "Better Breeding Program",
                "Best Breeding Program"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "seasonDbIds": {
              "description": "The ID which uniquely identifies a season",
              "example": [
                "Harvest Two 2017",
                "Summer 2018"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sortBy": {
              "description": "Name of one of the fields within the study object on which results can be sorted",
              "enum": [
                "studyDbId",
                "trialDbId",
                "programDbId",
                "locationDbId",
                "seasonDbId",
                "studyType",
                "studyName",
                "studyLocation",
                "programName",
                "germplasmDbId",
                "observationVariableDbId"
              ],
              "type": "string"
            },
            "sortOrder": {
              "description": "Order results should be sorted. ex. \"ASC\" or \"DESC\"",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "studyCodes": {
              "description": "A short human readable code for a study",
              "example": [
                "Grape_Yield_Spring_2018",
                "Walnut_Kenya"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyPUIs": {
              "description": "Permanent unique identifier associated with study data. For example, a URI or DOI",
              "example": [
                "doi:10.155454/12349537312",
                "https://pui.per/d8dd35e1"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyTypes": {
              "description": "The type of study being performed. ex. \"Yield Trial\", etc",
              "example": [
                "Yield Trial",
                "Disease Resistance Trial"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialDbIds": {
              "description": "The ID which uniquely identifies a trial to search for",
              "example": [
                "d2593dc2",
                "9431a731"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialNames": {
              "description": "The human readable name of a trial to search for",
              "example": [
                "All Yield Trials 2016",
                "Disease Resistance Study Comparison Group"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Trials": {
      "Calls": {
        "/search/trials": {
          "methods": {
            "post": {
              "description": "Advanced searching for the programs resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TrialSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Trials",
              "tags": [
                "Trials"
              ]
            }
          }
        },
        "/search/trials/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Advanced searching for the trials resource.\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Trials search request",
              "tags": [
                "Trials"
              ]
            }
          }
        },
        "/trials": {
          "methods": {
            "get": {
              "description": "Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies",
              "parameters": [{
                  "description": "Filter active status true/false.",
                  "in": "query",
                  "name": "active",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "Common name for the crop associated with this trial",
                  "in": "query",
                  "name": "commonCropName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Contact entities associated with this trial",
                  "in": "query",
                  "name": "contactDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Program filter to only return trials associated with given program id.",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by location",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
                  "in": "query",
                  "name": "searchDateRangeStart",
                  "required": false,
                  "schema": {
                    "format": "date",
                    "type": "string"
                  }
                }, {
                  "description": "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
                  "in": "query",
                  "name": "searchDateRangeEnd",
                  "required": false,
                  "schema": {
                    "format": "date",
                    "type": "string"
                  }
                }, {
                  "description": "Filter by connected studyDbId",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by trialDbId",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by trial name",
                  "in": "query",
                  "name": "trialName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by trial PUI",
                  "in": "query",
                  "name": "trialPUI",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Sort order. Name of the field to sort by.",
                  "in": "query",
                  "name": "sortBy",
                  "required": false,
                  "schema": {
                    "enum": [
                      "trialDbId",
                      "trialName",
                      "programDbId",
                      "programName",
                      "locationDbId",
                      "startDate",
                      "endDate"
                    ],
                    "type": "string"
                  }
                }, {
                  "description": "Sort order direction: asc/desc",
                  "in": "query",
                  "name": "sortOrder",
                  "required": false,
                  "schema": {
                    "enum": [
                      "asc",
                      "ASC",
                      "desc",
                      "DESC"
                    ],
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Trials",
              "tags": [
                "Trials"
              ]
            },
            "post": {
              "description": "Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/TrialNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new trials",
              "tags": [
                "Trials"
              ]
            }
          }
        },
        "/trials/{trialDbId}": {
          "methods": {
            "get": {
              "description": "Get the details of a specific Trial",
              "parameters": [{
                  "description": "The internal trialDbId",
                  "in": "path",
                  "name": "trialDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Trial",
              "tags": [
                "Trials"
              ]
            },
            "put": {
              "description": "Update the details of an existing Trial",
              "parameters": [{
                  "description": "The internal trialDbId",
                  "in": "path",
                  "name": "trialDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TrialNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TrialSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update the details of an existing Trial",
              "tags": [
                "Trials"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Trial": {
          "properties": {
            "active": {
              "description": "Is this trail currently active",
              "example": true,
              "type": "boolean"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop associated with this trial",
              "example": "Wheat",
              "type": "string"
            },
            "contacts": {
              "description": "List of contact entities associated with this trial",
              "items": {
                "properties": {
                  "contactDbId": {
                    "description": "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "5f4e5509",
                    "type": "string"
                  },
                  "email": {
                    "description": "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                    "example": "bob@bob.com",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  },
                  "name": {
                    "description": "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                    "example": "Bob Robertson",
                    "type": "string"
                  },
                  "orcid": {
                    "description": "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "http://orcid.org/0000-0001-8640-1750",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                    "example": "PI",
                    "type": "string"
                  }
                },
                "required": [
                  "contactDbId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "datasetAuthorships": {
              "description": "License and citation information for the data in this trial",
              "items": {
                "properties": {
                  "datasetPUI": {
                    "example": "doi:10.15454/312953986E3",
                    "type": "string"
                  },
                  "license": {
                    "description": "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.",
                    "example": "https://CreativeCommons.org/licenses/by/4.0",
                    "type": "string"
                  },
                  "publicReleaseDate": {
                    "description": "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.",
                    "format": "date",
                    "type": "string"
                  },
                  "submissionDate": {
                    "description": "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.",
                    "format": "date",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "endDate": {
              "description": "The date this trial ends",
              "format": "date",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "programDbId": {
              "description": "A program identifier to search for",
              "example": "673f378a",
              "type": "string"
            },
            "programName": {
              "description": "Human readable name of the program",
              "example": "Tomatillo_Breeding_Program",
              "type": "string"
            },
            "publications": {
              "description": "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.",
              "items": {
                "properties": {
                  "publicationPUI": {
                    "example": "doi:10.15454/312953986E3",
                    "type": "string"
                  },
                  "publicationReference": {
                    "example": "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "startDate": {
              "description": "The date this trial started",
              "format": "date",
              "type": "string"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial\n\nMIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.",
              "example": "1883b402",
              "type": "string"
            },
            "trialDescription": {
              "description": "The human readable description of a trial\n\nMIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.",
              "example": "General drought resistance trial initiated in Peru before duplication in Africa",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial\n\nMIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.",
              "example": "Peru Yield Trial 1",
              "type": "string"
            },
            "trialPUI": {
              "description": "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
              "example": "https://doi.org/101093190",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TrialNewRequest": {
          "properties": {
            "active": {
              "description": "Is this trail currently active",
              "example": true,
              "type": "boolean"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Common name for the crop associated with this trial",
              "example": "Wheat",
              "type": "string"
            },
            "contacts": {
              "description": "List of contact entities associated with this trial",
              "items": {
                "properties": {
                  "contactDbId": {
                    "description": "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "5f4e5509",
                    "type": "string"
                  },
                  "email": {
                    "description": "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                    "example": "bob@bob.com",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  },
                  "name": {
                    "description": "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                    "example": "Bob Robertson",
                    "type": "string"
                  },
                  "orcid": {
                    "description": "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                    "example": "http://orcid.org/0000-0001-8640-1750",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                    "example": "PI",
                    "type": "string"
                  }
                },
                "required": [
                  "contactDbId"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "datasetAuthorships": {
              "description": "License and citation information for the data in this trial",
              "items": {
                "properties": {
                  "datasetPUI": {
                    "example": "doi:10.15454/312953986E3",
                    "type": "string"
                  },
                  "license": {
                    "description": "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.",
                    "example": "https://CreativeCommons.org/licenses/by/4.0",
                    "type": "string"
                  },
                  "publicReleaseDate": {
                    "description": "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.",
                    "format": "date",
                    "type": "string"
                  },
                  "submissionDate": {
                    "description": "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.",
                    "format": "date",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "endDate": {
              "description": "The date this trial ends",
              "format": "date",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "programDbId": {
              "description": "A program identifier to search for",
              "example": "673f378a",
              "type": "string"
            },
            "programName": {
              "description": "Human readable name of the program",
              "example": "Tomatillo_Breeding_Program",
              "type": "string"
            },
            "publications": {
              "description": "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.",
              "items": {
                "properties": {
                  "publicationPUI": {
                    "example": "doi:10.15454/312953986E3",
                    "type": "string"
                  },
                  "publicationReference": {
                    "example": "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "startDate": {
              "description": "The date this trial started",
              "format": "date",
              "type": "string"
            },
            "trialDescription": {
              "description": "The human readable description of a trial\n\nMIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.",
              "example": "General drought resistance trial initiated in Peru before duplication in Africa",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial\n\nMIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.",
              "example": "Peru Yield Trial 1",
              "type": "string"
            },
            "trialPUI": {
              "description": "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
              "example": "https://doi.org/101093190",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TrialSearchRequest": {
          "properties": {
            "active": {
              "description": "Is this trail currently active",
              "example": true,
              "type": "boolean"
            },
            "commonCropNames": {
              "description": "Common name for the crop which this program is for",
              "example": [
                "Tomatillo",
                "Paw Paw"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "contactDbIds": {
              "description": "List of contact entities associated with this trial",
              "example": [
                "e0f70c2a",
                "b82f0967"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationDbIds": {
              "description": "The location ids to search for",
              "example": [
                "b28911cf",
                "5071d1e4"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationNames": {
              "description": "A human readable names to search for",
              "example": [
                "Location Alpha",
                "The Large Hadron Collider"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "programDbIds": {
              "description": "A program identifier to search for",
              "example": [
                "8f5de35b",
                "0e2d4a13"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "programNames": {
              "description": "A name of a program to search for",
              "example": [
                "Better Breeding Program",
                "Best Breeding Program"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "searchDateRangeEnd": {
              "description": "The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
              "format": "date",
              "type": "string"
            },
            "searchDateRangeStart": {
              "description": "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
              "format": "date",
              "type": "string"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialDbIds": {
              "description": "The ID which uniquely identifies a trial to search for",
              "example": [
                "d2593dc2",
                "9431a731"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialNames": {
              "description": "The human readable name of a trial to search for",
              "example": [
                "All Yield Trials 2016",
                "Disease Resistance Study Comparison Group"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialPUIs": {
              "description": "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
              "example": [
                "https://doi.org/01093190",
                "https://doi.org/11192409"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "BrAPI-Genotyping": {
    "Call Sets": {
      "Calls": {
        "/callsets": {
          "methods": {
            "get": {
              "description": "Gets a filtered list of `CallSet` JSON objects.",
              "parameters": [{
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The human readable name of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "query",
                  "name": "variantSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "query",
                  "name": "sampleDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Return only call sets generated from the Sample of this Germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallSetsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a filtered list of `CallSet` JSON objects.",
              "tags": [
                "Call Sets"
              ]
            }
          }
        },
        "/callsets/{callSetDbId}": {
          "methods": {
            "get": {
              "description": "Gets a `CallSet` by ID.",
              "parameters": [{
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "path",
                  "name": "callSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/CallSet"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "callSetResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Gets a `CallSet` by ID.",
              "tags": [
                "Call Sets"
              ]
            }
          }
        },
        "/callsets/{callSetDbId}/calls": {
          "methods": {
            "get": {
              "description": "Gets a list of `Calls` associated with a `CallSet`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "path",
                  "name": "callSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                  "in": "query",
                  "name": "expandHomozygotes",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "The string to use as a representation for missing data",
                  "in": "query",
                  "name": "unknownString",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for phased allele calls",
                  "in": "query",
                  "name": "sepPhased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for unphased allele calls",
                  "in": "query",
                  "name": "sepUnphased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Calls` associated with a `CallSet`.",
              "tags": [
                "Call Sets"
              ]
            }
          }
        },
        "/search/callsets": {
          "methods": {
            "post": {
              "description": "Gets a list of call sets matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/callSetsSearchRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of call sets matching the search criteria.",
              "tags": [
                "Call Sets"
              ]
            }
          }
        },
        "/search/callsets/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Gets a list of call sets matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of call sets matching the search criteria.",
              "tags": [
                "Call Sets"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Call": {
          "description": "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "16466f55",
              "type": "string"
            },
            "callSetName": {
              "description": "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "genotype": {
              "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array.",
              "properties": {
                "values": {
                  "description": "Repeated field of dynamically typed values.",
                  "example": [
                    "AA"
                  ],
                  "items": {
                    "oneOf": [{
                        "description": "Represents a boolean value.",
                        "format": "boolean",
                        "type": "boolean"
                      }, {
                        "description": "Represents a double value.",
                        "format": "double",
                        "type": "number"
                      }, {
                        "description": "Represents a string value.",
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "genotype_likelihood": {
              "description": "The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
              "example": [
                1.0
              ],
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "phaseSet": {
              "description": "If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.",
              "example": "6410afc5",
              "type": "string"
            },
            "variantDbId": {
              "description": "The ID of the variant this call belongs to.",
              "example": "538c8ecf",
              "type": "string"
            },
            "variantName": {
              "description": "The name of the variant this call belongs to.",
              "example": "Marker A",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CallSet": {
          "description": "A CallSet is a collection of calls that were generated by the same analysis of the same sample.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The call set ID.",
              "example": "eb2bfd3d",
              "type": "string"
            },
            "callSetName": {
              "description": "The call set name.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "created": {
              "description": "The date this call set was created",
              "format": "date-time",
              "type": "string"
            },
            "sampleDbId": {
              "description": "The Biosample entity the call set data was generated from.",
              "example": "5e50e11d",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "708149c1",
              "type": "string"
            },
            "updated": {
              "description": "The time at which this call set was last updated",
              "format": "date-time",
              "type": "string"
            },
            "variantSetDbIds": {
              "description": "The IDs of the variant sets this call set has calls in.",
              "example": [
                "cfd3d60f",
                "a4e8bfe9"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "callSetsSearchRequest": {
          "properties": {
            "callSetDbIds": {
              "description": "Only return call sets with these DbIds (case-sensitive, exact match).",
              "example": [
                "6c7486b2",
                "49c36a73"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "callSetNames": {
              "description": "Only return call sets with these names (case-sensitive, exact match).",
              "example": [
                "Sample_123_DNA_Run_456",
                "Sample_789_DNA_Run_101"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "sampleDbIds": {
              "description": "Return only call sets generated from the provided Biosample IDs.",
              "example": [
                "758d3f6d",
                "39c0a3f7"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sampleNames": {
              "description": "Return only call sets generated from the provided Biosample human readable names.",
              "example": [
                "Sample_123",
                "Sample_789"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbIds": {
              "description": "The VariantSet to search.",
              "example": [
                "8a9a8972",
                "32a2649a"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Calls": {
      "Calls": {
        "/calls": {
          "methods": {
            "get": {
              "description": "Gets a filtered list of `Call` JSON objects.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "query",
                  "name": "variantDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "query",
                  "name": "variantSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                  "in": "query",
                  "name": "expandHomozygotes",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "The string to use as a representation for missing data",
                  "in": "query",
                  "name": "unknownString",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for phased allele calls",
                  "in": "query",
                  "name": "sepPhased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for unphased allele calls",
                  "in": "query",
                  "name": "sepUnphased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a filtered list of `Calls`",
              "tags": [
                "Calls"
              ]
            }
          }
        },
        "/search/calls": {
          "methods": {
            "post": {
              "description": "Submit a search request for `Calls`\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/callsSearchRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for `Calls`",
              "tags": [
                "Calls"
              ]
            }
          }
        },
        "/search/calls/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Returns a filtered list of `Call` JSON objects.\n\nSee Search Services for additional implementation details.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Returns a filtered list of `Call` JSON objects.",
              "tags": [
                "Calls"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Call": {
          "description": "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "16466f55",
              "type": "string"
            },
            "callSetName": {
              "description": "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "genotype": {
              "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array.",
              "properties": {
                "values": {
                  "description": "Repeated field of dynamically typed values.",
                  "example": [
                    "AA"
                  ],
                  "items": {
                    "oneOf": [{
                        "description": "Represents a boolean value.",
                        "format": "boolean",
                        "type": "boolean"
                      }, {
                        "description": "Represents a double value.",
                        "format": "double",
                        "type": "number"
                      }, {
                        "description": "Represents a string value.",
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "genotype_likelihood": {
              "description": "The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
              "example": [
                1.0
              ],
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "phaseSet": {
              "description": "If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.",
              "example": "6410afc5",
              "type": "string"
            },
            "variantDbId": {
              "description": "The ID of the variant this call belongs to.",
              "example": "538c8ecf",
              "type": "string"
            },
            "variantName": {
              "description": "The name of the variant this call belongs to.",
              "example": "Marker A",
              "type": "string"
            }
          },
          "type": "object"
        },
        "callsSearchRequest": {
          "properties": {
            "callSetDbIds": {
              "description": "The CallSet to search.",
              "example": [
                "a03202ec",
                "274e4f63"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "expandHomozygotes": {
              "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
              "example": true,
              "type": "boolean"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "pageToken": {
              "description": "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
              "example": "33c27874",
              "type": "string"
            },
            "sepPhased": {
              "description": "The string used as a separator for phased allele calls.",
              "example": "~",
              "type": "string"
            },
            "sepUnphased": {
              "description": "The string used as a separator for unphased allele calls.",
              "example": "|",
              "type": "string"
            },
            "unknownString": {
              "description": "The string used as a representation for missing data.",
              "example": "-",
              "type": "string"
            },
            "variantDbIds": {
              "description": "The Variant to search.",
              "example": [
                "bba0b258",
                "ff97d4f0"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbIds": {
              "description": "The VariantSet to search.",
              "example": [
                "407c0508",
                "49e24dfc"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Genome Maps": {
      "Calls": {
        "/maps": {
          "methods": {
            "get": {
              "description": "Get list of maps",
              "parameters": [{
                  "description": "The common name of the crop",
                  "in": "query",
                  "name": "commonCropName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The primary DbId for this genomic map",
                  "in": "query",
                  "name": "mapDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The DOI or other permanent identifier for this genomic map",
                  "in": "query",
                  "name": "mapPUI",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
                  "in": "query",
                  "name": "scientificName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Type of map",
                  "in": "query",
                  "name": "type",
                  "required": false,
                  "schema": {
                    "enum": [
                      "physical",
                      "genomic"
                    ],
                    "type": "string"
                  }
                }, {
                  "description": "Unique Id to filter by Program",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Unique Id to filter by Trial",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Unique Id to filter by Study",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/GenomeMap"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GenomeMapListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Genomic Maps",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        },
        "/maps/{mapDbId}": {
          "methods": {
            "get": {
              "description": "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
              "parameters": [{
                  "description": "The internal db id of a selected map",
                  "in": "path",
                  "name": "mapDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/GenomeMap"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GenomeMapSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Genomic Map",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        },
        "/maps/{mapDbId}/linkagegroups": {
          "methods": {
            "get": {
              "description": "Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
              "parameters": [{
                  "description": "The internal db id of a selected map",
                  "in": "path",
                  "name": "mapDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/LinkageGroup"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "LinkageGroupListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the Linkage Groups of a specific Genomic Map",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        },
        "/markerpositions": {
          "methods": {
            "get": {
              "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
              "parameters": [{
                  "description": "unique id of a map",
                  "in": "query",
                  "name": "mapDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
                  "in": "query",
                  "name": "linkageGroupName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique id for a marker",
                  "in": "query",
                  "name": "variantDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The minimum position",
                  "in": "query",
                  "name": "minPosition",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "description": "The maximum position",
                  "in": "query",
                  "name": "maxPosition",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MarkerPositionListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get marker position info",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        },
        "/search/markerpositions": {
          "methods": {
            "post": {
              "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MarkerPositionSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MarkerPositionListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get marker position info",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        },
        "/search/markerpositions/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Get marker position information, based on Map, Linkage Group, and Marker ID",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MarkerPositionListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get marker position info",
              "tags": [
                "Genome Maps"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "GenomeMap": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "comments": {
              "description": "Additional comments",
              "example": "Comments about this map",
              "type": "string"
            },
            "commonCropName": {
              "description": "The common name of the crop",
              "example": "Paw Paw",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://brapi.org",
              "format": "uri",
              "type": "string"
            },
            "linkageGroupCount": {
              "description": "The number of linkage groups present in this genomic map",
              "example": 5,
              "type": "integer"
            },
            "mapDbId": {
              "description": "The ID which uniquely identifies this genomic map",
              "example": "142cffd5",
              "type": "string"
            },
            "mapName": {
              "description": "A human readable name for this genomic map",
              "example": "Genome Map 1",
              "type": "string"
            },
            "mapPUI": {
              "description": "The DOI or other permanent identifier for this genomic map",
              "example": "doi:10.3207/2959859860",
              "type": "string"
            },
            "markerCount": {
              "description": "The number of markers present in this genomic map",
              "example": 1100,
              "type": "integer"
            },
            "publishedDate": {
              "description": "The date this genome was published",
              "format": "date-time",
              "type": "string"
            },
            "scientificName": {
              "description": "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
              "example": "Zea mays",
              "type": "string"
            },
            "type": {
              "description": "The type of map this represents, usually \"Genetic\"",
              "example": "Genetic",
              "type": "string"
            },
            "unit": {
              "description": "The units used to describe the data in this map",
              "example": "cM",
              "type": "string"
            }
          },
          "required": [
            "mapDbId",
            "commonCropName",
            "type"
          ],
          "type": "object"
        },
        "LinkageGroup": {
          "description": "a Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "linkageGroupName": {
              "description": "The Uniquely Identifiable name of this linkage group",
              "example": "Chromosome 3",
              "type": "string"
            },
            "markerCount": {
              "description": "The number of markers associated with this linkage group",
              "example": 150,
              "type": "integer"
            },
            "maxPosition": {
              "description": "The maximum position of a marker within this linkage group",
              "example": 2500,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "MarkerPosition": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "linkageGroupName": {
              "description": "The Uniquely Identifiable name of this linkage group",
              "example": "Chromosome 3",
              "type": "string"
            },
            "mapDbId": {
              "description": "The unique ID of the map",
              "example": "3d52bdf3",
              "type": "string"
            },
            "mapName": {
              "description": "The human readable name of the map",
              "example": "Genome Map 1",
              "type": "string"
            },
            "position": {
              "description": "The position of a marker within a linkage group",
              "example": 2390,
              "type": "integer"
            },
            "variantDbId": {
              "description": "Internal db identifier",
              "example": "a1eb250a",
              "type": "string"
            },
            "variantName": {
              "description": "The human readable name for a marker",
              "example": "Marker_2390",
              "type": "string"
            }
          },
          "type": "object"
        },
        "MarkerPositionSearchRequest": {
          "properties": {
            "linkageGroupNames": {
              "description": "The Uniquely Identifiable name of this linkage group",
              "example": [
                "Chromosome 2",
                "Chromosome 3"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "mapDbIds": {
              "description": "The unique ID of the map",
              "example": [
                "7e6fa8aa",
                "bedc418c"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "maxPosition": {
              "description": "The maximum position",
              "example": 4000,
              "type": "integer"
            },
            "minPosition": {
              "description": "The minimum position",
              "example": 250,
              "type": "integer"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "variantDbIds": {
              "description": "Internal db identifier",
              "example": [
                "a0caa928",
                "f8894a26"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Reference Sets": {
      "Calls": {
        "/referencesets": {
          "methods": {
            "get": {
              "description": "Gets a filtered list of `ReferenceSets`.",
              "parameters": [{
                  "description": "The ID of the `ReferenceSet` to be retrieved.",
                  "in": "query",
                  "name": "referenceSetDbId",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
                  "in": "query",
                  "name": "accession",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
                  "in": "query",
                  "name": "assemblyPUI",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
                  "in": "query",
                  "name": "md5checksum",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferenceSetsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `ReferenceSets`.",
              "tags": [
                "Reference Sets"
              ]
            }
          }
        },
        "/referencesets/{referenceSetDbId}": {
          "methods": {
            "get": {
              "description": "Gets a `ReferenceSet` by ID.",
              "parameters": [{
                  "description": "The ID of the `ReferenceSet` to be retrieved.",
                  "in": "path",
                  "name": "referenceSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/ReferenceSet"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "ReferenceSetsSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "A successful response."
                }
              },
              "summary": "Gets a `ReferenceSet` by ID.",
              "tags": [
                "Reference Sets"
              ]
            }
          }
        },
        "/search/referencesets": {
          "methods": {
            "post": {
              "description": "Gets a list of `ReferenceSet` matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReferenceSetsSearchRequest"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferenceSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `ReferenceSet` matching the search criteria.",
              "tags": [
                "Reference Sets"
              ]
            }
          }
        },
        "/search/referencesets/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Gets a list of `ReferenceSet` matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferenceSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `ReferenceSet` matching the search criteria.",
              "tags": [
                "Reference Sets"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "ReferenceSet": {
          "description": "A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "assemblyPUI": {
              "description": "The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.",
              "example": "doi://10.12345/fake/9876",
              "type": "string"
            },
            "description": {
              "description": "Optional free text description of this reference set.",
              "example": "This is an example description for an assembly",
              "type": "string"
            },
            "isDerived": {
              "description": "A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).",
              "format": "boolean",
              "type": "boolean"
            },
            "md5checksum": {
              "description": "Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\nTo compute this checksum, make a list of `Reference.md5checksum` for all\n`Reference` s in this set. Then sort that list, and take the MD5 hash of\nall the strings concatenated together. Express the hash as a lower-case\nhexadecimal string.",
              "example": "c2365e900c81a89cf74d83dab60df146",
              "type": "string"
            },
            "referenceSetDbId": {
              "description": "The reference set ID. Unique in the repository.",
              "example": "7e029a84",
              "type": "string"
            },
            "referenceSetName": {
              "description": "The reference set name.",
              "example": "The Best Assembly Ever",
              "type": "string"
            },
            "sourceAccessions": {
              "description": "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.",
              "example": [
                "A0000002",
                "A0009393"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sourceURI": {
              "description": "Specifies a FASTA format file/string.",
              "example": "https://wiki.brapi.org/files/demo.fast",
              "type": "string"
            },
            "species": {
              "description": "An ontology term describing an attribute.",
              "properties": {
                "term": {
                  "description": "Ontology term - the label of the ontology term the termId is pointing to.",
                  "example": "sonic hedgehog",
                  "type": "string"
                },
                "termURI": {
                  "description": "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
                  "example": "MGI:MGI:98297",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ReferenceSetsSearchRequest": {
          "properties": {
            "accessions": {
              "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
              "example": [
                "A0009283",
                "A0006657"
              ],
              "items": {
                "type": "string"
              }
            },
            "assemblyPUIs": {
              "description": "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
              "example": [
                "doi:10.15454/312953986E3",
                "doi:10.15454/312953986E3"
              ],
              "items": {
                "type": "string"
              }
            },
            "md5checksums": {
              "description": "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
              "example": [
                "c2365e900c81a89cf74d83dab60df146"
              ],
              "items": {
                "type": "string"
              }
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "referenceSetDbIds": {
              "description": "The `ReferenceSets` to search.",
              "example": [
                "32a19dd7",
                "2c182c18"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      }
    },
    "References": {
      "Calls": {
        "/references": {
          "methods": {
            "get": {
              "description": "`GET /references` will return a filtered list of `Reference` JSON objects.",
              "parameters": [{
                  "description": "The ID of the `Reference` to be retrieved.",
                  "in": "query",
                  "name": "referenceDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `ReferenceSet` to be retrieved.",
                  "in": "query",
                  "name": "referenceSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
                  "in": "query",
                  "name": "md5checksum",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "If the reference is derived from a source sequence",
                  "in": "query",
                  "name": "isDerived",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "The minimum length of the reference sequences to be retrieved.",
                  "in": "query",
                  "name": "minLength",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "description": "The maximum length of the reference sequences to be retrieved.",
                  "in": "query",
                  "name": "maxLength",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferencesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a filtered list of `Reference` objects.",
              "tags": [
                "References"
              ]
            }
          }
        },
        "/references/{referenceDbId}": {
          "methods": {
            "get": {
              "description": "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
              "parameters": [{
                  "description": "The ID of the `Reference` to be retrieved.",
                  "in": "path",
                  "name": "referenceDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/Reference"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "ReferenceSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "A successful response.",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Gets a `Reference` by ID.",
              "tags": [
                "References"
              ]
            }
          }
        },
        "/references/{referenceDbId}/bases": {
          "methods": {
            "get": {
              "description": "Lists `Reference` bases by ID and optional range.",
              "parameters": [{
                  "description": "The ID of the `Reference` to be retrieved.",
                  "in": "path",
                  "name": "referenceDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The start position (0-based) of this query. Defaults to 0.\nGenomic positions are non-negative integers less than reference length.\nRequests spanning the join of circular genomes are represented as\ntwo requests one on each side of the join (position 0).",
                  "in": "query",
                  "name": "start",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "description": "The end position (0-based, exclusive) of this query. Defaults to the length of this `Reference`.",
                  "in": "query",
                  "name": "end",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }, {
                  "description": "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response.",
                  "in": "query",
                  "name": "pageToken",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/ReferenceBases"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "ReferenceBasesResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "A successful response.",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Lists `Reference` bases by ID and optional range.",
              "tags": [
                "References"
              ]
            }
          }
        },
        "/search/references": {
          "methods": {
            "post": {
              "description": "`POST /references/search` must accept a JSON version of\n`SearchReferencesRequest` as the post body and will return a JSON\nversion of `SearchReferencesResponse`.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReferencesSearchRequest"
                    }
                  }
                },
                "description": "References Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferencesListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Reference` matching the search criteria.",
              "tags": [
                "References"
              ]
            }
          }
        },
        "/search/references/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "`POST /references/search` must accept a JSON version of\n`SearchReferencesRequest` as the post body and will return a JSON\nversion of `SearchReferencesResponse`.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ReferencesListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Reference` matching the search criteria.",
              "tags": [
                "References"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Reference": {
          "description": "A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "isDerived": {
              "description": "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
              "example": false,
              "format": "boolean",
              "type": "boolean"
            },
            "length": {
              "description": "The length of this reference's sequence.",
              "example": 50000000,
              "type": "integer"
            },
            "md5checksum": {
              "description": "The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).",
              "example": "c2365e900c81a89cf74d83dab60df146",
              "type": "string"
            },
            "referenceDbId": {
              "description": "The reference ID. Unique within the repository.",
              "example": "fc0a81d0",
              "type": "string"
            },
            "referenceName": {
              "description": "The unique name of this reference within the Reference Set.",
              "example": "Chromosome 2",
              "type": "string"
            },
            "referenceSetDbId": {
              "description": "The reference ID. Unique within the repository.",
              "example": "c1ecfef1",
              "type": "string"
            },
            "sourceAccessions": {
              "description": "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.",
              "example": [
                "GCF_000001405.26"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sourceDivergence": {
              "description": "The `sourceDivergence` is the fraction of non-indel bases that do not match the reference this message was derived from.",
              "example": 0.01,
              "format": "float",
              "type": "number"
            },
            "sourceURI": {
              "description": "The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.",
              "example": "https://wiki.brapi.org/files/demo.fast",
              "type": "string"
            },
            "species": {
              "description": "An ontology term describing an attribute.",
              "properties": {
                "term": {
                  "description": "Ontology term - the label of the ontology term the termId is pointing to.",
                  "example": "sonic hedgehog",
                  "type": "string"
                },
                "termURI": {
                  "description": "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
                  "example": "MGI:MGI:98297",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ReferenceBases": {
          "description": "A string representation of the reference base alleles.",
          "properties": {
            "nextPageToken": {
              "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.",
              "example": "3a3d658a",
              "type": "string"
            },
            "offset": {
              "description": "The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.",
              "example": 20000,
              "type": "integer"
            },
            "sequence": {
              "description": "A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.",
              "example": "TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ReferencesSearchRequest": {
          "properties": {
            "accessions": {
              "description": "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).",
              "example": [
                "A0009283",
                "A0006657"
              ],
              "items": {
                "type": "string"
              }
            },
            "isDerived": {
              "description": "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
              "format": "boolean",
              "type": "boolean"
            },
            "maxLength": {
              "description": "The minimum length of this reference's sequence.",
              "example": 90000,
              "type": "integer"
            },
            "md5checksums": {
              "description": "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
              "example": [
                "c2365e900c81a89cf74d83dab60df146"
              ],
              "items": {
                "type": "string"
              }
            },
            "minLength": {
              "description": "The minimum length of this reference's sequence.",
              "example": 4000,
              "type": "integer"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "referenceDbIds": {
              "description": "The `References` to search.",
              "example": [
                "04c83ea7",
                "d0998a34"
              ],
              "items": {
                "type": "string"
              }
            },
            "referenceSetDbIds": {
              "description": "The `ReferenceSets` to search.",
              "example": [
                "32a19dd7",
                "2c182c18"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "type": "object"
        }
      }
    },
    "Samples": {
      "Calls": {
        "/samples": {
          "methods": {
            "get": {
              "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
              "parameters": [{
                  "description": "the internal DB id for a sample",
                  "in": "query",
                  "name": "sampleDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "the internal DB id for an observation unit where a sample was taken from",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "the internal DB id for a plate of samples",
                  "in": "query",
                  "name": "plateDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "the internal DB id for a germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study DbId",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Samples",
              "tags": [
                "Samples"
              ]
            },
            "post": {
              "description": "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/SampleNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Samples",
              "tags": [
                "Samples"
              ]
            }
          }
        },
        "/samples/{sampleDbId}": {
          "methods": {
            "get": {
              "description": "Used to retrieve the details of a single Sample from a Sample Tracking system.",
              "parameters": [{
                  "description": "the internal DB id for a sample",
                  "in": "path",
                  "name": "sampleDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Sample",
              "tags": [
                "Samples"
              ]
            },
            "put": {
              "description": "Update the details of an existing Sample",
              "parameters": [{
                  "description": "the internal DB id for a sample",
                  "in": "path",
                  "name": "sampleDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SampleNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update the details of an existing Sample",
              "tags": [
                "Samples"
              ]
            }
          }
        },
        "/search/samples": {
          "methods": {
            "post": {
              "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SampleSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Samples",
              "tags": [
                "Samples"
              ]
            }
          }
        },
        "/search/samples/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SampleListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Samples search request",
              "tags": [
                "Samples"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Sample": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "column": {
              "description": "The Column identifier for this samples location in the plate",
              "example": 6,
              "maximum": 12,
              "minimum": 1,
              "type": "integer"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "7e08d538",
              "type": "string"
            },
            "observationUnitDbId": {
              "description": "The ID which uniquely identifies an observation unit",
              "example": "073a3ce5",
              "type": "string"
            },
            "plateDbId": {
              "description": "The ID which uniquely identifies a plate of samples",
              "example": "2dce16d1",
              "type": "string"
            },
            "plateName": {
              "description": "The human readable name of a plate",
              "example": "Plate_alpha_20191022",
              "type": "string"
            },
            "programDbId": {
              "description": "The ID which uniquely identifies a program within the given database server",
              "example": "bd748e00",
              "type": "string"
            },
            "row": {
              "description": "The Row identifier for this samples location in the plate",
              "example": "B",
              "type": "string"
            },
            "sampleBarcode": {
              "description": "A unique identifier physically attached to the sample",
              "example": "3a027b59",
              "type": "string"
            },
            "sampleDbId": {
              "description": "The ID which uniquely identifies a sample\n\nMIAPPE V1.1 (DM-76) Sample ID - Unique identifier for the sample.",
              "example": "cd06a61d",
              "type": "string"
            },
            "sampleDescription": {
              "description": "Description of a sample\n\nMIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
              "example": "This sample was taken from the root of a tree",
              "type": "string"
            },
            "sampleGroupDbId": {
              "description": "The ID which uniquely identifies a group of samples",
              "example": "8524b436",
              "type": "string"
            },
            "sampleName": {
              "description": "The name of the sample",
              "example": "Sample_alpha_20191022",
              "type": "string"
            },
            "samplePUI": {
              "description": "A permanent unique identifier for the sample (DOI, URL, UUID, etc)\n\nMIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
              "example": "doi:10.15454/312953986E3",
              "type": "string"
            },
            "sampleTimestamp": {
              "description": "The date and time a sample was collected from the field\n\nMIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
              "format": "date-time",
              "type": "string"
            },
            "sampleType": {
              "description": "The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc",
              "example": "Tissue",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "64bd6bf9",
              "type": "string"
            },
            "takenBy": {
              "description": "The name or identifier of the entity which took the sample from the field",
              "example": "Bob",
              "type": "string"
            },
            "tissueType": {
              "description": "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n\nMIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
              "example": "Root",
              "type": "string"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial within the given database server",
              "example": "d34c5349",
              "type": "string"
            },
            "well": {
              "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
              "example": "B6",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SampleNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "column": {
              "description": "The Column identifier for this samples location in the plate",
              "example": 6,
              "maximum": 12,
              "minimum": 1,
              "type": "integer"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "7e08d538",
              "type": "string"
            },
            "observationUnitDbId": {
              "description": "The ID which uniquely identifies an observation unit",
              "example": "073a3ce5",
              "type": "string"
            },
            "plateDbId": {
              "description": "The ID which uniquely identifies a plate of samples",
              "example": "2dce16d1",
              "type": "string"
            },
            "plateName": {
              "description": "The human readable name of a plate",
              "example": "Plate_alpha_20191022",
              "type": "string"
            },
            "programDbId": {
              "description": "The ID which uniquely identifies a program within the given database server",
              "example": "bd748e00",
              "type": "string"
            },
            "row": {
              "description": "The Row identifier for this samples location in the plate",
              "example": "B",
              "type": "string"
            },
            "sampleBarcode": {
              "description": "A unique identifier physically attached to the sample",
              "example": "3a027b59",
              "type": "string"
            },
            "sampleDescription": {
              "description": "Description of a sample\n\nMIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
              "example": "This sample was taken from the root of a tree",
              "type": "string"
            },
            "sampleGroupDbId": {
              "description": "The ID which uniquely identifies a group of samples",
              "example": "8524b436",
              "type": "string"
            },
            "sampleName": {
              "description": "The name of the sample",
              "example": "Sample_alpha_20191022",
              "type": "string"
            },
            "samplePUI": {
              "description": "A permanent unique identifier for the sample (DOI, URL, UUID, etc)\n\nMIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
              "example": "doi:10.15454/312953986E3",
              "type": "string"
            },
            "sampleTimestamp": {
              "description": "The date and time a sample was collected from the field\n\nMIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
              "format": "date-time",
              "type": "string"
            },
            "sampleType": {
              "description": "The type of sample taken. ex. 'DNA', 'RNA', 'Tissue', etc",
              "example": "Tissue",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "64bd6bf9",
              "type": "string"
            },
            "takenBy": {
              "description": "The name or identifier of the entity which took the sample from the field",
              "example": "Bob",
              "type": "string"
            },
            "tissueType": {
              "description": "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n\nMIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
              "example": "Root",
              "type": "string"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial within the given database server",
              "example": "d34c5349",
              "type": "string"
            },
            "well": {
              "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
              "example": "B6",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SampleSearchRequest": {
          "properties": {
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationUnitDbIds": {
              "description": "The ID which uniquely identifies an observation unit",
              "example": [
                "3cd0ca36",
                "983f3b14"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "plateDbIds": {
              "description": "The ID which uniquely identifies a plate of samples",
              "example": [
                "0cac98b8",
                "b96125fb"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "sampleDbIds": {
              "description": "The ID which uniquely identifies a sample",
              "example": [
                "3bece2ca",
                "dd286cc6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Variant Sets": {
      "Calls": {
        "/search/variantsets": {
          "methods": {
            "post": {
              "description": "Gets a list of `VariantSet` matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VariantSetsSearchRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `VariantSet` matching the search criteria.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/search/variantsets/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Gets a list of `VariantSet` matching the search criteria.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantSetsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `VariantSet` matching the search criteria.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets": {
          "methods": {
            "get": {
              "description": "Will return a filtered list of `VariantSet`.",
              "parameters": [{
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "query",
                  "name": "variantSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "query",
                  "name": "variantDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study DbId",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by study name",
                  "in": "query",
                  "name": "studyName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantSetsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a filtered list of `VariantSets`.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets/extract": {
          "methods": {
            "post": {
              "description": "Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VariantSetsExtractRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VariantSet"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "variantSetResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Create new `VariantSet` based on search results",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets/{variantSetDbId}": {
          "methods": {
            "get": {
              "description": "This call will return a JSON version of a `VariantSet`.",
              "parameters": [{
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "path",
                  "name": "variantSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VariantSet"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "variantSetResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Gets a `VariantSet` by ID.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets/{variantSetDbId}/calls": {
          "methods": {
            "get": {
              "description": "Gets a list of `Calls` associated with a `VariantSet`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "path",
                  "name": "variantSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                  "in": "query",
                  "name": "expandHomozygotes",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "The string to use as a representation for missing data",
                  "in": "query",
                  "name": "unknownString",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for phased allele calls",
                  "in": "query",
                  "name": "sepPhased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for unphased allele calls",
                  "in": "query",
                  "name": "sepUnphased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Calls` associated with a `VariantSet`.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets/{variantSetDbId}/callsets": {
          "methods": {
            "get": {
              "description": "Gets a list of `CallSets` associated with a `VariantSet`.",
              "parameters": [{
                  "description": "The ID of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The human readable name of the `CallSet` to be retrieved.",
                  "in": "query",
                  "name": "callSetName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "path",
                  "name": "variantSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallSetsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `CallSets` associated with a `VariantSet`.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        },
        "/variantsets/{variantSetDbId}/variants": {
          "methods": {
            "get": {
              "description": "This call will return an array of `Variants`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "query",
                  "name": "variantDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "path",
                  "name": "variantSetDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a `Variants` for a given `VariantSet`.",
              "tags": [
                "Variant Sets"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Call": {
          "description": "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "16466f55",
              "type": "string"
            },
            "callSetName": {
              "description": "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "genotype": {
              "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array.",
              "properties": {
                "values": {
                  "description": "Repeated field of dynamically typed values.",
                  "example": [
                    "AA"
                  ],
                  "items": {
                    "oneOf": [{
                        "description": "Represents a boolean value.",
                        "format": "boolean",
                        "type": "boolean"
                      }, {
                        "description": "Represents a double value.",
                        "format": "double",
                        "type": "number"
                      }, {
                        "description": "Represents a string value.",
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "genotype_likelihood": {
              "description": "The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
              "example": [
                1.0
              ],
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "phaseSet": {
              "description": "If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.",
              "example": "6410afc5",
              "type": "string"
            },
            "variantDbId": {
              "description": "The ID of the variant this call belongs to.",
              "example": "538c8ecf",
              "type": "string"
            },
            "variantName": {
              "description": "The name of the variant this call belongs to.",
              "example": "Marker A",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CallSet": {
          "description": "A CallSet is a collection of calls that were generated by the same analysis of the same sample.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The call set ID.",
              "example": "eb2bfd3d",
              "type": "string"
            },
            "callSetName": {
              "description": "The call set name.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "created": {
              "description": "The date this call set was created",
              "format": "date-time",
              "type": "string"
            },
            "sampleDbId": {
              "description": "The Biosample entity the call set data was generated from.",
              "example": "5e50e11d",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "708149c1",
              "type": "string"
            },
            "updated": {
              "description": "The time at which this call set was last updated",
              "format": "date-time",
              "type": "string"
            },
            "variantSetDbIds": {
              "description": "The IDs of the variant sets this call set has calls in.",
              "example": [
                "cfd3d60f",
                "a4e8bfe9"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "Variant": {
          "description": "A `Variant` represents a change in DNA sequence relative to some reference.\nFor example, a variant could represent a SNP or an insertion.\nVariants belong to a `VariantSet`.\nThis is equivalent to a row in VCF.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "alternate_bases": {
              "description": "The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
              "example": [
                "TAGGATTGAGCTCTATAT"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ciend": {
              "description": "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen).",
              "example": [
                -1000,
                0
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "cipos": {
              "description": "In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. \"cipos\" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2",
              "example": [
                -12000,
                1000
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "created": {
              "description": "The timestamp when this variant was created.",
              "format": "date-time",
              "type": "string"
            },
            "end": {
              "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.",
              "example": 518,
              "type": "integer"
            },
            "filtersApplied": {
              "description": "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value.",
              "example": true,
              "format": "boolean",
              "type": "boolean"
            },
            "filtersFailed": {
              "description": "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record.",
              "example": [
                "d629a669",
                "3f14f578"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "filtersPassed": {
              "description": "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS.",
              "example": true,
              "format": "boolean",
              "type": "boolean"
            },
            "referenceBases": {
              "description": "The reference bases for this variant. They start at the given start position.",
              "example": "TAGGATTGAGCTCTATAT",
              "type": "string"
            },
            "referenceName": {
              "description": "The reference on which this variant occurs. (e.g. `chr_20` or `X`)",
              "example": "chr_20",
              "type": "string"
            },
            "start": {
              "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).",
              "example": 500,
              "type": "integer"
            },
            "svlen": {
              "description": "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2",
              "example": 1500,
              "type": "integer"
            },
            "updated": {
              "description": "The time at which this variant was last updated.",
              "format": "date-time",
              "type": "string"
            },
            "variantDbId": {
              "description": "The variant ID.",
              "example": "628e89c5",
              "type": "string"
            },
            "variantNames": {
              "description": "Names for the variant, for example a RefSNP ID.",
              "example": [
                "RefSNP_ID_1",
                "06ea312e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbId": {
              "description": "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.",
              "example": [
                "c8ae400b",
                "ef2c204b"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantType": {
              "description": "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"\n  DEL  : deletion of sequence following \"start\"",
              "example": "DUP",
              "type": "string"
            }
          },
          "type": "object"
        },
        "VariantSet": {
          "description": "A VariantSet is a collection of variants and variant calls intended to be analyzed together.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "analysis": {
              "description": "Set of Analysis descriptors for this VariantSet",
              "items": {
                "description": "An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used.",
                "properties": {
                  "analysisDbId": {
                    "description": "Unique identifier for this analysis description",
                    "example": "6191a6bd",
                    "type": "string"
                  },
                  "analysisName": {
                    "description": "A human readable name for this analysis",
                    "example": "Standard QC",
                    "type": "string"
                  },
                  "created": {
                    "description": "The time at which this record was created, in ISO 8601 format.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "description": {
                    "description": "A human readable description of the analysis",
                    "example": "This is a formal description of a QC methodology. Blah blah blah ...",
                    "type": "string"
                  },
                  "software": {
                    "description": "The software run to generate this analysis.",
                    "example": [
                      "https://github.com/genotyping/QC"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "type": {
                    "description": "The type of analysis.",
                    "example": "QC",
                    "type": "string"
                  },
                  "updated": {
                    "description": "The time at which this record was last updated, in ISO 8601 format.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "availableFormats": {
              "description": "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n\ndataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n\nfileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
              "example": [{
                  "dataFormat": "VCF",
                  "fileFormat": "application/excel",
                  "fileURL": "https://brapi.org/example/VCF_1.xlsx"
                }, {
                  "dataFormat": "VCF",
                  "fileFormat": "text/csv",
                  "fileURL": "https://brapi.org/example/VCF_2.csv"
                }
              ],
              "items": {
                "description": "Each 'availableFormat' object is a pairing of dataFormat and fileFormat. These must be communicated in pairs because they are not independant parameters and sometimes one influences the other.",
                "properties": {
                  "dataFormat": {
                    "description": "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)",
                    "enum": [
                      "DartSeq",
                      "VCF",
                      "Hapmap",
                      "tabular",
                      "JSON"
                    ],
                    "type": "string"
                  },
                  "fileFormat": {
                    "description": "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
                    "enum": [
                      "text/csv",
                      "text/tsv",
                      "application/excel",
                      "application/zip",
                      "application/json"
                    ],
                    "type": "string"
                  },
                  "fileURL": {
                    "description": "A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "callSetCount": {
              "description": "The number of CallSets included in this VariantSet",
              "example": 341,
              "type": "integer"
            },
            "referenceSetDbId": {
              "description": "The ID of the reference set that describes the sequences used by the variants in this set.",
              "example": "57eae639",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID of the dataset this variant set belongs to.",
              "example": "2fc3b034",
              "type": "string"
            },
            "variantCount": {
              "description": "The number of Variants included in this VariantSet",
              "example": 250,
              "type": "integer"
            },
            "variantSetDbId": {
              "description": "The variant set ID.",
              "example": "87a6ac1e",
              "type": "string"
            },
            "variantSetName": {
              "description": "The variant set name.",
              "example": "Maize QC DataSet 002334",
              "type": "string"
            }
          },
          "type": "object"
        },
        "VariantSetsExtractRequest": {
          "description": "Request object for extracting data subsets as new Variant Sets",
          "properties": {
            "callSetDbIds": {
              "description": "The CallSet to search.",
              "example": [
                "9569cfc4",
                "da1e888c"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "expandHomozygotes": {
              "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
              "example": true,
              "type": "boolean"
            },
            "sepPhased": {
              "description": "The string used as a separator for phased allele calls.",
              "example": "~",
              "type": "string"
            },
            "sepUnphased": {
              "description": "The string used as a separator for unphased allele calls.",
              "example": "|",
              "type": "string"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "unknownString": {
              "description": "The string used as a representation for missing data.",
              "example": "-",
              "type": "string"
            },
            "variantDbIds": {
              "description": "The Variant to search.",
              "example": [
                "c80f068b",
                "eb7c5f50"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbIds": {
              "description": "The VariantSet to search.",
              "example": [
                "b2903842",
                "dcbb8558"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "VariantSetsSearchRequest": {
          "properties": {
            "callSetDbIds": {
              "description": "The CallSet to search.",
              "example": [
                "9569cfc4",
                "da1e888c"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantDbIds": {
              "description": "The Variant to search.",
              "example": [
                "c80f068b",
                "eb7c5f50"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbIds": {
              "description": "The VariantSet to search.",
              "example": [
                "b2903842",
                "dcbb8558"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Variants": {
      "Calls": {
        "/search/variants": {
          "methods": {
            "post": {
              "description": "Gets a list of `Variant` matching the search criteria.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/variantsSearchRequest"
                    }
                  }
                },
                "description": "Study Search request"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Variant` matching the search criteria.",
              "tags": [
                "Variants"
              ]
            }
          }
        },
        "/search/variants/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Gets a list of `Variant` matching the search criteria.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantsListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Variant` matching the search criteria.",
              "tags": [
                "Variants"
              ]
            }
          }
        },
        "/variants": {
          "methods": {
            "get": {
              "description": "Gets a filtered list of `Variants`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "query",
                  "name": "variantDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The ID of the `VariantSet` to be retrieved.",
                  "in": "query",
                  "name": "variantSetDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/VariantsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a filtered list of `Variants`.",
              "tags": [
                "Variants"
              ]
            }
          }
        },
        "/variants/{variantDbId}": {
          "methods": {
            "get": {
              "description": "`GET /variants/{id}` will return a JSON version of `Variant`.",
              "parameters": [{
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "path",
                  "name": "variantDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/Variant"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VariantSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Gets a `Variant` by ID.",
              "tags": [
                "Variants"
              ]
            }
          }
        },
        "/variants/{variantDbId}/calls": {
          "methods": {
            "get": {
              "description": "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.\n\n** THIS ENDPOINT USES TOKEN BASED PAGING **",
              "parameters": [{
                  "description": "The ID of the `Variant` to be retrieved.",
                  "in": "path",
                  "name": "variantDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                  "in": "query",
                  "name": "expandHomozygotes",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "description": "The string to use as a representation for missing data",
                  "in": "query",
                  "name": "unknownString",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for phased allele calls",
                  "in": "query",
                  "name": "sepPhased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The string to use as a separator for unphased allele calls",
                  "in": "query",
                  "name": "sepUnphased",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/pageToken"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CallsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Gets a list of `Calls` associated with a `Variant`.",
              "tags": [
                "Variants"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Call": {
          "description": "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "callSetDbId": {
              "description": "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "16466f55",
              "type": "string"
            },
            "callSetName": {
              "description": "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
              "example": "Sample_123_DNA_Run_456",
              "type": "string"
            },
            "genotype": {
              "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array.",
              "properties": {
                "values": {
                  "description": "Repeated field of dynamically typed values.",
                  "example": [
                    "AA"
                  ],
                  "items": {
                    "oneOf": [{
                        "description": "Represents a boolean value.",
                        "format": "boolean",
                        "type": "boolean"
                      }, {
                        "description": "Represents a double value.",
                        "format": "double",
                        "type": "number"
                      }, {
                        "description": "Represents a string value.",
                        "type": "string"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "genotype_likelihood": {
              "description": "The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
              "example": [
                1.0
              ],
              "items": {
                "format": "double",
                "type": "number"
              },
              "type": "array"
            },
            "phaseSet": {
              "description": "If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phase set string.",
              "example": "6410afc5",
              "type": "string"
            },
            "variantDbId": {
              "description": "The ID of the variant this call belongs to.",
              "example": "538c8ecf",
              "type": "string"
            },
            "variantName": {
              "description": "The name of the variant this call belongs to.",
              "example": "Marker A",
              "type": "string"
            }
          },
          "type": "object"
        },
        "Variant": {
          "description": "A `Variant` represents a change in DNA sequence relative to some reference.\nFor example, a variant could represent a SNP or an insertion.\nVariants belong to a `VariantSet`.\nThis is equivalent to a row in VCF.",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "alternate_bases": {
              "description": "The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
              "example": [
                "TAGGATTGAGCTCTATAT"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ciend": {
              "description": "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen).",
              "example": [
                -1000,
                0
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "cipos": {
              "description": "In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. \"cipos\" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2",
              "example": [
                -12000,
                1000
              ],
              "items": {
                "type": "integer"
              },
              "type": "array"
            },
            "created": {
              "description": "The timestamp when this variant was created.",
              "format": "date-time",
              "type": "string"
            },
            "end": {
              "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.",
              "example": 518,
              "type": "integer"
            },
            "filtersApplied": {
              "description": "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value.",
              "example": true,
              "format": "boolean",
              "type": "boolean"
            },
            "filtersFailed": {
              "description": "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record.",
              "example": [
                "d629a669",
                "3f14f578"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "filtersPassed": {
              "description": "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS.",
              "example": true,
              "format": "boolean",
              "type": "boolean"
            },
            "referenceBases": {
              "description": "The reference bases for this variant. They start at the given start position.",
              "example": "TAGGATTGAGCTCTATAT",
              "type": "string"
            },
            "referenceName": {
              "description": "The reference on which this variant occurs. (e.g. `chr_20` or `X`)",
              "example": "chr_20",
              "type": "string"
            },
            "start": {
              "description": "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n\nThe start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).",
              "example": 500,
              "type": "integer"
            },
            "svlen": {
              "description": "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2",
              "example": 1500,
              "type": "integer"
            },
            "updated": {
              "description": "The time at which this variant was last updated.",
              "format": "date-time",
              "type": "string"
            },
            "variantDbId": {
              "description": "The variant ID.",
              "example": "628e89c5",
              "type": "string"
            },
            "variantNames": {
              "description": "Names for the variant, for example a RefSNP ID.",
              "example": [
                "RefSNP_ID_1",
                "06ea312e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbId": {
              "description": "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.",
              "example": [
                "c8ae400b",
                "ef2c204b"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantType": {
              "description": "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"\n  DEL  : deletion of sequence following \"start\"",
              "example": "DUP",
              "type": "string"
            }
          },
          "type": "object"
        },
        "variantsSearchRequest": {
          "properties": {
            "callSetDbIds": {
              "description": "Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
              "example": [
                "4639fe3e",
                "b60d900b"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "end": {
              "description": "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
              "example": 1500,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "pageToken": {
              "description": "Used to request a specific page of data to be returned.\n\nTokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
              "example": "33c27874",
              "type": "string"
            },
            "referenceDbId": {
              "description": "Only return variants on this reference.",
              "example": "120a2d5c",
              "type": "string"
            },
            "start": {
              "description": "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
              "example": 100,
              "type": "integer"
            },
            "variantDbIds": {
              "description": "The `Variant`s to search.",
              "example": [
                "3b63d889",
                "ab4d174d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "variantSetDbIds": {
              "description": "The `VariantSet` to search.",
              "example": [
                "ba63d810",
                "434d1760"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Vendor": {
      "Calls": {
        "/vendor/orders": {
          "methods": {
            "get": {
              "description": "List current available orders",
              "parameters": [{
                  "description": "The order id returned by the vendor when the order was successfully submitted. From response of \"POST /vendor/orders\"",
                  "in": "query",
                  "name": "orderId",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
                  "in": "query",
                  "name": "submissionId",
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/VendorOrder"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorOrderListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "List current available orders",
              "tags": [
                "Vendor"
              ]
            },
            "post": {
              "description": "Submit a new order to a vendor",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VendorOrderSubmissionRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VendorOrderSubmission"
                          }
                        },
                        "title": "VendorOrderSubmissionSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit New Order",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/orders/{orderId}/plates": {
          "methods": {
            "get": {
              "description": "Retrieve the plate and sample details of an order being processed",
              "parameters": [{
                  "description": "The order id returned by the vendor when the order was successfully submitted.",
                  "in": "path",
                  "name": "orderId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/VendorPlate"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorPlateListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the Plates for a specific Order",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/orders/{orderId}/results": {
          "methods": {
            "get": {
              "description": "Retrieve the data files generated by the vendors analysis",
              "parameters": [{
                  "description": "The order id returned by the vendor when the order was successfully submitted.",
                  "in": "path",
                  "name": "orderId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/VendorResultFile"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorResultFileListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a specific Order",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/orders/{orderId}/status": {
          "methods": {
            "get": {
              "description": "Retrieve the current status of an order being processed",
              "parameters": [{
                  "description": "The order id returned by the vendor when the order was successfully submitted.",
                  "in": "path",
                  "name": "orderId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "status": {
                                "enum": [
                                  "registered",
                                  "received",
                                  "inProgress",
                                  "completed",
                                  "rejected"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorOrderStatusResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the status of a specific Order",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/plates": {
          "methods": {
            "post": {
              "description": "Submit a new set of Sample data",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VendorPlateSubmissionRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VendorPlateSubmissionId"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorPlateSubmissionIdSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a new set of Sample data",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/plates/{submissionId}": {
          "methods": {
            "get": {
              "description": "Get data for a submitted set of plates",
              "parameters": [{
                  "description": "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
                  "in": "path",
                  "name": "submissionId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VendorPlateSubmission"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorPlateSubmissionSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the data for a submitted set of plates",
              "tags": [
                "Vendor"
              ]
            }
          }
        },
        "/vendor/specifications": {
          "methods": {
            "get": {
              "description": "Defines the plate format specification for the vendor.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/VendorSpecification"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "VendorSpecificationSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                }
              },
              "summary": "Get the Vendor Specifications",
              "tags": [
                "Vendor"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "VendorOrder": {
          "description": "The details of a vendor order",
          "properties": {
            "clientId": {
              "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.",
              "example": "7b51ad15",
              "type": "string"
            },
            "numberOfSamples": {
              "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
              "example": 180,
              "type": "integer"
            },
            "orderId": {
              "description": "The order id returned by the vendor when the order was successfully submitted.",
              "example": "96ba0ca3",
              "type": "string"
            },
            "requiredServiceInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
              "example": {
                "extractDNA": "true",
                "genus": "Zea",
                "species": "mays",
                "volumePerWell": "2.3 ml"
              },
              "type": "object"
            },
            "serviceIds": {
              "description": "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
              "example": [
                "e8f60f64",
                "05bd925a",
                "b698fb5e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "clientId",
            "numberOfSamples",
            "orderId",
            "serviceIds"
          ],
          "type": "object"
        },
        "VendorOrderSubmission": {
          "description": "Response to an order request",
          "properties": {
            "orderId": {
              "description": "A unique, alpha-numeric ID which identifies the order",
              "example": "b5144468",
              "type": "string"
            },
            "shipmentForms": {
              "description": "Array of paper forms which need to be printed and included with the physical shipment",
              "items": {
                "properties": {
                  "fileDescription": {
                    "description": "The human readable long description for this form",
                    "example": "This is a shipment manifest form",
                    "type": "string"
                  },
                  "fileName": {
                    "description": "The human readable name for this form",
                    "example": "Shipment Manifest",
                    "type": "string"
                  },
                  "fileURL": {
                    "description": "The URL to download this form",
                    "example": "https://vendor.org/forms/manifest.pdf",
                    "format": "uri",
                    "type": "string"
                  }
                },
                "required": [
                  "fileURL"
                ],
                "title": "ShipmentForm",
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "orderId"
          ],
          "type": "object"
        },
        "VendorOrderSubmissionRequest": {
          "description": "Request object structure to submit plate data to a vendor",
          "properties": {
            "clientId": {
              "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
              "example": "b8aac350",
              "type": "string"
            },
            "numberOfSamples": {
              "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
              "example": 180,
              "type": "integer"
            },
            "plates": {
              "description": "Array of new plates to be submitted to a vendor",
              "items": {
                "properties": {
                  "clientPlateBarcode": {
                    "description": "(Optional) The value of the bar code attached to this plate",
                    "example": "6ebf3f25",
                    "type": "string"
                  },
                  "clientPlateId": {
                    "description": "The ID which uniquely identifies this plate to the client making the request",
                    "example": "02a8d6f0",
                    "type": "string"
                  },
                  "sampleSubmissionFormat": {
                    "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                    "enum": [
                      "PLATE_96",
                      "TUBES"
                    ],
                    "example": "PLATE_96",
                    "type": "string"
                  },
                  "samples": {
                    "items": {
                      "properties": {
                        "clientSampleBarCode": {
                          "description": "(Optional) The value of the bar code attached to this sample",
                          "example": "7c07e527",
                          "type": "string"
                        },
                        "clientSampleId": {
                          "description": "The ID which uniquely identifies this sample to the client making the request",
                          "example": "bd96bd69",
                          "type": "string"
                        },
                        "column": {
                          "description": "The Column identifier for this samples location in the plate",
                          "example": 6,
                          "maximum": 12,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "comments": {
                          "description": "Generic comments about this sample for the vendor",
                          "example": "This is my favorite sample, please be extra careful with it.",
                          "type": "string"
                        },
                        "concentration": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "organismName": {
                          "description": "Scientific organism name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "row": {
                          "description": "The Row identifier for this samples location in the plate",
                          "example": "B",
                          "type": "string"
                        },
                        "speciesName": {
                          "description": "Scientific species name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "taxonomyOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "tissueType": {
                          "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                          "example": "Root",
                          "type": "string"
                        },
                        "tissueTypeOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "volume": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "well": {
                          "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                          "example": "B6",
                          "type": "string"
                        }
                      },
                      "required": [
                        "clientSampleId"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "requiredServiceInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
              "example": {
                "extractDNA": true,
                "genus": "Zea",
                "species": "mays",
                "volumePerWell": "2.3 ml"
              },
              "type": "object"
            },
            "sampleType": {
              "description": "The type of Samples being submitted",
              "enum": [
                "DNA",
                "RNA",
                "Tissue"
              ],
              "example": "Tissue",
              "type": "string"
            },
            "serviceIds": {
              "description": "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
              "example": [
                "e8f60f64",
                "05bd925a",
                "b698fb5e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "VendorPlate": {
          "properties": {
            "clientPlateBarcode": {
              "description": "(Optional) The value of the bar code attached to this plate",
              "example": "31dd5787",
              "type": "string"
            },
            "clientPlateId": {
              "description": "The ID which uniquely identifies this plate to the client making the request",
              "example": "0ad6c0ef",
              "type": "string"
            },
            "sampleSubmissionFormat": {
              "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
              "enum": [
                "PLATE_96",
                "TUBES"
              ],
              "example": "PLATE_96",
              "type": "string"
            },
            "samples": {
              "items": {
                "properties": {
                  "clientSampleBarCode": {
                    "description": "(Optional) The value of the bar code attached to this sample",
                    "example": "7c07e527",
                    "type": "string"
                  },
                  "clientSampleId": {
                    "description": "The ID which uniquely identifies this sample to the client making the request",
                    "example": "bd96bd69",
                    "type": "string"
                  },
                  "column": {
                    "description": "The Column identifier for this samples location in the plate",
                    "example": 6,
                    "maximum": 12,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "comments": {
                    "description": "Generic comments about this sample for the vendor",
                    "example": "This is my favorite sample, please be extra careful with it.",
                    "type": "string"
                  },
                  "concentration": {
                    "description": "A value with units",
                    "properties": {
                      "units": {
                        "description": "Units (example: \"ng/ul\")",
                        "example": "ng/ul",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value (example: \"2.3\")",
                        "example": 2.3,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "organismName": {
                    "description": "Scientific organism name",
                    "example": "Aspergillus fructus",
                    "type": "string"
                  },
                  "row": {
                    "description": "The Row identifier for this samples location in the plate",
                    "example": "B",
                    "type": "string"
                  },
                  "speciesName": {
                    "description": "Scientific species name",
                    "example": "Aspergillus fructus",
                    "type": "string"
                  },
                  "taxonomyOntologyReference": {
                    "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                    "properties": {
                      "documentationLinks": {
                        "description": "links to various ontology documentation",
                        "items": {
                          "properties": {
                            "URL": {
                              "example": "http://purl.obolibrary.org/obo/ro.owl",
                              "format": "uri",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "OBO",
                                "RDF",
                                "WEBPAGE"
                              ],
                              "example": "OBO",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "ontologyDbId": {
                        "description": "Ontology database unique identifier",
                        "example": "6b071868",
                        "type": "string"
                      },
                      "ontologyName": {
                        "description": "Ontology name",
                        "example": "The Crop Ontology",
                        "type": "string"
                      },
                      "version": {
                        "description": "Ontology version (no specific format)",
                        "example": "7.2.3",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ontologyName",
                      "ontologyDbId"
                    ],
                    "type": "object"
                  },
                  "tissueType": {
                    "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                    "example": "Root",
                    "type": "string"
                  },
                  "tissueTypeOntologyReference": {
                    "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                    "properties": {
                      "documentationLinks": {
                        "description": "links to various ontology documentation",
                        "items": {
                          "properties": {
                            "URL": {
                              "example": "http://purl.obolibrary.org/obo/ro.owl",
                              "format": "uri",
                              "type": "string"
                            },
                            "type": {
                              "enum": [
                                "OBO",
                                "RDF",
                                "WEBPAGE"
                              ],
                              "example": "OBO",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "ontologyDbId": {
                        "description": "Ontology database unique identifier",
                        "example": "6b071868",
                        "type": "string"
                      },
                      "ontologyName": {
                        "description": "Ontology name",
                        "example": "The Crop Ontology",
                        "type": "string"
                      },
                      "version": {
                        "description": "Ontology version (no specific format)",
                        "example": "7.2.3",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ontologyName",
                      "ontologyDbId"
                    ],
                    "type": "object"
                  },
                  "volume": {
                    "description": "A value with units",
                    "properties": {
                      "units": {
                        "description": "Units (example: \"ng/ul\")",
                        "example": "ng/ul",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value (example: \"2.3\")",
                        "example": 2.3,
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "well": {
                    "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                    "example": "B6",
                    "type": "string"
                  }
                },
                "required": [
                  "clientSampleId"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "VendorPlateSubmission": {
          "description": "Response of a plate submission",
          "properties": {
            "clientId": {
              "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
              "example": "e470ae0d",
              "type": "string"
            },
            "numberOfSamples": {
              "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
              "example": 180,
              "type": "integer"
            },
            "plates": {
              "description": "Array of new plates to be submitted to a vendor",
              "items": {
                "properties": {
                  "clientPlateBarcode": {
                    "description": "(Optional) The value of the bar code attached to this plate",
                    "example": "bfb33593",
                    "type": "string"
                  },
                  "clientPlateId": {
                    "description": "The ID which uniquely identifies this plate to the client making the request",
                    "example": "dae8f49d",
                    "type": "string"
                  },
                  "sampleSubmissionFormat": {
                    "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                    "enum": [
                      "PLATE_96",
                      "TUBES"
                    ],
                    "example": "PLATE_96",
                    "type": "string"
                  },
                  "samples": {
                    "items": {
                      "properties": {
                        "clientSampleBarCode": {
                          "description": "(Optional) The value of the bar code attached to this sample",
                          "example": "7c07e527",
                          "type": "string"
                        },
                        "clientSampleId": {
                          "description": "The ID which uniquely identifies this sample to the client making the request",
                          "example": "bd96bd69",
                          "type": "string"
                        },
                        "column": {
                          "description": "The Column identifier for this samples location in the plate",
                          "example": 6,
                          "maximum": 12,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "comments": {
                          "description": "Generic comments about this sample for the vendor",
                          "example": "This is my favorite sample, please be extra careful with it.",
                          "type": "string"
                        },
                        "concentration": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "organismName": {
                          "description": "Scientific organism name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "row": {
                          "description": "The Row identifier for this samples location in the plate",
                          "example": "B",
                          "type": "string"
                        },
                        "speciesName": {
                          "description": "Scientific species name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "taxonomyOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "tissueType": {
                          "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                          "example": "Root",
                          "type": "string"
                        },
                        "tissueTypeOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "volume": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "well": {
                          "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                          "example": "B6",
                          "type": "string"
                        }
                      },
                      "required": [
                        "clientSampleId"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "clientId",
            "numberOfSamples",
            "plates"
          ],
          "type": "object"
        },
        "VendorPlateSubmissionId": {
          "description": "Response to an order request",
          "properties": {
            "submissionId": {
              "description": "A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.",
              "example": "f8f409e0",
              "type": "string"
            }
          },
          "required": [
            "submissionId"
          ],
          "type": "object"
        },
        "VendorPlateSubmissionRequest": {
          "description": "Request object structure to submit plate data to a vendor",
          "properties": {
            "clientId": {
              "description": "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
              "example": "b8aac350",
              "type": "string"
            },
            "numberOfSamples": {
              "description": "The total number of samples contained in this request. Used for billing and basic validation of the request.",
              "example": 180,
              "type": "integer"
            },
            "plates": {
              "description": "Array of new plates to be submitted to a vendor",
              "items": {
                "properties": {
                  "clientPlateBarcode": {
                    "description": "(Optional) The value of the bar code attached to this plate",
                    "example": "6ebf3f25",
                    "type": "string"
                  },
                  "clientPlateId": {
                    "description": "The ID which uniquely identifies this plate to the client making the request",
                    "example": "02a8d6f0",
                    "type": "string"
                  },
                  "sampleSubmissionFormat": {
                    "description": "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                    "enum": [
                      "PLATE_96",
                      "TUBES"
                    ],
                    "example": "PLATE_96",
                    "type": "string"
                  },
                  "samples": {
                    "items": {
                      "properties": {
                        "clientSampleBarCode": {
                          "description": "(Optional) The value of the bar code attached to this sample",
                          "example": "7c07e527",
                          "type": "string"
                        },
                        "clientSampleId": {
                          "description": "The ID which uniquely identifies this sample to the client making the request",
                          "example": "bd96bd69",
                          "type": "string"
                        },
                        "column": {
                          "description": "The Column identifier for this samples location in the plate",
                          "example": 6,
                          "maximum": 12,
                          "minimum": 1,
                          "type": "integer"
                        },
                        "comments": {
                          "description": "Generic comments about this sample for the vendor",
                          "example": "This is my favorite sample, please be extra careful with it.",
                          "type": "string"
                        },
                        "concentration": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "organismName": {
                          "description": "Scientific organism name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "row": {
                          "description": "The Row identifier for this samples location in the plate",
                          "example": "B",
                          "type": "string"
                        },
                        "speciesName": {
                          "description": "Scientific species name",
                          "example": "Aspergillus fructus",
                          "type": "string"
                        },
                        "taxonomyOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "tissueType": {
                          "description": "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                          "example": "Root",
                          "type": "string"
                        },
                        "tissueTypeOntologyReference": {
                          "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                          "properties": {
                            "documentationLinks": {
                              "description": "links to various ontology documentation",
                              "items": {
                                "properties": {
                                  "URL": {
                                    "example": "http://purl.obolibrary.org/obo/ro.owl",
                                    "format": "uri",
                                    "type": "string"
                                  },
                                  "type": {
                                    "enum": [
                                      "OBO",
                                      "RDF",
                                      "WEBPAGE"
                                    ],
                                    "example": "OBO",
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "ontologyDbId": {
                              "description": "Ontology database unique identifier",
                              "example": "6b071868",
                              "type": "string"
                            },
                            "ontologyName": {
                              "description": "Ontology name",
                              "example": "The Crop Ontology",
                              "type": "string"
                            },
                            "version": {
                              "description": "Ontology version (no specific format)",
                              "example": "7.2.3",
                              "type": "string"
                            }
                          },
                          "required": [
                            "ontologyName",
                            "ontologyDbId"
                          ],
                          "type": "object"
                        },
                        "volume": {
                          "description": "A value with units",
                          "properties": {
                            "units": {
                              "description": "Units (example: \"ng/ul\")",
                              "example": "ng/ul",
                              "type": "string"
                            },
                            "value": {
                              "description": "Value (example: \"2.3\")",
                              "example": 2.3,
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "well": {
                          "description": "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                          "example": "B6",
                          "type": "string"
                        }
                      },
                      "required": [
                        "clientSampleId"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "sampleType": {
              "description": "The type of Samples being submitted",
              "enum": [
                "DNA",
                "RNA",
                "Tissue"
              ],
              "example": "Tissue",
              "type": "string"
            }
          },
          "required": [
            "clientId",
            "numberOfSamples",
            "plates",
            "sampleType"
          ],
          "type": "object"
        },
        "VendorResultFile": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "clientSampleIds": {
              "description": "The list of sampleDbIds included in the file",
              "example": [
                "3968733e",
                "e0de6391",
                "66854172"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "fileName": {
              "description": "Name of the file",
              "example": "sequence_data_ce640bd3.csv",
              "type": "string"
            },
            "fileType": {
              "description": "Format of the file",
              "example": "text/csv",
              "type": "string"
            },
            "fileURL": {
              "description": "The URL to a file with the results of a vendor analysis",
              "example": "https://vendor.org/data/sequence_data_ce640bd3.csv",
              "format": "uri",
              "type": "string"
            },
            "md5sum": {
              "description": "MD5 Hash Check Sum for the file to confirm download without error",
              "example": "c2365e900c81a89cf74d83dab60df146",
              "type": "string"
            }
          },
          "required": [
            "fileURL",
            "fileType",
            "fileName",
            "clientSampleIds"
          ],
          "type": "object"
        },
        "VendorSpecification": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "object"
              },
              "description": "Additional arbitrary information specific to a particular Vendor. Look for the Vendors specific API documentation for more details",
              "type": "object"
            },
            "services": {
              "description": "List of platform specifications available at the vendor",
              "items": {
                "properties": {
                  "serviceDescription": {
                    "description": "Description of the vendor platform",
                    "example": "A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines.",
                    "type": "string"
                  },
                  "serviceId": {
                    "description": "Unique identifier for this service",
                    "example": "085d298f",
                    "type": "string"
                  },
                  "serviceName": {
                    "description": "The human readable name of a platform",
                    "example": "The Deluxe Service",
                    "type": "string"
                  },
                  "servicePlatformMarkerType": {
                    "description": "The type of markers used in this services platform",
                    "enum": [
                      "FIXED",
                      "DISCOVERABLE"
                    ],
                    "example": "FIXED",
                    "type": "string"
                  },
                  "servicePlatformName": {
                    "description": "The technology platform used by this service",
                    "example": "RNA-seq",
                    "type": "string"
                  },
                  "specificRequirements": {
                    "description": "Additional arbitrary requirements for a particular platform",
                    "example": [{
                        "description": "The genus of the samples",
                        "key": "genus"
                      }, {
                        "description": "The species of the samples",
                        "key": "species"
                      }, {
                        "description": "Approximate volume of each sample (ex 2.3 ml)",
                        "key": "volumePerWell"
                      }, {
                        "description": "Does DNA extraction need to happen before sequencing (ex true)",
                        "key": "extractDNA"
                      }
                    ],
                    "items": {
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "serviceId",
                  "serviceName"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "vendorContact": {
              "properties": {
                "vendorAddress": {
                  "description": "The street address of the vendor",
                  "example": "123 Main Street",
                  "type": "string"
                },
                "vendorCity": {
                  "description": "The name of the city where the vendor is located",
                  "example": "Townsville",
                  "type": "string"
                },
                "vendorContactName": {
                  "description": "The name or identifier of the primary vendor contact",
                  "example": "Bob Robertson",
                  "type": "string"
                },
                "vendorCountry": {
                  "description": "The name of the country where the vendor is located",
                  "example": "USA",
                  "type": "string"
                },
                "vendorDescription": {
                  "description": "A description of the vendor",
                  "example": "This is a sequencing vendor. Sequencing happens here.",
                  "type": "string"
                },
                "vendorEmail": {
                  "description": "The primary email address used to contact the vendor",
                  "example": "bob@bob.org",
                  "type": "string"
                },
                "vendorName": {
                  "description": "The human readable name of the vendor",
                  "example": "The Example Vendor Lab",
                  "type": "string"
                },
                "vendorPhone": {
                  "description": "The primary phone number used to contact the vendor",
                  "example": "+1-800-555-5555",
                  "type": "string"
                },
                "vendorURL": {
                  "description": "The primary URL for the vendor",
                  "example": "https://sequencing.org/vendor",
                  "type": "string"
                }
              },
              "required": [
                "vendorName"
              ],
              "type": "object"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "BrAPI-Germplasm": {
    "Crosses": {
      "Calls": {
        "/crosses": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Cross entities.",
              "parameters": [{
                  "description": "Search for Crossing Projects with this unique id",
                  "in": "query",
                  "name": "crossingProjectDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Search for Cross with this unique id",
                  "in": "query",
                  "name": "crossDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Cross entities",
              "tags": [
                "Crosses"
              ]
            },
            "post": {
              "description": "Create new Cross entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/CrossNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Cross entities on this server",
              "tags": [
                "Crosses"
              ]
            },
            "put": {
              "description": "Update existing Cross entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/CrossNewRequest"
                      },
                      "description": "A map of new Cross entities. The key is the crossDbId of the entity to be updated, the value is the Cross object.",
                      "example": {
                        "<crossDbId_1>": {
                          "additionalInfo": {},
                          "crossAttributes": [{
                              "crossAttributeName": "string",
                              "crossAttributeValue": "string"
                            }
                          ],
                          "crossName": "my_Crosses_2018_01",
                          "crossType": "BIPARENTAL",
                          "crossingProjectDbId": "696d7c92",
                          "crossingProjectName": "my_Crosses_2018",
                          "parent1": {
                            "germplasmDbId": "d34b10c3",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "3f0a1798",
                            "observationUnitName": "my_Plot_9001",
                            "parentType": "FEMALE"
                          },
                          "parent2": {
                            "germplasmDbId": "776a609c",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "2e1926a7",
                            "observationUnitName": "my_Plot_9002",
                            "parentType": "MALE"
                          },
                          "pollinationTimeStamp": "2019-08-15T18:49:00.327Z"
                        },
                        "<crossDbId_2>": {
                          "additionalInfo": {},
                          "crossAttributes": [{
                              "crossAttributeName": "string",
                              "crossAttributeValue": "string"
                            }
                          ],
                          "crossName": "my_Crosses_2018_02",
                          "crossType": "BIPARENTAL",
                          "crossingProjectDbId": "696d7c92",
                          "crossingProjectName": "my_Crosses_2018",
                          "parent1": {
                            "germplasmDbId": "c43a2fd2",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "3f2a37b8",
                            "observationUnitName": "my_Plot_9013",
                            "parentType": "FEMALE"
                          },
                          "parent2": {
                            "germplasmDbId": "124b10ad",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": 27194637,
                            "observationUnitName": "my_Plot_9014",
                            "parentType": "MALE"
                          },
                          "pollinationTimeStamp": "2019-08-15T18:49:00.327Z"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update existing Cross entities on this server",
              "tags": [
                "Crosses"
              ]
            }
          }
        },
        "/plannedcrosses": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Planned Cross entities.",
              "parameters": [{
                  "description": "Search for Crossing Projects with this unique id",
                  "in": "query",
                  "name": "crossingProjectDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Search for Planned Cross with this unique id",
                  "in": "query",
                  "name": "plannedCrossDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PlannedCrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Planned Cross entities",
              "tags": [
                "Crosses"
              ]
            },
            "post": {
              "description": "Create new Planned Cross entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/PlannedCrossNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PlannedCrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Planned Cross entities on this server",
              "tags": [
                "Crosses"
              ]
            },
            "put": {
              "description": "Update existing Planned Cross entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/PlannedCrossNewRequest"
                      },
                      "description": "A map of new Planned Cross entities. The key is the plannedCrossDbId of the entity to be updated, the value is the Planned Cross object.",
                      "example": {
                        "<plannedCrossDbId_1>": {
                          "additionalInfo": {},
                          "crossAttributes": [{
                              "crossAttributeName": "string",
                              "crossAttributeValue": "string"
                            }
                          ],
                          "crossType": "BIPARENTAL",
                          "crossingProjectDbId": "696d7c92",
                          "crossingProjectName": "my_Crosses_2018",
                          "parent1": {
                            "germplasmDbId": "d34b10c3",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "3f0a1798",
                            "observationUnitName": "my_Plot_9001",
                            "parentType": "FEMALE"
                          },
                          "parent2": {
                            "germplasmDbId": "776a609c",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "2e1926a7",
                            "observationUnitName": "my_Plot_9002",
                            "parentType": "MALE"
                          },
                          "plannedCrossName": "my_Crosses_2018_01",
                          "pollinationTimeStamp": "2019-08-15T18:49:00.327Z"
                        },
                        "<plannedCrossDbId_2>": {
                          "additionalInfo": {},
                          "crossAttributes": [{
                              "crossAttributeName": "string",
                              "crossAttributeValue": "string"
                            }
                          ],
                          "crossType": "BIPARENTAL",
                          "crossingProjectDbId": "696d7c92",
                          "crossingProjectName": "my_Crosses_2018",
                          "parent1": {
                            "germplasmDbId": "c43a2fd2",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": "3f2a37b8",
                            "observationUnitName": "my_Plot_9013",
                            "parentType": "FEMALE"
                          },
                          "parent2": {
                            "germplasmDbId": "124b10ad",
                            "germplasmName": "TME_419",
                            "observationUnitDbId": 27194637,
                            "observationUnitName": "my_Plot_9014",
                            "parentType": "MALE"
                          },
                          "plannedCrossName": "my_Crosses_2018_02",
                          "pollinationTimeStamp": "2019-08-15T18:49:00.327Z"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PlannedCrossesListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update existing Planned Cross entities on this server",
              "tags": [
                "Crosses"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Cross": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "crossAttributes": {
              "description": "Set of custom attributes associated with a cross",
              "items": {
                "description": "a custom attributes associated with a cross",
                "properties": {
                  "crossAttributeName": {
                    "description": "the human readable name of a cross attribute",
                    "example": "Humidity Percentage",
                    "type": "string"
                  },
                  "crossAttributeValue": {
                    "description": "the value of a cross attribute",
                    "example": "45",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "crossDbId": {
              "description": "the unique identifier for a cross",
              "example": "d105fd6f",
              "type": "string"
            },
            "crossName": {
              "description": "the human readable name for a cross",
              "example": "my_Crosses_2018_01",
              "type": "string"
            },
            "crossType": {
              "description": "the type of cross",
              "enum": [
                "BIPARENTAL",
                "SELF",
                "OPEN_POLLINATED",
                "BULK",
                "BULK_SELFED",
                "BULK_OPEN_POLLINATED",
                "DOUBLE_HAPLOID"
              ],
              "example": "BIPARENTAL",
              "type": "string"
            },
            "crossingProjectDbId": {
              "description": "the unique identifier for a crossing project",
              "example": "696d7c92",
              "type": "string"
            },
            "crossingProjectName": {
              "description": "the human readable name for a crossing project",
              "example": "my_Crosses_2018",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "parent1": {
              "properties": {
                "germplasmDbId": {
                  "description": "the unique identifier for a germplasm",
                  "example": "d34b10c3",
                  "type": "string"
                },
                "germplasmName": {
                  "description": "the human readable name for a germplasm",
                  "example": "TME_419",
                  "type": "string"
                },
                "observationUnitDbId": {
                  "description": "the unique identifier for an observation unit",
                  "example": "2e1926a7",
                  "type": "string"
                },
                "observationUnitName": {
                  "description": "the human readable name for an observation unit",
                  "example": "my_Plot_9001",
                  "type": "string"
                },
                "parentType": {
                  "description": "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "enum": [
                    "MALE",
                    "FEMALE",
                    "SELF",
                    "POPULATION"
                  ],
                  "example": "MALE",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "parent2": {
              "properties": {
                "germplasmDbId": {
                  "description": "the unique identifier for a germplasm",
                  "example": "d34b10c3",
                  "type": "string"
                },
                "germplasmName": {
                  "description": "the human readable name for a germplasm",
                  "example": "TME_419",
                  "type": "string"
                },
                "observationUnitDbId": {
                  "description": "the unique identifier for an observation unit",
                  "example": "2e1926a7",
                  "type": "string"
                },
                "observationUnitName": {
                  "description": "the human readable name for an observation unit",
                  "example": "my_Plot_9001",
                  "type": "string"
                },
                "parentType": {
                  "description": "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "enum": [
                    "MALE",
                    "FEMALE",
                    "SELF",
                    "POPULATION"
                  ],
                  "example": "MALE",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "pollinationTimeStamp": {
              "description": "the timestamp when the pollination took place",
              "format": "date-time",
              "type": "string"
            }
          },
          "type": "object"
        },
        "PlannedCross": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "crossType": {
              "description": "the type of cross",
              "enum": [
                "BIPARENTAL",
                "SELF",
                "OPEN_POLLINATED",
                "BULK",
                "BULK_SELFED",
                "BULK_OPEN_POLLINATED",
                "DOUBLE_HAPLOID"
              ],
              "example": "BIPARENTAL",
              "type": "string"
            },
            "crossingProjectDbId": {
              "description": "the unique identifier for a crossing project",
              "example": "696d7c92",
              "type": "string"
            },
            "crossingProjectName": {
              "description": "the human readable name for a crossing project",
              "example": "my_Crosses_2018",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "parent1": {
              "properties": {
                "germplasmDbId": {
                  "description": "the unique identifier for a germplasm",
                  "example": "d34b10c3",
                  "type": "string"
                },
                "germplasmName": {
                  "description": "the human readable name for a germplasm",
                  "example": "TME_419",
                  "type": "string"
                },
                "observationUnitDbId": {
                  "description": "the unique identifier for an observation unit",
                  "example": "2e1926a7",
                  "type": "string"
                },
                "observationUnitName": {
                  "description": "the human readable name for an observation unit",
                  "example": "my_Plot_9001",
                  "type": "string"
                },
                "parentType": {
                  "description": "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "enum": [
                    "MALE",
                    "FEMALE",
                    "SELF",
                    "POPULATION"
                  ],
                  "example": "MALE",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "parent2": {
              "properties": {
                "germplasmDbId": {
                  "description": "the unique identifier for a germplasm",
                  "example": "d34b10c3",
                  "type": "string"
                },
                "germplasmName": {
                  "description": "the human readable name for a germplasm",
                  "example": "TME_419",
                  "type": "string"
                },
                "observationUnitDbId": {
                  "description": "the unique identifier for an observation unit",
                  "example": "2e1926a7",
                  "type": "string"
                },
                "observationUnitName": {
                  "description": "the human readable name for an observation unit",
                  "example": "my_Plot_9001",
                  "type": "string"
                },
                "parentType": {
                  "description": "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "enum": [
                    "MALE",
                    "FEMALE",
                    "SELF",
                    "POPULATION"
                  ],
                  "example": "MALE",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "plannedCrossDbId": {
              "description": "the unique identifier for a cross",
              "example": "c8905568",
              "type": "string"
            },
            "plannedCrossName": {
              "description": "the human readable name for a cross",
              "example": "my_Crosses_2018_01",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "Crossing Projects": {
      "Calls": {
        "/crossingprojects": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Crossing Projects.",
              "parameters": [{
                  "description": "Search for Crossing Projects with this unique id",
                  "in": "query",
                  "name": "crossingProjectDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossingProjectsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Crossing Projects",
              "tags": [
                "Crossing Projects"
              ]
            },
            "post": {
              "description": "Create new Crossing Project entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/CrossingProjectNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossingProjectsListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Crossing Project entities on this server",
              "tags": [
                "Crossing Projects"
              ]
            }
          }
        },
        "/crossingprojects/{crossingProjectDbId}": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Crossing Projects.",
              "parameters": [{
                  "description": "Search for Crossing Projects with this unique id",
                  "in": "path",
                  "name": "crossingProjectDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossingProjectsSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Crossing Projects",
              "tags": [
                "Crossing Projects"
              ]
            },
            "put": {
              "description": "Update an existing Crossing Project entity on this server",
              "parameters": [{
                  "description": "Search for Crossing Projects with this unique id",
                  "in": "path",
                  "name": "crossingProjectDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CrossingProjectNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/CrossingProjectsSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update an existing Crossing Project",
              "tags": [
                "Crossing Projects"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "CrossingProject": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "the common name of a crop (for multi-crop systems)",
              "example": "Cassava",
              "type": "string"
            },
            "crossingProjectDbId": {
              "description": "the unique identifier for a crossing project",
              "example": "ce0e1c29",
              "type": "string"
            },
            "crossingProjectDescription": {
              "description": "the description for a crossing project",
              "example": "Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018",
              "type": "string"
            },
            "crossingProjectName": {
              "description": "the human readable name for a crossing project",
              "example": "Crosses_2018",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "programDbId": {
              "description": "the unique identifier for a program",
              "example": "a088176c",
              "type": "string"
            },
            "programName": {
              "description": "the human readable name for a program",
              "example": "IITA Cassava",
              "type": "string"
            }
          },
          "type": "object"
        },
        "CrossingProjectNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "the common name of a crop (for multi-crop systems)",
              "example": "Cassava",
              "type": "string"
            },
            "crossingProjectDescription": {
              "description": "the description for a crossing project",
              "example": "Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018",
              "type": "string"
            },
            "crossingProjectName": {
              "description": "the human readable name for a crossing project",
              "example": "Crosses_2018",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "programDbId": {
              "description": "the unique identifier for a program",
              "example": "a088176c",
              "type": "string"
            },
            "programName": {
              "description": "the human readable name for a program",
              "example": "IITA Cassava",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "Germplasm": {
      "Calls": {
        "/breedingmethods": {
          "methods": {
            "get": {
              "description": "Get the list of germplasm breeding methods available in a system.",
              "parameters": [{
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/BreedingMethod"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "BreedingMethodListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Breeding Methods",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/breedingmethods/{breedingMethodDbId}": {
          "methods": {
            "get": {
              "description": "Get the details of a specific Breeding Method used to produce Germplasm",
              "parameters": [{
                  "description": "Internal database identifier for a breeding method",
                  "in": "path",
                  "name": "breedingMethodDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/BreedingMethod"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "BreedingMethodSingleResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Breeding Method",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/germplasm": {
          "methods": {
            "get": {
              "description": "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId",
              "parameters": [{
                  "description": "Permanent unique identifier (DOI, URI, etc.)",
                  "in": "query",
                  "name": "germplasmPUI",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Internal database identifier",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Name of the germplasm",
                  "in": "query",
                  "name": "germplasmName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The common crop name related to this germplasm",
                  "in": "query",
                  "name": "commonCropName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Unique identifiers for accessions within a genebank",
                  "in": "query",
                  "name": "accessionNumber",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "A specific panel/collection/population name this germplasm belongs to.",
                  "in": "query",
                  "name": "collection",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Genus name to identify germplasm",
                  "in": "query",
                  "name": "genus",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Species name to identify germplasm",
                  "in": "query",
                  "name": "species",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Search for Germplasm that are associated with a particular Study",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Alternative name or ID used to reference this germplasm",
                  "in": "query",
                  "name": "synonym",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Search for Germplasm with this parent",
                  "in": "query",
                  "name": "parentDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Search for Germplasm with this child",
                  "in": "query",
                  "name": "progenyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Germplasm",
              "tags": [
                "Germplasm"
              ]
            },
            "post": {
              "description": "Create new Germplasm entities on this server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/GermplasmNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Germplasm entities on this server",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/germplasm/{germplasmDbId}": {
          "methods": {
            "get": {
              "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
              "parameters": [{
                  "description": "The internal id of the germplasm",
                  "in": "path",
                  "name": "germplasmDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Germplasm",
              "tags": [
                "Germplasm"
              ]
            },
            "put": {
              "description": "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
              "parameters": [{
                  "description": "The internal id of the germplasm",
                  "in": "path",
                  "name": "germplasmDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update the details of an existing Germplasm",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/germplasm/{germplasmDbId}/mcpd": {
          "methods": {
            "get": {
              "description": "Get all MCPD details of a germplasm\n\n<a target=\"_blank\" href=\"https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>\n\nImplementation Notes\n\n- When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.",
              "parameters": [{
                  "description": "the internal id of the germplasm",
                  "in": "path",
                  "name": "germplasmDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/GermplasmMCPD"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GermplasmMCPDResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Germplasm in MCPD format",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/germplasm/{germplasmDbId}/pedigree": {
          "methods": {
            "get": {
              "description": "Get the parentage information of a specific Germplasm",
              "parameters": [{
                  "description": "the internal id of the germplasm",
                  "in": "path",
                  "name": "germplasmDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "text representation of the pedigree",
                  "in": "query",
                  "name": "notation",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "include array of siblings in response",
                  "in": "query",
                  "name": "includeSiblings",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/PedigreeNode"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GermplasmPedigreeResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the pedigree details of a specific Germplasm",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/germplasm/{germplasmDbId}/progeny": {
          "methods": {
            "get": {
              "description": "Get the germplasmDbIds for all the Progeny of a particular germplasm.\n\nImplementation Notes\n\n- Regarding the ''parentType'' field in the progeny object. Given a germplasm A having a progeny B and C, ''parentType'' for progeny B refers to the ''parentType'' of A toward B.",
              "parameters": [{
                  "description": "the internal id of the germplasm",
                  "in": "path",
                  "name": "germplasmDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "$ref": "#/components/schemas/ProgenyNode"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GermplasmProgenyResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the progeny details of a specific Germplasm",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/search/germplasm": {
          "methods": {
            "post": {
              "description": "Search for a set of germplasm based on some criteria\n\nAddresses these needs \n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Germplasm",
              "tags": [
                "Germplasm"
              ]
            }
          }
        },
        "/search/germplasm/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "See Search Services for additional implementation details.\n\nAddresses these needs: \n\n1. General germplasm search mechanism that accepts POST for complex queries \n\n2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n3. possibility to get MCPD details by PUID rather than dbId",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Germplasm search request",
              "tags": [
                "Germplasm"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "BreedingMethod": {
          "properties": {
            "abbreviation": {
              "description": "an abbreviation for the name of this breeding method",
              "example": "MB",
              "type": "string"
            },
            "breedingMethodDbId": {
              "description": "the unique identifier for this breeding method",
              "example": "ffcce7ef",
              "type": "string"
            },
            "breedingMethodName": {
              "description": "human readable name of the breeding method",
              "example": "Male Backcross",
              "type": "string"
            },
            "description": {
              "description": "human readable description of the breeding method",
              "example": "Backcross to recover a specific gene.",
              "type": "string"
            }
          },
          "required": [
            "breedingMethodDbId"
          ],
          "type": "object"
        },
        "Germplasm": {
          "properties": {
            "accessionNumber": {
              "description": "This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
              "example": "A0000003",
              "type": "string"
            },
            "acquisitionDate": {
              "description": "The date this germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
              "format": "date",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "biologicalStatusOfAccessionCode": {
              "description": "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
              "enum": [
                "100",
                "110",
                "120",
                "130",
                "200",
                "300",
                "400",
                "410",
                "411",
                "412",
                "413",
                "414",
                "415",
                "416",
                "420",
                "421",
                "422",
                "423",
                "500",
                "600",
                "999"
              ],
              "example": "420",
              "type": "string"
            },
            "biologicalStatusOfAccessionDescription": {
              "description": "Supplemental text description for 'biologicalStatusOfAccessionCode'",
              "example": "Genetic stock",
              "type": "string"
            },
            "breedingMethodDbId": {
              "description": "The unique identifier for the breeding method used to create this germplasm",
              "example": "ffcce7ef",
              "type": "string"
            },
            "collection": {
              "description": "A specific panel/collection/population name this germplasm belongs to.",
              "example": "Rice Diversity Panel 1 (RDP1)",
              "type": "string"
            },
            "commonCropName": {
              "description": "Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\".",
              "example": "Maize",
              "type": "string"
            },
            "countryOfOriginCode": {
              "description": "3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
              "example": "BES",
              "type": "string"
            },
            "defaultDisplayName": {
              "description": "Human readable name used for display purposes",
              "example": "A0000003",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "donors": {
              "description": "List of donor institutes",
              "items": {
                "properties": {
                  "donorAccessionNumber": {
                    "description": "The accession number assigned by the donor\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.\n          \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                    "example": "A0000123",
                    "type": "string"
                  },
                  "donorInstituteCode": {
                    "description": "The institute code for the donor institute\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.\n\nMCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                    "example": "PER001",
                    "type": "string"
                  },
                  "germplasmPUI": {
                    "description": "The Permanent Unique Identifier which represents a germplasm from the source or donor\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source",
                    "example": "http://pui.per/accession/A0000003",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "genus": {
              "description": "Genus name for taxon. Initial uppercase letter required.\n\nMCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.\n\nMIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.",
              "example": "Aspergillus",
              "type": "string"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm within the given database server\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.",
              "example": "d4076594",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.\n\nMCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.",
              "example": "A0000003",
              "type": "string"
            },
            "germplasmOrigin": {
              "description": "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.",
              "items": {
                "description": "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 ",
                "properties": {
                  "coordinateUncertainty": {
                    "description": "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
                    "example": "20",
                    "type": "string"
                  },
                  "coordinates": {
                    "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                    "properties": {
                      "geometry": {
                        "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                        "discriminator": {
                          "mapping": {
                            "Point": "#/components/schemas/pointGeometry",
                            "Polygon": "#/components/schemas/polygonGeometry"
                          },
                          "propertyName": "type"
                        },
                        "example": {
                          "coordinates": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "type": "Point"
                        },
                        "oneOf": [{
                            "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                            "properties": {
                              "coordinates": {
                                "description": "A single position",
                                "example": [
                                  -76.506042,
                                  42.417373,
                                  123
                                ],
                                "items": {
                                  "type": "number"
                                },
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": {
                                "default": "Point",
                                "description": "The literal string \"Point\"",
                                "example": "Point",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }, {
                            "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                            "properties": {
                              "coordinates": {
                                "description": "An array of linear rings",
                                "example": [
                                  [
                                    [
                                      -77.456654,
                                      42.241133,
                                      494
                                    ],
                                    [
                                      -75.414133,
                                      41.508282,
                                      571
                                    ],
                                    [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    [
                                      -77.456654,
                                      42.241133,
                                      346
                                    ]
                                  ]
                                ],
                                "items": {
                                  "description": "An array of at least four positions where the first equals the last",
                                  "example": [
                                    [
                                      -77.456654,
                                      42.241133,
                                      494
                                    ],
                                    [
                                      -75.414133,
                                      41.508282,
                                      571
                                    ],
                                    [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    [
                                      -77.456654,
                                      42.241133,
                                      346
                                    ]
                                  ],
                                  "items": {
                                    "description": "A single position",
                                    "example": [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    "items": {
                                      "type": "number"
                                    },
                                    "minItems": 2,
                                    "type": "array"
                                  },
                                  "minItems": 4,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "Polygon",
                                "description": "The literal string \"Polygon\"",
                                "example": "Polygon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "title": "GeoJSON Geometry",
                        "type": "object"
                      },
                      "type": {
                        "default": "Feature",
                        "description": "The literal string \"Feature\"",
                        "example": "Feature",
                        "type": "string"
                      }
                    },
                    "title": "GeoJSON",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "germplasmPUI": {
              "description": "The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
              "example": "http://pui.per/accession/A0000003",
              "type": "string"
            },
            "germplasmPreprocessing": {
              "description": "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.",
              "example": "EO:0007210; transplanted from study 2351 observation unit ID: pot:894",
              "type": "string"
            },
            "instituteCode": {
              "description": "The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
              "example": "PER001",
              "type": "string"
            },
            "instituteName": {
              "description": "The name of the institute that maintains the material",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "pedigree": {
              "description": "The cross name and optional selection history.\n\nMCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "seedSource": {
              "description": "The source of the seed ",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "seedSourceDescription": {
              "description": "Description of the material source\n\nMIAPPE V1.1 (DM-56) Material source description - Description of the material source",
              "example": "Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil.",
              "type": "string"
            },
            "species": {
              "description": "Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.",
              "example": "fructus",
              "type": "string"
            },
            "speciesAuthority": {
              "description": "The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
              "example": "Smith, 1822",
              "type": "string"
            },
            "storageTypes": {
              "description": "The type of storage this germplasm is kept in at a genebank.",
              "example": [{
                  "code": "20",
                  "description": "Field collection"
                }, {
                  "code": "11",
                  "description": "Short term"
                }
              ],
              "items": {
                "properties": {
                  "code": {
                    "description": "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)",
                    "enum": [
                      "10",
                      "11",
                      "12",
                      "13",
                      "20",
                      "30",
                      "40",
                      "50",
                      "99"
                    ],
                    "example": "11",
                    "type": "string"
                  },
                  "description": {
                    "description": "A supplemental text description of the storage type",
                    "example": "Short term",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "subtaxa": {
              "description": "Subtaxon can be used to store any additional taxonomic identifier.\n\nMCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").\n\nMIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).",
              "example": "Aspergillus fructus A",
              "type": "string"
            },
            "subtaxaAuthority": {
              "description": "The authority organization responsible for tracking and maintaining the subtaxon information\n\nMCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
              "example": "Smith, 1822",
              "type": "string"
            },
            "synonyms": {
              "description": "List of alternative names or IDs used to reference this germplasm\n\nMCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.",
              "items": {
                "properties": {
                  "synonym": {
                    "description": "Alternative name or ID used to reference this germplasm",
                    "example": "variety_1",
                    "type": "string"
                  },
                  "type": {
                    "description": "A descriptive classification for this synonym",
                    "example": "Pre-Code",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "taxonIds": {
              "description": "The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as \"ncbiTaxon\" preferably with a purl. The rank of this ID should be species.\n\nMIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.",
              "items": {
                "properties": {
                  "sourceName": {
                    "description": "The human readable name of the taxonomy provider",
                    "example": "NCBI",
                    "type": "string"
                  },
                  "taxonId": {
                    "description": "The identifier (name, ID, URI) of a particular taxonomy within the source provider",
                    "example": "2026747",
                    "type": "string"
                  }
                },
                "required": [
                  "sourceName",
                  "taxonId"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "GermplasmMCPD": {
          "properties": {
            "accessionNames": {
              "description": "MCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.",
              "example": [
                "Symphony",
                "Emma"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "accessionNumber": {
              "description": "MCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
              "example": "A0000003",
              "type": "string"
            },
            "acquisitionDate": {
              "description": "MCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
              "format": "date",
              "type": "string"
            },
            "acquisitionSourceCode": {
              "description": "MCPD (v2.1) (COLLSRC) 21. The coding scheme proposed can be used at 2 different levels of detail: either by using the general codes (in bold-face) such as 10, 20, 30, 40, etc., or by using the more specific codes, such as 11, 12, etc. \n\n10) Wild habitat \n11) Forest or woodland \n12) Shrubland \n13) Grassland \n14) Desert or tundra \n15) Aquatic habitat \n20) Farm or cultivated habitat \n21) Field \n22) Orchard \n23) Backyard, kitchen or home garden (urban, peri-urban or rural) \n24) Fallow land \n25) Pasture \n26) Farm store \n27) Threshing floor \n28) Park \n30) Market or shop \n40) Institute, Experimental station, Research organization, Genebank \n50) Seed company \n60) Weedy, disturbed or ruderal habitat \n61) Roadside \n62) Field margin \n99) Other (Elaborate in REMARKS field)",
              "enum": [
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "30",
                "40",
                "50",
                "60",
                "61",
                "62",
                "99"
              ],
              "example": "26",
              "type": "string"
            },
            "alternateIDs": {
              "description": "MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon. ",
              "example": [
                "3",
                "http://pui.per/accession/A0000003",
                "A0000003"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ancestralData": {
              "description": "MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "biologicalStatusOfAccessionCode": {
              "description": "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
              "enum": [
                "100",
                "110",
                "120",
                "130",
                "200",
                "300",
                "400",
                "410",
                "411",
                "412",
                "413",
                "414",
                "415",
                "416",
                "420",
                "421",
                "422",
                "423",
                "500",
                "600",
                "999"
              ],
              "example": "421",
              "type": "string"
            },
            "breedingInstitutes": {
              "items": {
                "properties": {
                  "instituteCode": {
                    "description": "MCPD (v2.1) (BREDCODE) 18. FAO WIEWS code of the institute that has bred the material. If the holding institute has bred the material, the breeding institute code (BREDCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.",
                    "example": "PER001",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "MCPD (v2.1) (BREDNAME) 18.1  Name of the institute (or person) that bred the material. This descriptor should be used only if BREDCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple names are separated by a semicolon without space.",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "collectingInfo": {
              "description": "Information about the collection of this germplasm",
              "properties": {
                "collectingDate": {
                  "description": "MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
                  "format": "date",
                  "type": "string"
                },
                "collectingInstitutes": {
                  "description": "Institutes which collected the sample",
                  "items": {
                    "properties": {
                      "instituteAddress": {
                        "description": "MCPD (v2.1) (COLLINSTADDRESS) 4.1.1  Address of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled since the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.",
                        "example": "123 Main Street, Lima, Peru, 5555",
                        "type": "string"
                      },
                      "instituteCode": {
                        "description": "MCPD (v2.1) (COLLCODE) 4.  FAO WIEWS code of the institute collecting the sample. If the holding institute has collected the material, the collecting institute code (COLLCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.",
                        "example": "PER001",
                        "type": "string"
                      },
                      "instituteName": {
                        "description": "MCPD (v2.1) (COLLNAME) 4.1  Name of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.",
                        "example": "The BrAPI Institute",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "collectingMissionIdentifier": {
                  "description": "MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. \"CIATFOR_052\", \"CN_426\").",
                  "example": "CIATFOR_052",
                  "type": "string"
                },
                "collectingNumber": {
                  "description": "MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. \"ab109909\"). This identifier is essential for identifying duplicates held in different collections.",
                  "example": "ab109909",
                  "type": "string"
                },
                "collectingSite": {
                  "description": "Information about the location where the sample was collected",
                  "properties": {
                    "coordinateUncertainty": {
                      "description": "MCPD (v2.1) (COORDUNCERT) 15.5 Uncertainty associated with the coordinates in metres. Leave the value empty if the uncertainty is unknown.",
                      "example": "20",
                      "type": "string"
                    },
                    "elevation": {
                      "description": "MCPD (v2.1) (ELEVATION) 16. Elevation of collecting site expressed in metres above sea level. Negative values are allowed.",
                      "example": "35",
                      "type": "string"
                    },
                    "georeferencingMethod": {
                      "description": "MCPD (v2.1) (GEOREFMETH) 15.7  The georeferencing method used (GPS, determined from map, gazetteer, or estimated using software). Leave the value empty if georeferencing method is not known.",
                      "example": "WGS84",
                      "type": "string"
                    },
                    "latitudeDecimal": {
                      "description": "MCPD (v2.1) (DECLATITUDE) 15.1 Latitude expressed in decimal degrees. Positive values are North of the Equator; negative values are South of the Equator (e.g. -44.6975).",
                      "example": "+42.445295",
                      "type": "string"
                    },
                    "latitudeDegrees": {
                      "description": "MCPD (v2.1) (LATITUDE) 15.2 Degrees (2 digits) minutes (2 digits), and seconds (2 digits) followed by N (North) or S (South) (e.g. 103020S). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 10",
                      "example": "42 26 43.1 N",
                      "type": "string"
                    },
                    "locationDescription": {
                      "description": "MCPD (v2.1) (COLLSITE) 14. Location information below the country level that describes where the accession was collected, preferable in English. This might include the distance in kilometres and direction from the nearest town, village or map grid reference point, (e.g. 7 km south of Townsville).",
                      "example": "South east hill near institute buildings",
                      "type": "string"
                    },
                    "longitudeDecimal": {
                      "description": "MCPD (v2.1) (DECLONGITUDE) 15.3 Longitude expressed in decimal degrees. Positive values are East of the Greenwich Meridian; negative values are West of the Greenwich Meridian (e.g. +120.9123).",
                      "example": "-076.471934",
                      "type": "string"
                    },
                    "longitudeDegrees": {
                      "description": "MCPD (v2.1) (LONGITUDE) 15.4 Degrees (3 digits), minutes (2 digits), and seconds (2 digits) followed by E (East) or W (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 076",
                      "example": "76 28 19.0 W",
                      "type": "string"
                    },
                    "spatialReferenceSystem": {
                      "description": "MCPD (v2.1) (COORDDATUM) 15.6 The geodetic datum or spatial reference system upon which the coordinates given in decimal latitude and decimal longitude are based (e.g. WGS84). The GPS uses the WGS84 datum.",
                      "example": "WGS84",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "commonCropName": {
              "description": "MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\". ",
              "example": "malting barley",
              "type": "string"
            },
            "countryOfOrigin": {
              "description": "MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers\" variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note: Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
              "example": "Peru",
              "type": "string"
            },
            "donorInfo": {
              "description": "Information about the donor",
              "properties": {
                "donorAccessionNumber": {
                  "description": "MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                  "example": "A0090204",
                  "type": "string"
                },
                "donorAccessionPui": {
                  "description": "PUI (DOI mostly) of the accession in the donor system.",
                  "example": "http://pui.per/accession/A0010025",
                  "type": "string"
                },
                "donorInstitute": {
                  "properties": {
                    "instituteCode": {
                      "description": "MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                      "example": "PER001",
                      "type": "string"
                    },
                    "instituteName": {
                      "description": "MCPD (v2.1) (DONORNAME) 22.1  Name of the donor institute (or person). This descriptor should be used only if DONORCODE can not be filled because the FAO WIEWS code for this institute is not available.",
                      "example": "The BrAPI Institute",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "genus": {
              "description": "MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.",
              "example": "Aspergillus",
              "type": "string"
            },
            "germplasmDbId": {
              "description": "A unique identifier which identifies a germplasm in this database",
              "example": "31c4efbc",
              "type": "string"
            },
            "germplasmPUI": {
              "description": "MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
              "example": "http://pui.per/accession/A0403652",
              "type": "string"
            },
            "instituteCode": {
              "description": "MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
              "example": "PER001",
              "type": "string"
            },
            "mlsStatus": {
              "description": "MCPD (v2.1) (MLSSTAT) 27. The status of an accession with regards to the Multilateral System (MLS) of the International Treaty on Plant Genetic Resources for Food and Agriculture. Leave the value empty if the status is not known 0 No (not included) 1 Yes (included) 99 Other (elaborate in REMARKS field, e.g. \"under development\")",
              "enum": [
                "",
                "0",
                "1",
                "99"
              ],
              "example": "0",
              "type": "string"
            },
            "remarks": {
              "description": "MCPD (v2.1) (REMARKS) 28. The remarks field is used to add notes or to elaborate on descriptors with value 99 or 999 (= Other). Prefix remarks with the field name they refer to and a colon (:) without space (e.g. COLLSRC:riverside). Distinct remarks referring to different fields are separated by semi-colons without space.",
              "example": "This is an example remark to demonstrate that any notable information can be put here",
              "type": "string"
            },
            "safetyDuplicateInstitutes": {
              "items": {
                "properties": {
                  "instituteCode": {
                    "description": "MCPD (v2.1) (DUPLSITE) 25. FAO WIEWS code of the institute(s) where a safety duplicate of the accession is maintained. Follows INSTCODE standard.",
                    "example": "PER001",
                    "type": "string"
                  },
                  "instituteName": {
                    "description": "MCPD (v2.1) (DUPLINSTNAME) 25.1  Name of the institute where a safety duplicate of the accession is maintained.",
                    "example": "The BrAPI Institute",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "species": {
              "description": "MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" ",
              "example": "fructus",
              "type": "string"
            },
            "speciesAuthority": {
              "description": "MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
              "example": "Smith, 1822",
              "type": "string"
            },
            "storageTypeCodes": {
              "description": "MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryo-preserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)",
              "example": [
                "11",
                "13"
              ],
              "items": {
                "enum": [
                  "10",
                  "11",
                  "12",
                  "13",
                  "20",
                  "30",
                  "40",
                  "50",
                  "99"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "subtaxon": {
              "description": "MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").",
              "example": "Aspergillus fructus A",
              "type": "string"
            },
            "subtaxonAuthority": {
              "description": "MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
              "example": "Smith, 1822",
              "type": "string"
            }
          },
          "type": "object"
        },
        "GermplasmNewRequest": {
          "properties": {
            "accessionNumber": {
              "description": "This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
              "example": "A0000003",
              "type": "string"
            },
            "acquisitionDate": {
              "description": "The date this germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
              "format": "date",
              "type": "string"
            },
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "biologicalStatusOfAccessionCode": {
              "description": "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
              "enum": [
                "100",
                "110",
                "120",
                "130",
                "200",
                "300",
                "400",
                "410",
                "411",
                "412",
                "413",
                "414",
                "415",
                "416",
                "420",
                "421",
                "422",
                "423",
                "500",
                "600",
                "999"
              ],
              "example": "420",
              "type": "string"
            },
            "biologicalStatusOfAccessionDescription": {
              "description": "Supplemental text description for 'biologicalStatusOfAccessionCode'",
              "example": "Genetic stock",
              "type": "string"
            },
            "breedingMethodDbId": {
              "description": "The unique identifier for the breeding method used to create this germplasm",
              "example": "ffcce7ef",
              "type": "string"
            },
            "collection": {
              "description": "A specific panel/collection/population name this germplasm belongs to.",
              "example": "Rice Diversity Panel 1 (RDP1)",
              "type": "string"
            },
            "commonCropName": {
              "description": "Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\".",
              "example": "Maize",
              "type": "string"
            },
            "countryOfOriginCode": {
              "description": "3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
              "example": "BES",
              "type": "string"
            },
            "defaultDisplayName": {
              "description": "Human readable name used for display purposes",
              "example": "A0000003",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org",
              "format": "uri",
              "type": "string"
            },
            "donors": {
              "description": "List of donor institutes",
              "items": {
                "properties": {
                  "donorAccessionNumber": {
                    "description": "The accession number assigned by the donor\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.\n          \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                    "example": "A0000123",
                    "type": "string"
                  },
                  "donorInstituteCode": {
                    "description": "The institute code for the donor institute\n\nMIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.\n\nMCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                    "example": "PER001",
                    "type": "string"
                  },
                  "germplasmPUI": {
                    "description": "The Permanent Unique Identifier which represents a germplasm from the source or donor\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source",
                    "example": "http://pui.per/accession/A0000003",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "genus": {
              "description": "Genus name for taxon. Initial uppercase letter required.\n\nMCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.\n\nMIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.",
              "example": "Aspergillus",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.\n\nMCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.",
              "example": "A0000003",
              "type": "string"
            },
            "germplasmOrigin": {
              "description": "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.",
              "items": {
                "description": "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 ",
                "properties": {
                  "coordinateUncertainty": {
                    "description": "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
                    "example": "20",
                    "type": "string"
                  },
                  "coordinates": {
                    "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                    "properties": {
                      "geometry": {
                        "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                        "discriminator": {
                          "mapping": {
                            "Point": "#/components/schemas/pointGeometry",
                            "Polygon": "#/components/schemas/polygonGeometry"
                          },
                          "propertyName": "type"
                        },
                        "example": {
                          "coordinates": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "type": "Point"
                        },
                        "oneOf": [{
                            "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                            "properties": {
                              "coordinates": {
                                "description": "A single position",
                                "example": [
                                  -76.506042,
                                  42.417373,
                                  123
                                ],
                                "items": {
                                  "type": "number"
                                },
                                "minItems": 2,
                                "type": "array"
                              },
                              "type": {
                                "default": "Point",
                                "description": "The literal string \"Point\"",
                                "example": "Point",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }, {
                            "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                            "properties": {
                              "coordinates": {
                                "description": "An array of linear rings",
                                "example": [
                                  [
                                    [
                                      -77.456654,
                                      42.241133,
                                      494
                                    ],
                                    [
                                      -75.414133,
                                      41.508282,
                                      571
                                    ],
                                    [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    [
                                      -77.456654,
                                      42.241133,
                                      346
                                    ]
                                  ]
                                ],
                                "items": {
                                  "description": "An array of at least four positions where the first equals the last",
                                  "example": [
                                    [
                                      -77.456654,
                                      42.241133,
                                      494
                                    ],
                                    [
                                      -75.414133,
                                      41.508282,
                                      571
                                    ],
                                    [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    [
                                      -77.456654,
                                      42.241133,
                                      346
                                    ]
                                  ],
                                  "items": {
                                    "description": "A single position",
                                    "example": [
                                      -76.506042,
                                      42.417373,
                                      123
                                    ],
                                    "items": {
                                      "type": "number"
                                    },
                                    "minItems": 2,
                                    "type": "array"
                                  },
                                  "minItems": 4,
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              "type": {
                                "default": "Polygon",
                                "description": "The literal string \"Polygon\"",
                                "example": "Polygon",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "title": "GeoJSON Geometry",
                        "type": "object"
                      },
                      "type": {
                        "default": "Feature",
                        "description": "The literal string \"Feature\"",
                        "example": "Feature",
                        "type": "string"
                      }
                    },
                    "title": "GeoJSON",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "germplasmPUI": {
              "description": "The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
              "example": "http://pui.per/accession/A0000003",
              "type": "string"
            },
            "germplasmPreprocessing": {
              "description": "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.",
              "example": "EO:0007210; transplanted from study 2351 observation unit ID: pot:894",
              "type": "string"
            },
            "instituteCode": {
              "description": "The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
              "example": "PER001",
              "type": "string"
            },
            "instituteName": {
              "description": "The name of the institute that maintains the material",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "pedigree": {
              "description": "The cross name and optional selection history.\n\nMCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "seedSource": {
              "description": "The source of the seed ",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "seedSourceDescription": {
              "description": "Description of the material source\n\nMIAPPE V1.1 (DM-56) Material source description - Description of the material source",
              "example": "Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil.",
              "type": "string"
            },
            "species": {
              "description": "Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.",
              "example": "fructus",
              "type": "string"
            },
            "speciesAuthority": {
              "description": "The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
              "example": "Smith, 1822",
              "type": "string"
            },
            "storageTypes": {
              "description": "The type of storage this germplasm is kept in at a genebank.",
              "example": [{
                  "code": "20",
                  "description": "Field collection"
                }, {
                  "code": "11",
                  "description": "Short term"
                }
              ],
              "items": {
                "properties": {
                  "code": {
                    "description": "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)",
                    "enum": [
                      "10",
                      "11",
                      "12",
                      "13",
                      "20",
                      "30",
                      "40",
                      "50",
                      "99"
                    ],
                    "example": "11",
                    "type": "string"
                  },
                  "description": {
                    "description": "A supplemental text description of the storage type",
                    "example": "Short term",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "subtaxa": {
              "description": "Subtaxon can be used to store any additional taxonomic identifier.\n\nMCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").\n\nMIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).",
              "example": "Aspergillus fructus A",
              "type": "string"
            },
            "subtaxaAuthority": {
              "description": "The authority organization responsible for tracking and maintaining the subtaxon information\n\nMCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
              "example": "Smith, 1822",
              "type": "string"
            },
            "synonyms": {
              "description": "List of alternative names or IDs used to reference this germplasm\n\nMCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.",
              "items": {
                "properties": {
                  "synonym": {
                    "description": "Alternative name or ID used to reference this germplasm",
                    "example": "variety_1",
                    "type": "string"
                  },
                  "type": {
                    "description": "A descriptive classification for this synonym",
                    "example": "Pre-Code",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "taxonIds": {
              "description": "The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as \"ncbiTaxon\" preferably with a purl. The rank of this ID should be species.\n\nMIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.",
              "items": {
                "properties": {
                  "sourceName": {
                    "description": "The human readable name of the taxonomy provider",
                    "example": "NCBI",
                    "type": "string"
                  },
                  "taxonId": {
                    "description": "The identifier (name, ID, URI) of a particular taxonomy within the source provider",
                    "example": "2026747",
                    "type": "string"
                  }
                },
                "required": [
                  "sourceName",
                  "taxonId"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "commonCropName",
            "germplasmName",
            "germplasmPUI"
          ],
          "type": "object"
        },
        "GermplasmSearchRequest": {
          "properties": {
            "accessionNumbers": {
              "description": "List unique identifiers for accessions within a genebank",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "collections": {
              "description": "A specific panel/collection/population name this germplasm belongs to.",
              "example": [
                "RDP1",
                "MDP1"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "commonCropNames": {
              "description": "Common name for the crop which this program is for",
              "example": [
                "Tomatillo",
                "Paw Paw"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "genus": {
              "description": "List of Genus names to identify germplasm",
              "example": [
                "Aspergillus",
                "Zea"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmPUIs": {
              "description": "List of Permanent Unique Identifiers to identify germplasm",
              "example": [
                "http://pui.per/accession/A0000003",
                "http://pui.per/accession/A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "parentDbIds": {
              "description": "Search for Germplasm with these parents",
              "example": [
                "72c1001f",
                "7346c553"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "progenyDbIds": {
              "description": "Search for Germplasm with these children",
              "example": [
                "16e16a7e",
                "ce06cf9e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "species": {
              "description": "List of Species names to identify germplasm",
              "example": [
                "fructus",
                "mays"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "synonyms": {
              "description": "List of alternative names or IDs used to reference this germplasm",
              "example": [
                "variety_1",
                "2c38f9b6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "PedigreeNode": {
          "properties": {
            "crossingProjectDbId": {
              "description": "The crossing project used to generate this germplasm",
              "example": "625e745a",
              "type": "string"
            },
            "crossingYear": {
              "description": "The year the parents were originally crossed",
              "example": 2005,
              "type": "integer"
            },
            "familyCode": {
              "description": "The code representing the family",
              "example": "F0000203",
              "type": "string"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "1098ebaf",
              "type": "string"
            },
            "germplasmName": {
              "description": "A human readable name for a germplasm",
              "example": "A0021004",
              "type": "string"
            },
            "parents": {
              "description": "List of parent nodes in the pedigree tree.",
              "example": [{
                  "germplasmDbId": "b66958de",
                  "germplasmName": "A0000592",
                  "parentType": "MALE"
                }, {
                  "germplasmDbId": "a55847ed",
                  "germplasmName": "A0000592",
                  "parentType": "FEMALE"
                }
              ],
              "items": {
                "properties": {
                  "germplasmDbId": {
                    "description": "The germplasm DbId of the parent of this germplasm",
                    "example": "a55847ed",
                    "type": "string"
                  },
                  "germplasmName": {
                    "description": "the human readable name of the parent of this germplasm",
                    "example": "A0000592",
                    "type": "string"
                  },
                  "parentType": {
                    "description": "The type of parent the parent is. ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                    "enum": [
                      "MALE",
                      "FEMALE",
                      "SELF",
                      "POPULATION"
                    ],
                    "example": "FEMALE",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "pedigree": {
              "description": "The string representation of the pedigree.",
              "example": "A0000001/A0000002",
              "type": "string"
            },
            "siblings": {
              "description": "List of sibling germplasm",
              "example": [{
                  "germplasmDbId": "334f53a3",
                  "germplasmName": "A0021005"
                }, {
                  "germplasmDbId": "7bbbda8c",
                  "germplasmName": "A0021006"
                }, {
                  "germplasmDbId": "ab1d9b26",
                  "germplasmName": "A0021007"
                }
              ],
              "items": {
                "properties": {
                  "germplasmDbId": {
                    "description": "the germplasm DbId of the sibling",
                    "type": "string"
                  },
                  "germplasmName": {
                    "description": "the germplasm name of the sibling",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "germplasmDbId"
          ],
          "type": "object"
        },
        "ProgenyNode": {
          "properties": {
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "01b974dc",
              "type": "string"
            },
            "germplasmName": {
              "description": "A human readable name for a germplasm",
              "example": "A0021004",
              "type": "string"
            },
            "progeny": {
              "description": "List of germplasm entities which are direct children of this germplasm",
              "example": [{
                  "germplasmDbId": "e8d5dad7",
                  "germplasmName": "A0021011",
                  "parentType": "FEMALE"
                }, {
                  "germplasmDbId": "ac07fbd8",
                  "germplasmName": "A0021012",
                  "parentType": "FEMALE"
                }, {
                  "germplasmDbId": "07f45f67",
                  "germplasmName": "A0021013",
                  "parentType": "FEMALE"
                }
              ],
              "items": {
                "properties": {
                  "germplasmDbId": {
                    "description": "The unique identifier of a progeny germplasm",
                    "example": "e8d5dad7",
                    "type": "string"
                  },
                  "germplasmName": {
                    "description": "The human readable name of a progeny germplasm",
                    "example": "A0021011",
                    "type": "string"
                  },
                  "parentType": {
                    "description": "Given a germplasm A having a progeny B and C, 'parentType' for progeny B item refers to the 'parentType' of A toward B.",
                    "enum": [
                      "MALE",
                      "FEMALE",
                      "SELF",
                      "POPULATION"
                    ],
                    "example": "FEMALE",
                    "type": "string"
                  }
                },
                "required": [
                  "germplasmDbId",
                  "parentType"
                ],
                "type": "object"
              },
              "type": "array"
            }
          },
          "required": [
            "germplasmDbId",
            "progeny"
          ],
          "type": "object"
        }
      }
    },
    "Germplasm Attribute Values": {
      "Calls": {
        "/attributevalues": {
          "methods": {
            "get": {
              "description": "Get the Germplasm Attribute Values",
              "parameters": [{
                  "description": "The unique id for an attribute value",
                  "in": "query",
                  "name": "attributeValueDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique id for an attribute",
                  "in": "query",
                  "name": "attributeDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The human readable name for an attribute",
                  "in": "query",
                  "name": "attributeName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Get all attributes associated with this germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Germplasm Attribute Values",
              "tags": [
                "Germplasm Attribute Values"
              ]
            },
            "post": {
              "description": "Create new Germplasm Attribute Values",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/GermplasmAttributeValueNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Germplasm Attribute Values",
              "tags": [
                "Germplasm Attribute Values"
              ]
            }
          }
        },
        "/attributevalues/{attributeValueDbId}": {
          "methods": {
            "get": {
              "description": "Get the details for a specific Germplasm Attribute",
              "parameters": [{
                  "description": "The unique id for an attribute value",
                  "in": "path",
                  "name": "attributeValueDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the details for a specific Germplasm Attribute",
              "tags": [
                "Germplasm Attribute Values"
              ]
            },
            "put": {
              "description": "Update an existing Germplasm Attribute Value",
              "parameters": [{
                  "description": "The unique id for an attribute value",
                  "in": "path",
                  "name": "attributeValueDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmAttributeValueNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update an existing Germplasm Attribute Value",
              "tags": [
                "Germplasm Attribute Values"
              ]
            }
          }
        },
        "/search/attributevalues": {
          "methods": {
            "post": {
              "description": "Search for a set of Germplasm Attribute Values based on some criteria\n    \nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmAttributeValueSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Germplasm Attribute Values",
              "tags": [
                "Germplasm Attribute Values"
              ]
            }
          }
        },
        "/search/attributevalues/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Get the results of a Germplasm Attribute Values search request\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeValueListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Germplasm Attribute Values search request",
              "tags": [
                "Germplasm Attribute Values"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "GermplasmAttributeValue": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "attributeDbId": {
              "description": "The ID which uniquely identifies this attribute within the given database server",
              "example": "e529dd5a",
              "type": "string"
            },
            "attributeName": {
              "description": "A human readable name for this attribute",
              "example": "Weevil Resistance",
              "type": "string"
            },
            "attributeValueDbId": {
              "description": "The ID which uniquely identifies this attribute value within the given database server",
              "example": "33edbab7",
              "type": "string"
            },
            "determinedDate": {
              "description": "The date the value of this attribute was determined for a given germplasm",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm within the given database server",
              "example": "d4076594",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000003",
              "type": "string"
            },
            "value": {
              "description": "The value of this attribute for a given germplasm",
              "example": "Present",
              "type": "string"
            }
          },
          "type": "object"
        },
        "GermplasmAttributeValueNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "attributeDbId": {
              "description": "The ID which uniquely identifies this attribute within the given database server",
              "example": "e529dd5a",
              "type": "string"
            },
            "attributeName": {
              "description": "A human readable name for this attribute",
              "example": "Weevil Resistance",
              "type": "string"
            },
            "determinedDate": {
              "description": "The date the value of this attribute was determined for a given germplasm",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm within the given database server",
              "example": "d4076594",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000003",
              "type": "string"
            },
            "value": {
              "description": "The value of this attribute for a given germplasm",
              "example": "Present",
              "type": "string"
            }
          },
          "required": [
            "attributeName"
          ],
          "type": "object"
        },
        "GermplasmAttributeValueSearchRequest": {
          "properties": {
            "attributeDbIds": {
              "description": "List of Germplasm Attribute IDs to search for",
              "example": [
                "2ef15c9f",
                "318e7f7d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "attributeNames": {
              "description": "List of human readable Germplasm Attribute names to search for",
              "example": [
                "Plant Height 1",
                "Root Color"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "attributeValueDbIds": {
              "description": "List of Germplasm Attribute Value IDs to search for",
              "example": [
                "ca4636d0",
                "c8a92409"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "dataTypes": {
              "description": "List of scale data types to filter search results",
              "example": [
                "Numerical",
                "Ordinal",
                "Text"
              ],
              "items": {
                "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum": [
                  "Code",
                  "Date",
                  "Duration",
                  "Nominal",
                  "Numerical",
                  "Ordinal",
                  "Text"
                ],
                "example": "Numerical",
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "methodDbIds": {
              "description": "List of methods to filter search results",
              "example": [
                "07e34f83",
                "d3d5517a"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ontologyDbIds": {
              "description": "List of ontology IDs to search for",
              "example": [
                "f44f7b23",
                "a26b576e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "scaleDbIds": {
              "description": "List of scales to filter search results",
              "example": [
                "a13ecffa",
                "7e1afe4f"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitClasses": {
              "description": "List of trait classes to filter search results",
              "example": [
                "morphological",
                "phenological",
                "agronomical"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitDbIds": {
              "description": "List of trait unique ID to filter search results",
              "example": [
                "ef81147b",
                "78d82fad"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Germplasm Attributes": {
      "Calls": {
        "/attributes": {
          "methods": {
            "get": {
              "description": "List available attributes.",
              "parameters": [{
                  "description": "The general category for the attribute. very similar to Trait class.",
                  "in": "query",
                  "name": "attributeCategory",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique id for an attribute",
                  "in": "query",
                  "name": "attributeDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The human readable name for an attribute",
                  "in": "query",
                  "name": "attributeName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Get all attributes associated with this germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Germplasm Attributes",
              "tags": [
                "Germplasm Attributes"
              ]
            },
            "post": {
              "description": "Create new Germplasm Attributes",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/GermplasmAttributeNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new Germplasm Attributes",
              "tags": [
                "Germplasm Attributes"
              ]
            }
          }
        },
        "/attributes/categories": {
          "methods": {
            "get": {
              "description": "List all available attribute categories.",
              "parameters": [{
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "example": [
                                  "Morphological",
                                  "Agronomic"
                                ],
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "GermplasmAttributeCategoryListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Categories of Germplasm Attributes",
              "tags": [
                "Germplasm Attributes"
              ]
            }
          }
        },
        "/attributes/{attributeDbId}": {
          "methods": {
            "get": {
              "description": "Get the details for a specific Germplasm Attribute",
              "parameters": [{
                  "description": "The unique id for an attribute",
                  "in": "path",
                  "name": "attributeDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the details for a specific Germplasm Attribute",
              "tags": [
                "Germplasm Attributes"
              ]
            },
            "put": {
              "description": "Update an existing Germplasm Attribute",
              "parameters": [{
                  "description": "The unique id for an attribute",
                  "in": "path",
                  "name": "attributeDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmAttributeNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update an existing Germplasm Attribute",
              "tags": [
                "Germplasm Attributes"
              ]
            }
          }
        },
        "/search/attributes": {
          "methods": {
            "post": {
              "description": "Search for a set of Germplasm Attributes based on some criteria\n    \nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GermplasmAttributeSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Germplasm Attributes",
              "tags": [
                "Germplasm Attributes"
              ]
            }
          }
        },
        "/search/attributes/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Get the results of a Germplasm Attributes search request\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/GermplasmAttributeListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Germplasm Attributes search request",
              "tags": [
                "Germplasm Attributes"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "GermplasmAttribute": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "attributeCategory": {
              "description": "General category for the attribute. very similar to Trait class.",
              "example": "Morphological",
              "type": "string"
            },
            "attributeDbId": {
              "description": "The ID which uniquely identifies this attribute within the given database server",
              "example": "2f08b902",
              "type": "string"
            },
            "attributeDescription": {
              "description": "A human readable description of this attribute",
              "example": "Height of the plant measured in meters by a tape",
              "type": "string"
            },
            "attributeName": {
              "description": "A human readable name for this attribute",
              "example": "Plant Height 1",
              "type": "string"
            },
            "commonCropName": {
              "description": "Crop name (examples: \"Maize\", \"Wheat\")",
              "example": "Maize",
              "type": "string"
            },
            "contextOfUse": {
              "description": "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
              "example": [
                "Trial evaluation",
                "Nursery evaluation"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "defaultValue": {
              "description": "Variable default value. (examples: \"red\", \"2.3\", etc.)",
              "example": "2.0",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org/documentation.html",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthStage": {
              "description": "Growth stage at which measurement is made (examples: \"flowering\")",
              "example": "flowering",
              "type": "string"
            },
            "institution": {
              "description": "Name of institution submitting the variable",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "language": {
              "description": "2 letter ISO 639-1 code for the language of submission of the variable.",
              "example": "en",
              "type": "string"
            },
            "method": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "bibliographicalReference": {
                  "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                  "example": "Smith, 1893, Really Cool Paper, Popular Journal",
                  "type": "string"
                },
                "description": {
                  "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                  "example": "A measuring tape was used",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "formula": {
                  "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                  "example": "a^2 + b^2 = c^2",
                  "type": "string"
                },
                "methodClass": {
                  "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                  "example": "Measurement",
                  "type": "string"
                },
                "methodDbId": {
                  "description": "Method unique identifier",
                  "example": "0adb2764",
                  "type": "string"
                },
                "methodName": {
                  "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                  "example": "Measuring Tape",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scale": {
              "description": "Scale metadata",
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "dataType": {
                  "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                  "enum": [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                  ],
                  "example": "Numerical",
                  "type": "string"
                },
                "decimalPlaces": {
                  "description": "For numerical, number of decimal places to be reported",
                  "example": 2,
                  "type": "integer"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "scaleDbId": {
                  "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                  "example": "af730171",
                  "type": "string"
                },
                "scaleName": {
                  "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                  "example": "Meters",
                  "type": "string"
                },
                "validValues": {
                  "properties": {
                    "categories": {
                      "description": "List of possible values with optional labels",
                      "example": [{
                          "label": "low",
                          "value": "0"
                        }, {
                          "label": "medium",
                          "value": "5"
                        }, {
                          "label": "high",
                          "value": "10"
                        }
                      ],
                      "items": {
                        "properties": {
                          "label": {
                            "description": "A text label for a category",
                            "type": "string"
                          },
                          "value": {
                            "description": "The actual value for a category",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "max": {
                      "description": "Maximum value (used for field data capture control).",
                      "example": 9999,
                      "type": "integer"
                    },
                    "min": {
                      "description": "Minimum value (used for data capture control) for numerical and date scales",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "scientist": {
              "description": "Name of scientist submitting the variable.",
              "example": "Dr. Bob Robertson",
              "type": "string"
            },
            "status": {
              "description": "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "submissionTimestamp": {
              "description": "Timestamp when the Variable was added (ISO 8601)",
              "format": "date-time",
              "type": "string"
            },
            "synonyms": {
              "description": "Other variable names",
              "example": [
                "Maize Height",
                "Stalk Height",
                "Corn Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trait": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "alternativeAbbreviations": {
                  "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
                  "example": [
                    "H",
                    "PH",
                    "H1"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attribute": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                  "example": "height",
                  "type": "string"
                },
                "entity": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                  "example": "Stalk",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "mainAbbreviation": {
                  "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
                  "example": "PH",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "status": {
                  "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                  "example": "recommended",
                  "type": "string"
                },
                "synonyms": {
                  "description": "Other trait names",
                  "example": [
                    "Height",
                    "Plant Height",
                    "Stalk Height",
                    "Canopy Height"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "traitClass": {
                  "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
                  "example": "phenological",
                  "type": "string"
                },
                "traitDbId": {
                  "description": "The ID which uniquely identifies a trait",
                  "example": "9b2e34f5",
                  "type": "string"
                },
                "traitDescription": {
                  "description": "The description of a trait",
                  "example": "The height of the plant",
                  "type": "string"
                },
                "traitName": {
                  "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                  "example": "Height",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "GermplasmAttributeNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "attributeCategory": {
              "description": "General category for the attribute. very similar to Trait class.",
              "example": "Morphological",
              "type": "string"
            },
            "attributeDescription": {
              "description": "A human readable description of this attribute",
              "example": "Height of the plant measured in meters by a tape",
              "type": "string"
            },
            "attributeName": {
              "description": "A human readable name for this attribute",
              "example": "Plant Height 1",
              "type": "string"
            },
            "commonCropName": {
              "description": "Crop name (examples: \"Maize\", \"Wheat\")",
              "example": "Maize",
              "type": "string"
            },
            "contextOfUse": {
              "description": "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
              "example": [
                "Trial evaluation",
                "Nursery evaluation"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "defaultValue": {
              "description": "Variable default value. (examples: \"red\", \"2.3\", etc.)",
              "example": "2.0",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org/documentation.html",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthStage": {
              "description": "Growth stage at which measurement is made (examples: \"flowering\")",
              "example": "flowering",
              "type": "string"
            },
            "institution": {
              "description": "Name of institution submitting the variable",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "language": {
              "description": "2 letter ISO 639-1 code for the language of submission of the variable.",
              "example": "en",
              "type": "string"
            },
            "method": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "bibliographicalReference": {
                  "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                  "example": "Smith, 1893, Really Cool Paper, Popular Journal",
                  "type": "string"
                },
                "description": {
                  "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                  "example": "A measuring tape was used",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "formula": {
                  "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                  "example": "a^2 + b^2 = c^2",
                  "type": "string"
                },
                "methodClass": {
                  "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                  "example": "Measurement",
                  "type": "string"
                },
                "methodDbId": {
                  "description": "Method unique identifier",
                  "example": "0adb2764",
                  "type": "string"
                },
                "methodName": {
                  "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                  "example": "Measuring Tape",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scale": {
              "description": "Scale metadata",
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "dataType": {
                  "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                  "enum": [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                  ],
                  "example": "Numerical",
                  "type": "string"
                },
                "decimalPlaces": {
                  "description": "For numerical, number of decimal places to be reported",
                  "example": 2,
                  "type": "integer"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "scaleDbId": {
                  "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                  "example": "af730171",
                  "type": "string"
                },
                "scaleName": {
                  "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                  "example": "Meters",
                  "type": "string"
                },
                "validValues": {
                  "properties": {
                    "categories": {
                      "description": "List of possible values with optional labels",
                      "example": [{
                          "label": "low",
                          "value": "0"
                        }, {
                          "label": "medium",
                          "value": "5"
                        }, {
                          "label": "high",
                          "value": "10"
                        }
                      ],
                      "items": {
                        "properties": {
                          "label": {
                            "description": "A text label for a category",
                            "type": "string"
                          },
                          "value": {
                            "description": "The actual value for a category",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "max": {
                      "description": "Maximum value (used for field data capture control).",
                      "example": 9999,
                      "type": "integer"
                    },
                    "min": {
                      "description": "Minimum value (used for data capture control) for numerical and date scales",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "scientist": {
              "description": "Name of scientist submitting the variable.",
              "example": "Dr. Bob Robertson",
              "type": "string"
            },
            "status": {
              "description": "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "submissionTimestamp": {
              "description": "Timestamp when the Variable was added (ISO 8601)",
              "format": "date-time",
              "type": "string"
            },
            "synonyms": {
              "description": "Other variable names",
              "example": [
                "Maize Height",
                "Stalk Height",
                "Corn Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trait": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "alternativeAbbreviations": {
                  "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
                  "example": [
                    "H",
                    "PH",
                    "H1"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attribute": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                  "example": "height",
                  "type": "string"
                },
                "entity": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                  "example": "Stalk",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "mainAbbreviation": {
                  "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
                  "example": "PH",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "status": {
                  "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                  "example": "recommended",
                  "type": "string"
                },
                "synonyms": {
                  "description": "Other trait names",
                  "example": [
                    "Height",
                    "Plant Height",
                    "Stalk Height",
                    "Canopy Height"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "traitClass": {
                  "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
                  "example": "phenological",
                  "type": "string"
                },
                "traitDbId": {
                  "description": "The ID which uniquely identifies a trait",
                  "example": "9b2e34f5",
                  "type": "string"
                },
                "traitDescription": {
                  "description": "The description of a trait",
                  "example": "The height of the plant",
                  "type": "string"
                },
                "traitName": {
                  "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                  "example": "Height",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "GermplasmAttributeSearchRequest": {
          "properties": {
            "attributeDbIds": {
              "description": "List of Germplasm Attribute IDs to search for",
              "example": [
                "2ef15c9f",
                "318e7f7d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "attributeNames": {
              "description": "List of human readable Germplasm Attribute names to search for",
              "example": [
                "Plant Height 1",
                "Root Color"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "dataTypes": {
              "description": "List of scale data types to filter search results",
              "example": [
                "Numerical",
                "Ordinal",
                "Text"
              ],
              "items": {
                "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum": [
                  "Code",
                  "Date",
                  "Duration",
                  "Nominal",
                  "Numerical",
                  "Ordinal",
                  "Text"
                ],
                "example": "Numerical",
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "methodDbIds": {
              "description": "List of methods to filter search results",
              "example": [
                "07e34f83",
                "d3d5517a"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ontologyDbIds": {
              "description": "List of ontology IDs to search for",
              "example": [
                "f44f7b23",
                "a26b576e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "scaleDbIds": {
              "description": "List of scales to filter search results",
              "example": [
                "a13ecffa",
                "7e1afe4f"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbId": {
              "description": "The unique ID of a studies to filter on",
              "example": [
                "5bcac0ae",
                "7f48e22d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitClasses": {
              "description": "List of trait classes to filter search results",
              "example": [
                "morphological",
                "phenological",
                "agronomical"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitDbIds": {
              "description": "List of trait unique ID to filter search results",
              "example": [
                "ef81147b",
                "78d82fad"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Seed Lots": {
      "Calls": {
        "/seedlots": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Seed Lot descriptions available in a system.",
              "parameters": [{
                  "description": "Unique id for a seed lot on this server",
                  "in": "query",
                  "name": "seedLotDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The internal id of the germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Seed Lot descriptions",
              "tags": [
                "Seed Lots"
              ]
            },
            "post": {
              "description": "Add new Seed Lot descriptions to a server",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/SeedLotNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Seed Lot descriptions to a server",
              "tags": [
                "Seed Lots"
              ]
            }
          }
        },
        "/seedlots/transactions": {
          "methods": {
            "get": {
              "description": "Get a filtered list of Seed Lot Transactions",
              "parameters": [{
                  "description": "Unique id for a transaction on this server",
                  "in": "query",
                  "name": "transactionDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Unique id for a seed lot on this server",
                  "in": "query",
                  "name": "seedLotDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The internal id of the germplasm",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotTransactionListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered list of Seed Lot Transactions",
              "tags": [
                "Seed Lots"
              ]
            },
            "post": {
              "description": "Add new Seed Lot Transaction to be recorded",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/SeedLotNewTransactionRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotTransactionListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Seed Lot Transaction to be recorded",
              "tags": [
                "Seed Lots"
              ]
            }
          }
        },
        "/seedlots/{seedLotDbId}": {
          "methods": {
            "get": {
              "description": "Get a specific Seed Lot by seedLotDbId",
              "parameters": [{
                  "description": "Unique id for a seed lot on this server",
                  "in": "path",
                  "name": "seedLotDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get a specific Seed Lot",
              "tags": [
                "Seed Lots"
              ]
            },
            "put": {
              "description": "Update an existing Seed Lot",
              "parameters": [{
                  "description": "Unique id for a seed lot on this server",
                  "in": "path",
                  "name": "seedLotDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SeedLotNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Seed Lot",
              "tags": [
                "Seed Lots"
              ]
            }
          }
        },
        "/seedlots/{seedLotDbId}/transactions": {
          "methods": {
            "get": {
              "description": "Get all Transactions related to a specific Seed Lot",
              "parameters": [{
                  "description": "Unique id for a seed lot on this server",
                  "in": "path",
                  "name": "seedLotDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Unique id for a Transaction that has occurred",
                  "in": "query",
                  "name": "transactionDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter results to only include transactions directed to the specific Seed Lot (TO), away from the specific Seed Lot (FROM), or both (BOTH). The default value for this parameter is BOTH",
                  "in": "query",
                  "name": "transactionDirection",
                  "required": false,
                  "schema": {
                    "enum": [
                      "TO",
                      "FROM",
                      "BOTH"
                    ],
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/SeedLotTransactionListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get all Transactions related to a specific Seed Lot",
              "tags": [
                "Seed Lots"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "SeedLot": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "amount": {
              "description": "Current balance of seeds in this lot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
              "example": 561,
              "type": "number"
            },
            "createdDate": {
              "description": "The time stamp for when this seed lot was created",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "Unique DbId of the Germplasm held in this Seed Lot",
              "example": "029d705d",
              "type": "string"
            },
            "lastUpdated": {
              "description": "The timestamp for the last update to this Seed Lot (including transactions)",
              "format": "date-time",
              "type": "string"
            },
            "locationDbId": {
              "description": "DbId of the storage location",
              "example": "7989c44c",
              "type": "string"
            },
            "programDbId": {
              "description": "Unique DbId of the breeding Program this Seed Lot belongs to",
              "example": "e972d569",
              "type": "string"
            },
            "seedLotDbId": {
              "description": "Unique DbId for the Seed Lot",
              "example": "261ecb09",
              "type": "string"
            },
            "seedLotDescription": {
              "description": "A general description of this Seed Lot",
              "example": "This is a description of a seed lot",
              "type": "string"
            },
            "seedLotName": {
              "description": "A human readable name for this Seed Lot",
              "example": "Seed Lot Alpha",
              "type": "string"
            },
            "sourceCollection": {
              "description": "The description of the source where this material was originally collected (wild, nursery, etc)",
              "example": "nursery",
              "type": "string"
            },
            "storageLocation": {
              "description": "Description the storage location",
              "example": "The storage location is an massive, underground, bunker.",
              "type": "string"
            },
            "units": {
              "description": "Description of the things being counted in this Seed Lot (seeds, bulbs, kg, tree, etc)",
              "example": "seeds",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SeedLotNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "amount": {
              "description": "Current balance of seeds in this lot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
              "example": 561,
              "type": "number"
            },
            "createdDate": {
              "description": "The time stamp for when this seed lot was created",
              "format": "date-time",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "Unique DbId of the Germplasm held in this Seed Lot",
              "example": "029d705d",
              "type": "string"
            },
            "lastUpdated": {
              "description": "The timestamp for the last update to this Seed Lot (including transactions)",
              "format": "date-time",
              "type": "string"
            },
            "locationDbId": {
              "description": "DbId of the storage location",
              "example": "7989c44c",
              "type": "string"
            },
            "programDbId": {
              "description": "Unique DbId of the breeding Program this Seed Lot belongs to",
              "example": "e972d569",
              "type": "string"
            },
            "seedLotDescription": {
              "description": "A general description of this Seed Lot",
              "example": "This is a description of a seed lot",
              "type": "string"
            },
            "seedLotName": {
              "description": "A human readable name for this Seed Lot",
              "example": "Seed Lot Alpha",
              "type": "string"
            },
            "sourceCollection": {
              "description": "The description of the source where this material was originally collected (wild, nursery, etc)",
              "example": "nursery",
              "type": "string"
            },
            "storageLocation": {
              "description": "Description the storage location",
              "example": "The storage location is an massive, underground, bunker.",
              "type": "string"
            },
            "units": {
              "description": "Description of the things being counted in this Seed Lot (seeds, bulbs, kg, tree, etc)",
              "example": "seeds",
              "type": "string"
            }
          },
          "type": "object"
        },
        "SeedLotTransaction": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "amount": {
              "description": "The amount of units being transfered. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
              "example": 45,
              "type": "number"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "fromSeedLotDbId": {
              "description": "The identifier for the Seed Lot being transfered out of",
              "example": "11eef13b",
              "type": "string"
            },
            "toSeedLotDbId": {
              "description": "The identifier for the Seed Lot being transfered into",
              "example": "59339b90",
              "type": "string"
            },
            "transactionDbId": {
              "description": "Unique DbId for the Seed Lot Transaction",
              "example": "28e46db9",
              "type": "string"
            },
            "transactionDescription": {
              "description": "A general description of this Seed Lot Transaction",
              "example": "f9cd88d2",
              "type": "string"
            },
            "transactionTimestamp": {
              "description": "The time stamp for when the transaction occurred",
              "format": "date-time",
              "type": "string"
            },
            "units": {
              "description": "Description of the things being transfered in this transaction (seeds, bulbs, kg, etc)",
              "example": "seeds",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    }
  },
  "BrAPI-Phenotyping": {
    "Events": {
      "Calls": {
        "/events": {
          "methods": {
            "get": {
              "description": "Get list of events",
              "parameters": [{
                  "description": "Filter based on study unique identifier in which the events occurred",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on an ObservationUnit unique identifier in which the events occurred",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on an Event DbId",
                  "in": "query",
                  "name": "eventDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on an Event Type",
                  "in": "query",
                  "name": "eventType",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on an Date Range",
                  "in": "query",
                  "name": "dateRangeStart",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "description": "Filter based on an Date Range",
                  "in": "query",
                  "name": "dateRangeEnd",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/Event"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "eventsResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Events",
              "tags": [
                "Events"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Event": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "date": {
              "description": "A list of dates when the event occurred\n\nMIAPPE V1.1 (DM-68) Event date - Date and time of the event.",
              "example": [
                "2018-10-08T18:15:11Z",
                "2018-11-09T18:16:12Z"
              ],
              "items": {
                "format": "date-time",
                "type": "string"
              },
              "type": "array"
            },
            "eventDbId": {
              "description": "Internal database identifier",
              "example": "8566d4cb",
              "type": "string"
            },
            "eventDescription": {
              "description": "A detailed, human-readable description of this event\n\nMIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. ",
              "example": "A set of plots was watered",
              "type": "string"
            },
            "eventParameters": {
              "description": "A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI",
              "example": [{
                  "key": "http://www.example.fr/vocabulary/2018#hasContact,",
                  "value": "http://www.example.fr/id/agent/marie,",
                  "valueRdfType": "http://xmlns.com/foaf/0.1/Agent,"
                }, {
                  "key": "fertilizer",
                  "value": "nitrogen",
                  "valueRdfType": null
                }
              ],
              "items": {
                "properties": {
                  "key": {
                    "description": "Specifies the relationship between the event and the given property. E.g. fertilizer, operator",
                    "example": "operator",
                    "type": "string"
                  },
                  "rdfValue": {
                    "description": "The type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent",
                    "example": "http://xmlns.com/foaf/0.1/Agent",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the property for this event. E.g. nitrogen, John Doe",
                    "example": "Bob Robertson",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "eventType": {
              "description": "General category for this event (e.g. Sowing, Watering, Rain). Each eventType should correspond to exactly one eventTypeDbId, if provided.\n\nMIAPPE V1.1 (DM-65) Event type - Short name of the event.",
              "example": "Watering",
              "type": "string"
            },
            "eventTypeDbId": {
              "description": "An identifier for this event type, in the form of an ontology class reference\n\nMIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).",
              "example": "4e7d691e",
              "type": "string"
            },
            "observationUnitDbIds": {
              "description": "A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study",
              "example": [
                "8439eaff",
                "d7682e7a",
                "305ae51c"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbId": {
              "description": "The study in which the event occurred",
              "example": "2cc2001f",
              "type": "string"
            }
          },
          "required": [
            "eventDbId",
            "eventType"
          ],
          "type": "object"
        }
      }
    },
    "Images": {
      "Calls": {
        "/images": {
          "methods": {
            "get": {
              "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
              "parameters": [{
                  "description": "The unique identifier for a image",
                  "in": "query",
                  "name": "imageDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The human readable name of an image",
                  "in": "query",
                  "name": "imageName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique identifier of the observation unit an image is portraying",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique identifier of the observation an image is associated with",
                  "in": "query",
                  "name": "observationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "A descriptive term associated with an image",
                  "in": "query",
                  "name": "descriptiveOntologyTerm",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the image meta data summaries",
              "tags": [
                "Images"
              ]
            },
            "post": {
              "description": "Create new image meta data objects\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.\n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content. '",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ImageNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Create new image meta data objects",
              "tags": [
                "Images"
              ]
            }
          }
        },
        "/images/{imageDbId}": {
          "methods": {
            "get": {
              "description": "Get one image meta data object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
              "parameters": [{
                  "description": "The unique identifier for a image",
                  "in": "path",
                  "name": "imageDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the an image meta data summary",
              "tags": [
                "Images"
              ]
            },
            "put": {
              "description": "Update an image meta data object\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}/imagecontent' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an absolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON only supports two of the possible geometries: Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and latitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the image content.",
              "parameters": [{
                  "description": "The unique identifier for a image",
                  "in": "path",
                  "name": "imageDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ImageNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an image meta data",
              "tags": [
                "Images"
              ]
            }
          }
        },
        "/images/{imageDbId}/imagecontent": {
          "methods": {
            "put": {
              "description": "Update an image with the image file content\n\nImplementation Notes\n\n- This call should be paired with 'PUT /images/{imageDbId}' for full capability\n\n- A server may choose to modify the image meta data object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the image, wherever it happens to live.",
              "parameters": [{
                  "description": "The unique identifier for a image",
                  "in": "path",
                  "name": "imageDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "image/*": {
                    "schema": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an image with the image file content",
              "tags": [
                "Images"
              ]
            }
          }
        },
        "/search/images": {
          "methods": {
            "post": {
              "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ImageSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Images",
              "tags": [
                "Images"
              ]
            }
          }
        },
        "/search/images/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Get filtered set of image meta data\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI''s.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ImageListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of an Images search request",
              "tags": [
                "Images"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Image": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "copyright": {
              "description": "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
              "example": "Copyright 2018 Bob Robertson",
              "type": "string"
            },
            "description": {
              "description": "The human readable description of an image.",
              "example": "This is a picture of a tomato",
              "type": "string"
            },
            "descriptiveOntologyTerms": {
              "description": "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
              "example": [
                "doi:10.1002/0470841559",
                "Red",
                "ncbi:0300294"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "imageDbId": {
              "description": "The unique identifier of an image",
              "example": "a55efb9c",
              "type": "string"
            },
            "imageFileName": {
              "description": "The name of the image file. Might be the same as 'imageName', but could be different.",
              "example": "image_0000231.jpg",
              "type": "string"
            },
            "imageFileSize": {
              "description": "The size of the image in Bytes.",
              "example": 50000,
              "type": "integer"
            },
            "imageHeight": {
              "description": "The height of the image in Pixels.",
              "example": 550,
              "type": "integer"
            },
            "imageLocation": {
              "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSON",
              "type": "object"
            },
            "imageName": {
              "description": "The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
              "example": "Tomato Image 1",
              "type": "string"
            },
            "imageTimeStamp": {
              "description": "The date and time the image was taken",
              "format": "date-time",
              "type": "string"
            },
            "imageURL": {
              "description": "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.",
              "example": "https://wiki.brapi.org/images/tomato",
              "type": "string"
            },
            "imageWidth": {
              "description": "The width of the image in Pixels.",
              "example": 700,
              "type": "integer"
            },
            "mimeType": {
              "description": "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
              "example": "image/jpeg",
              "pattern": "image/.*",
              "type": "string"
            },
            "observationDbIds": {
              "description": "A list of observation Ids this image is associated with, if applicable.",
              "example": [
                "d05dd235",
                "8875177d",
                "c08e81b6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationUnitDbId": {
              "description": "The related observation unit identifier, if relevant.",
              "example": "b7e690b6",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ImageNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "copyright": {
              "description": "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
              "example": "Copyright 2018 Bob Robertson",
              "type": "string"
            },
            "description": {
              "description": "The human readable description of an image.",
              "example": "This is a picture of a tomato",
              "type": "string"
            },
            "descriptiveOntologyTerms": {
              "description": "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
              "example": [
                "doi:10.1002/0470841559",
                "Red",
                "ncbi:0300294"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "imageFileName": {
              "description": "The name of the image file. Might be the same as 'imageName', but could be different.",
              "example": "image_0000231.jpg",
              "type": "string"
            },
            "imageFileSize": {
              "description": "The size of the image in Bytes.",
              "example": 50000,
              "type": "integer"
            },
            "imageHeight": {
              "description": "The height of the image in Pixels.",
              "example": 550,
              "type": "integer"
            },
            "imageLocation": {
              "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSON",
              "type": "object"
            },
            "imageName": {
              "description": "The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
              "example": "Tomato Image 1",
              "type": "string"
            },
            "imageTimeStamp": {
              "description": "The date and time the image was taken",
              "format": "date-time",
              "type": "string"
            },
            "imageURL": {
              "description": "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.",
              "example": "https://wiki.brapi.org/images/tomato",
              "type": "string"
            },
            "imageWidth": {
              "description": "The width of the image in Pixels.",
              "example": 700,
              "type": "integer"
            },
            "mimeType": {
              "description": "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
              "example": "image/jpeg",
              "pattern": "image/.*",
              "type": "string"
            },
            "observationDbIds": {
              "description": "A list of observation Ids this image is associated with, if applicable.",
              "example": [
                "d05dd235",
                "8875177d",
                "c08e81b6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationUnitDbId": {
              "description": "The related observation unit identifier, if relevant.",
              "example": "b7e690b6",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ImageSearchRequest": {
          "properties": {
            "descriptiveOntologyTerms": {
              "description": "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
              "example": [
                "doi:10.1002/0470841559",
                "Red",
                "ncbi:0300294"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "imageDbIds": {
              "description": "A list of image Ids to search for",
              "example": [
                "564b64a6",
                "0d122d1d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "imageFileNames": {
              "description": "Image file names to search for.",
              "example": [
                "image_01032019.jpg",
                "picture_field_1234.jpg"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "imageFileSizeMax": {
              "description": "A maximum image file size to search for.",
              "example": 20000000,
              "type": "integer"
            },
            "imageFileSizeMin": {
              "description": "A minimum image file size to search for.",
              "example": 1000,
              "type": "integer"
            },
            "imageHeightMax": {
              "description": "A maximum image height to search for.",
              "example": 1080,
              "type": "integer"
            },
            "imageHeightMin": {
              "description": "A minimum image height to search for.",
              "example": 720,
              "type": "integer"
            },
            "imageLocation": {
              "description": "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
              "example": {
                "geometry": {
                  "coordinates": [
                    [
                      [
                        -77.456654,
                        42.241133
                      ],
                      [
                        -75.414133,
                        41.508282
                      ],
                      [
                        -76.506042,
                        42.417373
                      ],
                      [
                        -77.456654,
                        42.241133
                      ]
                    ]
                  ],
                  "type": "Polygon"
                },
                "type": "Feature"
              },
              "properties": {
                "geometry": {
                  "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                  "discriminator": {
                    "mapping": {
                      "Point": "#/components/schemas/pointGeometry",
                      "Polygon": "#/components/schemas/polygonGeometry"
                    },
                    "propertyName": "type"
                  },
                  "example": {
                    "coordinates": [
                      -76.506042,
                      42.417373,
                      123
                    ],
                    "type": "Point"
                  },
                  "oneOf": [{
                      "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "A single position",
                          "example": [
                            -76.506042,
                            42.417373,
                            123
                          ],
                          "items": {
                            "type": "number"
                          },
                          "minItems": 2,
                          "type": "array"
                        },
                        "type": {
                          "default": "Point",
                          "description": "The literal string \"Point\"",
                          "example": "Point",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }, {
                      "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                      "properties": {
                        "coordinates": {
                          "description": "An array of linear rings",
                          "example": [
                            [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ]
                          ],
                          "items": {
                            "description": "An array of at least four positions where the first equals the last",
                            "example": [
                              [
                                -77.456654,
                                42.241133,
                                494
                              ],
                              [
                                -75.414133,
                                41.508282,
                                571
                              ],
                              [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              [
                                -77.456654,
                                42.241133,
                                346
                              ]
                            ],
                            "items": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "minItems": 4,
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": {
                          "default": "Polygon",
                          "description": "The literal string \"Polygon\"",
                          "example": "Polygon",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "title": "GeoJSON Geometry",
                  "type": "object"
                },
                "type": {
                  "default": "Feature",
                  "description": "The literal string \"Feature\"",
                  "example": "Feature",
                  "type": "string"
                }
              },
              "title": "GeoJSONSearchArea",
              "type": "object"
            },
            "imageNames": {
              "description": "Human readable names to search for.",
              "example": [
                "Image 43",
                "Tractor in field"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "imageTimeStampRangeEnd": {
              "description": "The latest timestamp to search for.",
              "format": "date-time",
              "type": "string"
            },
            "imageTimeStampRangeStart": {
              "description": "The earliest timestamp to search for.",
              "format": "date-time",
              "type": "string"
            },
            "imageWidthMax": {
              "description": "A maximum image width to search for.",
              "example": 1920,
              "type": "integer"
            },
            "imageWidthMin": {
              "description": "A minimum image width to search for.",
              "example": 1280,
              "type": "integer"
            },
            "mimeTypes": {
              "description": "A set of image file types to search for.",
              "example": [
                "image/jpg",
                "image/jpeg",
                "image/gif"
              ],
              "items": {
                "pattern": "image/.*",
                "type": "string"
              },
              "type": "array"
            },
            "observationDbIds": {
              "description": "A list of observation Ids this image is associated with to search for",
              "example": [
                "47326456",
                "fc9823ac"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationUnitDbIds": {
              "description": "A set of observation unit identifiers to search for.",
              "example": [
                "f5e4b273",
                "328c9424"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            }
          },
          "type": "object"
        }
      }
    },
    "Methods": {
      "Calls": {
        "/methods": {
          "methods": {
            "get": {
              "description": "Returns a list of Methods available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
              "parameters": [{
                  "description": "The unique identifier for a method",
                  "in": "query",
                  "name": "methodDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique identifier for an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MethodListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Methods",
              "tags": [
                "Methods"
              ]
            },
            "post": {
              "description": "Create new method objects in the database",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/MethodNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MethodListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Methods",
              "tags": [
                "Methods"
              ]
            }
          }
        },
        "/methods/{methodDbId}": {
          "methods": {
            "get": {
              "description": "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
              "parameters": [{
                  "description": "Id of the method to retrieve details of.",
                  "in": "path",
                  "name": "methodDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MethodSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details for a specific Method",
              "tags": [
                "Methods"
              ]
            },
            "put": {
              "description": "Update the details of an existing method",
              "parameters": [{
                  "description": "Id of the method to retrieve details of.",
                  "in": "path",
                  "name": "methodDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MethodNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MethodSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Method",
              "tags": [
                "Methods"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Method": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "bibliographicalReference": {
              "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
              "example": "Smith, 1893, Really Cool Paper, Popular Journal",
              "type": "string"
            },
            "description": {
              "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
              "example": "A measuring tape was used",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "formula": {
              "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
              "example": "a^2 + b^2 = c^2",
              "type": "string"
            },
            "methodClass": {
              "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
              "example": "Measurement",
              "type": "string"
            },
            "methodDbId": {
              "description": "Method unique identifier",
              "example": "0adb2764",
              "type": "string"
            },
            "methodName": {
              "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
              "example": "Measuring Tape",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "MethodNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "bibliographicalReference": {
              "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
              "example": "Smith, 1893, Really Cool Paper, Popular Journal",
              "type": "string"
            },
            "description": {
              "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
              "example": "A measuring tape was used",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "formula": {
              "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
              "example": "a^2 + b^2 = c^2",
              "type": "string"
            },
            "methodClass": {
              "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
              "example": "Measurement",
              "type": "string"
            },
            "methodName": {
              "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
              "example": "Measuring Tape",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            }
          },
          "type": "object"
        }
      }
    },
    "Observation Units": {
      "Calls": {
        "/observationlevels": {
          "methods": {
            "get": {
              "description": "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call.",
              "parameters": [{
                  "description": "Filter by study DbId",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by trial DbId",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Filter by program DbId",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "example": [{
                                    "levelName": "field",
                                    "levelOrder": 0
                                  }, {
                                    "levelName": "block",
                                    "levelOrder": 1
                                  }, {
                                    "levelName": "plot",
                                    "levelOrder": 2
                                  }, {
                                    "levelName": "sub-plot",
                                    "levelOrder": 3
                                  }, {
                                    "levelName": "plant",
                                    "levelOrder": 4
                                  }
                                ],
                                "items": {
                                  "$ref": "#/components/schemas/ObservationUnitHierarchyLevel"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "ObservationLevelListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Observation Levels",
              "tags": [
                "Observation Units"
              ]
            }
          }
        },
        "/observationunits": {
          "methods": {
            "get": {
              "description": "Get a filtered set of Observation Units",
              "parameters": [{
                  "description": "The unique ID of an Observation Unit",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a germplasm (accession) to filter on",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a studies to filter on",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a location where these observations were collected",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a trial to filter on",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a program to filter on",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName",
                  "in": "query",
                  "name": "observationUnitLevelName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder",
                  "in": "query",
                  "name": "observationUnitLevelOrder",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode",
                  "in": "query",
                  "name": "observationUnitLevelCode",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.",
                  "in": "query",
                  "name": "includeObservations",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered set of Observation Units",
              "tags": [
                "Observation Units"
              ]
            },
            "post": {
              "description": "Add new Observation Units",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ObservationUnitNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Observation Units",
              "tags": [
                "Observation Units"
              ]
            },
            "put": {
              "description": "Update a set of Observation Units\n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/ObservationUnitNewRequest"
                      },
                      "example": {
                        "<observationUnitDbId_1>": {
                          "additionalInfo": {},
                          "externalReferences": [{
                              "referenceID": "doi:10.155454/12341234",
                              "referenceSource": "DOI"
                            }
                          ],
                          "germplasmDbId": "e9d9ed57",
                          "germplasmName": "A0000001",
                          "locationDbId": "0e208b20",
                          "locationName": "Field Station Alpha",
                          "observationUnitName": "Plot 31",
                          "observationUnitPUI": "http://pui.per/plot/1a9afc14",
                          "observationUnitPosition": {
                            "entryType": "TEST",
                            "geoCoordinates": {
                              "geometry": {
                                "coordinates": [
                                  -76.506042,
                                  42.417373,
                                  123
                                ],
                                "type": "Point"
                              },
                              "type": "Feature"
                            },
                            "observationLevel": {
                              "levelCode": "Plot_456",
                              "levelName": "plot",
                              "levelOrder": 2
                            },
                            "observationLevelRelationships": [{
                                "levelCode": "Field_1",
                                "levelName": "field",
                                "levelOrder": 0
                              }, {
                                "levelCode": "Block_6",
                                "levelName": "block",
                                "levelOrder": 1
                              }, {
                                "levelCode": "Plot_456",
                                "levelName": "plot",
                                "levelOrder": 2
                              }
                            ],
                            "positionCoordinateX": "78",
                            "positionCoordinateXType": "GRID_COL",
                            "positionCoordinateY": "08",
                            "positionCoordinateYType": "GRID_ROW"
                          },
                          "programDbId": "2d763a7a",
                          "programName": "The Perfect Breeding Program",
                          "seedLotDbId": "261ecb09",
                          "studyDbId": "9865addc",
                          "studyName": "Purple_Tomato_1",
                          "treatments": [{
                              "factor": "fertilizer",
                              "modality": "low fertilizer"
                            }
                          ],
                          "trialDbId": "776a609c",
                          "trialName": "Purple Tomato"
                        },
                        "<observationUnitDbId_2>": {
                          "additionalInfo": {},
                          "externalReferences": [{
                              "referenceID": "doi:10.155454/12341234",
                              "referenceSource": "DOI"
                            }
                          ],
                          "germplasmDbId": "e9d9ed57",
                          "germplasmName": "A0000001",
                          "locationDbId": "0e208b20",
                          "locationName": "Field Station Alpha",
                          "observationUnitName": "Plot 17",
                          "observationUnitPUI": "http://pui.per/plot/1a9afc14",
                          "observationUnitPosition": {
                            "entryType": "TEST",
                            "geoCoordinates": {
                              "geometry": {
                                "coordinates": [
                                  -76.506042,
                                  42.417373,
                                  123
                                ],
                                "type": "Point"
                              },
                              "type": "Feature"
                            },
                            "observationLevel": {
                              "levelCode": "Plot_123",
                              "levelName": "plot",
                              "levelOrder": 2
                            },
                            "observationLevelRelationships": [{
                                "levelCode": "Field_1",
                                "levelName": "field",
                                "levelOrder": 0
                              }, {
                                "levelCode": "Block_12",
                                "levelName": "block",
                                "levelOrder": 1
                              }, {
                                "levelCode": "Plot_123",
                                "levelName": "plot",
                                "levelOrder": 2
                              }
                            ],
                            "positionCoordinateX": "74",
                            "positionCoordinateXType": "GRID_COL",
                            "positionCoordinateY": "03",
                            "positionCoordinateYType": "GRID_ROW"
                          },
                          "programDbId": "2d763a7a",
                          "programName": "The Perfect Breeding Program",
                          "seedLotDbId": "261ecb09",
                          "studyDbId": "9865addc",
                          "studyName": "Purple_Tomato_1",
                          "treatments": [{
                              "factor": "fertilizer",
                              "modality": "low fertilizer"
                            }
                          ],
                          "trialDbId": "776a609c",
                          "trialName": "Purple Tomato"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update a set of Observation Units",
              "tags": [
                "Observation Units"
              ]
            }
          }
        },
        "/observationunits/table": {
          "methods": {
            "get": {
              "description": "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
              "parameters": [{
                  "description": "The unique ID of an Observation Unit",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a germplasm (accession) to filter on",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a studies to filter on",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a location where these observations were collected",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a trial to filter on",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a program to filter on",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.",
                  "in": "query",
                  "name": "observationLevel",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/acceptHeader"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitTableResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a list of Observations in a table format",
              "tags": [
                "Observation Units"
              ]
            }
          }
        },
        "/observationunits/{observationUnitDbId}": {
          "methods": {
            "get": {
              "description": "Get the details of a specific Observation Unit",
              "parameters": [{
                  "description": "The unique ID of the specific Observation Unit",
                  "in": "path",
                  "name": "observationUnitDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the details of a specific Observation Unit",
              "tags": [
                "Observation Units"
              ]
            },
            "put": {
              "description": "Update an existing Observation Units",
              "parameters": [{
                  "description": "The unique ID of the specific Observation Unit",
                  "in": "path",
                  "name": "observationUnitDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationUnitNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Update an existing Observation Units",
              "tags": [
                "Observation Units"
              ]
            }
          }
        },
        "/search/observationunits": {
          "methods": {
            "post": {
              "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.\n\nUse case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.\n\nExample Use cases \n\n- Study a panel of germplasm across multiple studies\n\n- Get all data for a specific study \n\n- Get simple atomic phenotyping values \n\n- Study Locations for adaptation to climate change\n\n- Find phenotypes that are from after a certain timestamp\n\nobservationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationUnitSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Observation Units",
              "tags": [
                "Observation Units"
              ]
            }
          }
        },
        "/search/observationunits/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Returns a list of observationUnit with the observed Phenotypes.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationUnitListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Observation Unit Search",
              "tags": [
                "Observation Units"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "ObservationUnit": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "e9d9ed57",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000001",
              "type": "string"
            },
            "locationDbId": {
              "description": "The ID which uniquely identifies a location, associated with this study",
              "example": "0e208b20",
              "type": "string"
            },
            "locationName": {
              "description": "The human readable name of a location associated with this study",
              "example": "Field Station Alpha",
              "type": "string"
            },
            "observationUnitDbId": {
              "description": "The ID which uniquely identifies an observation unit\n\nMIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. ",
              "example": "8c67503c",
              "type": "string"
            },
            "observationUnitName": {
              "description": "A human readable name for an observation unit",
              "example": "Plot 1",
              "type": "string"
            },
            "observationUnitPUI": {
              "description": "A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.",
              "example": "http://pui.per/plot/1a9afc14",
              "type": "string"
            },
            "observationUnitPosition": {
              "description": "All positional and layout information related to this Observation Unit\n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. Levels of observation must be consistent with those listed in the Study section.",
              "properties": {
                "entryType": {
                  "description": "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                  "enum": [
                    "CHECK",
                    "TEST",
                    "FILLER"
                  ],
                  "example": "TEST",
                  "type": "string"
                },
                "geoCoordinates": {
                  "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties": {
                    "geometry": {
                      "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                      "discriminator": {
                        "mapping": {
                          "Point": "#/components/schemas/pointGeometry",
                          "Polygon": "#/components/schemas/polygonGeometry"
                        },
                        "propertyName": "type"
                      },
                      "example": {
                        "coordinates": [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        "type": "Point"
                      },
                      "oneOf": [{
                          "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                          "properties": {
                            "coordinates": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "type": {
                              "default": "Point",
                              "description": "The literal string \"Point\"",
                              "example": "Point",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }, {
                          "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                          "properties": {
                            "coordinates": {
                              "description": "An array of linear rings",
                              "example": [
                                [
                                  [
                                    -77.456654,
                                    42.241133,
                                    494
                                  ],
                                  [
                                    -75.414133,
                                    41.508282,
                                    571
                                  ],
                                  [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  [
                                    -77.456654,
                                    42.241133,
                                    346
                                  ]
                                ]
                              ],
                              "items": {
                                "description": "An array of at least four positions where the first equals the last",
                                "example": [
                                  [
                                    -77.456654,
                                    42.241133,
                                    494
                                  ],
                                  [
                                    -75.414133,
                                    41.508282,
                                    571
                                  ],
                                  [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  [
                                    -77.456654,
                                    42.241133,
                                    346
                                  ]
                                ],
                                "items": {
                                  "description": "A single position",
                                  "example": [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  "items": {
                                    "type": "number"
                                  },
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "minItems": 4,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "Polygon",
                              "description": "The literal string \"Polygon\"",
                              "example": "Polygon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "title": "GeoJSON Geometry",
                      "type": "object"
                    },
                    "type": {
                      "default": "Feature",
                      "description": "The literal string \"Feature\"",
                      "example": "Feature",
                      "type": "string"
                    }
                  },
                  "title": "GeoJSON",
                  "type": "object"
                },
                "observationLevel": {
                  "description": "The exact level and level code of an observation unit. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables).\nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\"",
                  "properties": {
                    "levelCode": {
                      "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                      "example": "Plot_123",
                      "type": "string"
                    },
                    "levelName": {
                      "description": "A name for this level",
                      "enum": [
                        "study",
                        "field",
                        "entry",
                        "rep",
                        "block",
                        "sub-block",
                        "plot",
                        "sub-plot",
                        "plant",
                        "pot",
                        "sample"
                      ],
                      "example": "plot",
                      "type": "string"
                    },
                    "levelOrder": {
                      "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "title": "ObservationUnitLevelRelationship",
                  "type": "object"
                },
                "observationLevelRelationships": {
                  "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                  "example": [{
                      "levelCode": "Field_1",
                      "levelName": "field",
                      "levelOrder": 0
                    }, {
                      "levelCode": "Block_12",
                      "levelName": "block",
                      "levelOrder": 1
                    }, {
                      "levelCode": "Plot_123",
                      "levelName": "plot",
                      "levelOrder": 2
                    }
                  ],
                  "items": {
                    "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "properties": {
                      "levelCode": {
                        "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                        "example": "Plot_123",
                        "type": "string"
                      },
                      "levelName": {
                        "description": "A name for this level",
                        "enum": [
                          "study",
                          "field",
                          "entry",
                          "rep",
                          "block",
                          "sub-block",
                          "plot",
                          "sub-plot",
                          "plant",
                          "pot",
                          "sample"
                        ],
                        "example": "plot",
                        "type": "string"
                      },
                      "levelOrder": {
                        "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                        "example": 2,
                        "type": "integer"
                      }
                    },
                    "title": "ObservationUnitLevelRelationship",
                    "type": "object"
                  },
                  "type": "array"
                },
                "positionCoordinateX": {
                  "description": "The X position coordinate for an observation unit. Different systems may use different coordinate systems.",
                  "example": "74",
                  "type": "string"
                },
                "positionCoordinateXType": {
                  "description": "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
                  "enum": [
                    "LONGITUDE",
                    "LATITUDE",
                    "PLANTED_ROW",
                    "PLANTED_INDIVIDUAL",
                    "GRID_ROW",
                    "GRID_COL",
                    "MEASURED_ROW",
                    "MEASURED_COL"
                  ],
                  "example": "GRID_COL",
                  "type": "string"
                },
                "positionCoordinateY": {
                  "description": "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.",
                  "example": "03",
                  "type": "string"
                },
                "positionCoordinateYType": {
                  "description": "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
                  "enum": [
                    "LONGITUDE",
                    "LATITUDE",
                    "PLANTED_ROW",
                    "PLANTED_INDIVIDUAL",
                    "GRID_ROW",
                    "GRID_COL",
                    "MEASURED_ROW",
                    "MEASURED_COL"
                  ],
                  "example": "GRID_ROW",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "observations": {
              "description": "All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True.",
              "items": {
                "properties": {
                  "additionalInfo": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Additional arbitrary info",
                    "type": "object"
                  },
                  "collector": {
                    "description": "The name or identifier of the entity which collected the observation",
                    "example": "917d3ae0",
                    "type": "string"
                  },
                  "externalReferences": {
                    "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                    "example": [{
                        "referenceID": "doi:10.155454/12341234",
                        "referenceSource": "DOI"
                      }, {
                        "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                        "referenceSource": "OBO Library"
                      }, {
                        "referenceID": "75a50e76",
                        "referenceSource": "Remote Data Collection Upload Tool"
                      }
                    ],
                    "items": {
                      "properties": {
                        "referenceID": {
                          "description": "The external reference ID. Could be a simple string or a URI.",
                          "type": "string"
                        },
                        "referenceSource": {
                          "description": "An identifier for the source system or database of this reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "title": "ExternalReferences",
                    "type": "array"
                  },
                  "germplasmDbId": {
                    "description": "The ID which uniquely identifies a germplasm",
                    "example": "2408ab11",
                    "type": "string"
                  },
                  "germplasmName": {
                    "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
                    "example": "A0000003",
                    "type": "string"
                  },
                  "observationDbId": {
                    "description": "The ID which uniquely identifies an observation",
                    "example": "ef24b615",
                    "type": "string"
                  },
                  "observationTimeStamp": {
                    "description": "The date and time when this observation was made",
                    "format": "date-time",
                    "type": "string"
                  },
                  "observationUnitDbId": {
                    "description": "The ID which uniquely identifies an observation unit",
                    "example": "598111d4",
                    "type": "string"
                  },
                  "observationUnitName": {
                    "description": "A human readable name for an observation unit",
                    "example": "Plot 1",
                    "type": "string"
                  },
                  "observationVariableDbId": {
                    "description": "The ID which uniquely identifies an observation variable",
                    "example": "c403d107",
                    "type": "string"
                  },
                  "observationVariableName": {
                    "description": "A human readable name for an observation variable",
                    "example": "Plant Height in meters",
                    "type": "string"
                  },
                  "season": {
                    "properties": {
                      "season": {
                        "description": "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                        "example": "Spring",
                        "type": "string"
                      },
                      "seasonDbId": {
                        "description": "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                        "example": "Spring_2018",
                        "type": "string"
                      },
                      "year": {
                        "description": "The 4 digit year of the season.",
                        "example": 2018,
                        "type": "integer"
                      }
                    },
                    "required": [
                      "seasonDbId"
                    ],
                    "type": "object"
                  },
                  "studyDbId": {
                    "description": "The ID which uniquely identifies a study within the given database server",
                    "example": "ef2829db",
                    "type": "string"
                  },
                  "uploadedBy": {
                    "description": "The name or id of the user who uploaded the observation to the database system",
                    "example": "a2f7f60b",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the data collected as an observation",
                    "example": "2.3",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "programDbId": {
              "description": "The ID which uniquely identifies a program",
              "example": "2d763a7a",
              "type": "string"
            },
            "programName": {
              "description": "The human readable name of a program",
              "example": "The Perfect Breeding Program",
              "type": "string"
            },
            "seedLotDbId": {
              "description": "The unique identifier for the originating Seed Lot",
              "example": "261ecb09",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "9865addc",
              "type": "string"
            },
            "studyName": {
              "description": "The human readable name for a study",
              "example": "Purple_Tomato_1",
              "type": "string"
            },
            "treatments": {
              "description": "List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.",
              "items": {
                "properties": {
                  "factor": {
                    "description": "The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
                    "example": "fertilizer",
                    "type": "string"
                  },
                  "modality": {
                    "description": "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
                    "example": "low fertilizer",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial",
              "example": "776a609c",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial",
              "example": "Purple Tomato",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ObservationUnitHierarchyLevel": {
          "description": "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
          "properties": {
            "levelName": {
              "description": "A name for this level",
              "enum": [
                "study",
                "field",
                "entry",
                "rep",
                "block",
                "sub-block",
                "plot",
                "sub-plot",
                "plant",
                "pot",
                "sample"
              ],
              "example": "plot",
              "type": "string"
            },
            "levelOrder": {
              "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
              "example": 2,
              "type": "integer"
            }
          },
          "title": "ObservationUnitHierarchyLevel",
          "type": "object"
        },
        "ObservationUnitNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "e9d9ed57",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000001",
              "type": "string"
            },
            "locationDbId": {
              "description": "The ID which uniquely identifies a location, associated with this study",
              "example": "0e208b20",
              "type": "string"
            },
            "locationName": {
              "description": "The human readable name of a location associated with this study",
              "example": "Field Station Alpha",
              "type": "string"
            },
            "observationUnitName": {
              "description": "A human readable name for an observation unit",
              "example": "Plot 1",
              "type": "string"
            },
            "observationUnitPUI": {
              "description": "A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.",
              "example": "http://pui.per/plot/1a9afc14",
              "type": "string"
            },
            "observationUnitPosition": {
              "description": "All positional and layout information related to this Observation Unit\n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) or level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. Levels of observation must be consistent with those listed in the Study section.",
              "properties": {
                "entryType": {
                  "description": "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                  "enum": [
                    "CHECK",
                    "TEST",
                    "FILLER"
                  ],
                  "example": "TEST",
                  "type": "string"
                },
                "geoCoordinates": {
                  "description": "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "properties": {
                    "geometry": {
                      "description": "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                      "discriminator": {
                        "mapping": {
                          "Point": "#/components/schemas/pointGeometry",
                          "Polygon": "#/components/schemas/polygonGeometry"
                        },
                        "propertyName": "type"
                      },
                      "example": {
                        "coordinates": [
                          -76.506042,
                          42.417373,
                          123
                        ],
                        "type": "Point"
                      },
                      "oneOf": [{
                          "description": "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                          "properties": {
                            "coordinates": {
                              "description": "A single position",
                              "example": [
                                -76.506042,
                                42.417373,
                                123
                              ],
                              "items": {
                                "type": "number"
                              },
                              "minItems": 2,
                              "type": "array"
                            },
                            "type": {
                              "default": "Point",
                              "description": "The literal string \"Point\"",
                              "example": "Point",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }, {
                          "description": "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                          "properties": {
                            "coordinates": {
                              "description": "An array of linear rings",
                              "example": [
                                [
                                  [
                                    -77.456654,
                                    42.241133,
                                    494
                                  ],
                                  [
                                    -75.414133,
                                    41.508282,
                                    571
                                  ],
                                  [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  [
                                    -77.456654,
                                    42.241133,
                                    346
                                  ]
                                ]
                              ],
                              "items": {
                                "description": "An array of at least four positions where the first equals the last",
                                "example": [
                                  [
                                    -77.456654,
                                    42.241133,
                                    494
                                  ],
                                  [
                                    -75.414133,
                                    41.508282,
                                    571
                                  ],
                                  [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  [
                                    -77.456654,
                                    42.241133,
                                    346
                                  ]
                                ],
                                "items": {
                                  "description": "A single position",
                                  "example": [
                                    -76.506042,
                                    42.417373,
                                    123
                                  ],
                                  "items": {
                                    "type": "number"
                                  },
                                  "minItems": 2,
                                  "type": "array"
                                },
                                "minItems": 4,
                                "type": "array"
                              },
                              "type": "array"
                            },
                            "type": {
                              "default": "Polygon",
                              "description": "The literal string \"Polygon\"",
                              "example": "Polygon",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "title": "GeoJSON Geometry",
                      "type": "object"
                    },
                    "type": {
                      "default": "Feature",
                      "description": "The literal string \"Feature\"",
                      "example": "Feature",
                      "type": "string"
                    }
                  },
                  "title": "GeoJSON",
                  "type": "object"
                },
                "observationLevel": {
                  "description": "The exact level and level code of an observation unit. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables).\nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\"",
                  "properties": {
                    "levelCode": {
                      "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                      "example": "Plot_123",
                      "type": "string"
                    },
                    "levelName": {
                      "description": "A name for this level",
                      "enum": [
                        "study",
                        "field",
                        "entry",
                        "rep",
                        "block",
                        "sub-block",
                        "plot",
                        "sub-plot",
                        "plant",
                        "pot",
                        "sample"
                      ],
                      "example": "plot",
                      "type": "string"
                    },
                    "levelOrder": {
                      "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "title": "ObservationUnitLevelRelationship",
                  "type": "object"
                },
                "observationLevelRelationships": {
                  "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                  "example": [{
                      "levelCode": "Field_1",
                      "levelName": "field",
                      "levelOrder": 0
                    }, {
                      "levelCode": "Block_12",
                      "levelName": "block",
                      "levelOrder": 1
                    }, {
                      "levelCode": "Plot_123",
                      "levelName": "plot",
                      "levelOrder": 2
                    }
                  ],
                  "items": {
                    "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "properties": {
                      "levelCode": {
                        "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                        "example": "Plot_123",
                        "type": "string"
                      },
                      "levelName": {
                        "description": "A name for this level",
                        "enum": [
                          "study",
                          "field",
                          "entry",
                          "rep",
                          "block",
                          "sub-block",
                          "plot",
                          "sub-plot",
                          "plant",
                          "pot",
                          "sample"
                        ],
                        "example": "plot",
                        "type": "string"
                      },
                      "levelOrder": {
                        "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                        "example": 2,
                        "type": "integer"
                      }
                    },
                    "title": "ObservationUnitLevelRelationship",
                    "type": "object"
                  },
                  "type": "array"
                },
                "positionCoordinateX": {
                  "description": "The X position coordinate for an observation unit. Different systems may use different coordinate systems.",
                  "example": "74",
                  "type": "string"
                },
                "positionCoordinateXType": {
                  "description": "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
                  "enum": [
                    "LONGITUDE",
                    "LATITUDE",
                    "PLANTED_ROW",
                    "PLANTED_INDIVIDUAL",
                    "GRID_ROW",
                    "GRID_COL",
                    "MEASURED_ROW",
                    "MEASURED_COL"
                  ],
                  "example": "GRID_COL",
                  "type": "string"
                },
                "positionCoordinateY": {
                  "description": "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.",
                  "example": "03",
                  "type": "string"
                },
                "positionCoordinateYType": {
                  "description": "The type of positional coordinate used. Must be one of the following values\n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details\n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row\n\nGRID_ROW - The row index number of a square grid overlay\n\nGRID_COL - The column index number of a square grid overlay\n\nMEASURED_ROW - The distance in meters from a defined 0-th row\n\nMEASURED_COL - The distance in meters from a defined 0-th column",
                  "enum": [
                    "LONGITUDE",
                    "LATITUDE",
                    "PLANTED_ROW",
                    "PLANTED_INDIVIDUAL",
                    "GRID_ROW",
                    "GRID_COL",
                    "MEASURED_ROW",
                    "MEASURED_COL"
                  ],
                  "example": "GRID_ROW",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "programDbId": {
              "description": "The ID which uniquely identifies a program",
              "example": "2d763a7a",
              "type": "string"
            },
            "programName": {
              "description": "The human readable name of a program",
              "example": "The Perfect Breeding Program",
              "type": "string"
            },
            "seedLotDbId": {
              "description": "The unique identifier for the originating Seed Lot",
              "example": "261ecb09",
              "type": "string"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "9865addc",
              "type": "string"
            },
            "studyName": {
              "description": "The human readable name for a study",
              "example": "Purple_Tomato_1",
              "type": "string"
            },
            "treatments": {
              "description": "List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.",
              "items": {
                "properties": {
                  "factor": {
                    "description": "The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
                    "example": "fertilizer",
                    "type": "string"
                  },
                  "modality": {
                    "description": "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
                    "example": "low fertilizer",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "trialDbId": {
              "description": "The ID which uniquely identifies a trial",
              "example": "776a609c",
              "type": "string"
            },
            "trialName": {
              "description": "The human readable name of a trial",
              "example": "Purple Tomato",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ObservationUnitSearchRequest": {
          "properties": {
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "includeObservations": {
              "description": "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.",
              "example": false,
              "type": "boolean"
            },
            "locationDbIds": {
              "description": "The location ids to search for",
              "example": [
                "b28911cf",
                "5071d1e4"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationNames": {
              "description": "A human readable names to search for",
              "example": [
                "Location Alpha",
                "The Large Hadron Collider"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationLevelRelationships": {
              "description": "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
              "example": [{
                  "levelCode": "Field_1",
                  "levelName": "field"
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                "properties": {
                  "levelCode": {
                    "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "example": "Plot_123",
                    "type": "string"
                  },
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitLevelRelationship",
                "type": "object"
              },
              "type": "array"
            },
            "observationLevels": {
              "description": "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
              "example": [{
                  "levelCode": "Plot_123",
                  "levelName": "plot"
                }, {
                  "levelCode": "Plot_456",
                  "levelName": "plot"
                }, {
                  "levelCode": "Plot_789",
                  "levelName": "plot"
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                "properties": {
                  "levelCode": {
                    "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "example": "Plot_123",
                    "type": "string"
                  },
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitLevelRelationship",
                "type": "object"
              },
              "type": "array"
            },
            "observationUnitDbIds": {
              "description": "The unique id of an observation unit",
              "example": [
                "66bab7e3",
                "0e5e7f99"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableDbIds": {
              "description": "The DbIds of Variables to search for",
              "example": [
                "a646187d",
                "6d23513b"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableNames": {
              "description": "The names of Variables to search for",
              "example": [
                "Plant Height in meters",
                "Wheat rust score 1-5"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "programDbIds": {
              "description": "A program identifier to search for",
              "example": [
                "8f5de35b",
                "0e2d4a13"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "programNames": {
              "description": "A name of a program to search for",
              "example": [
                "Better Breeding Program",
                "Best Breeding Program"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialDbIds": {
              "description": "The ID which uniquely identifies a trial to search for",
              "example": [
                "d2593dc2",
                "9431a731"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialNames": {
              "description": "The human readable name of a trial to search for",
              "example": [
                "All Yield Trials 2016",
                "Disease Resistance Study Comparison Group"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ObservationUnitTable": {
          "properties": {
            "data": {
              "description": "Matrix of observation data recorded for different observation variables across different observation units",
              "example": [
                [
                  "f3a8a3db",
                  "Plant Alpha",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_111",
                  "Plant_1111",
                  "Pot_1111",
                  "Block_11",
                  "Entry_11",
                  "Rep_11",
                  "25.3",
                  "3",
                  "50.75"
                ],
                [
                  "05d1b011",
                  "Plant Beta",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_112",
                  "Plant_1122",
                  "Pot_1122",
                  "Block_11",
                  "Entry_11",
                  "Rep_12",
                  "27.9",
                  "1",
                  "45.345"
                ],
                [
                  "67e2d87c",
                  "Plant Gamma",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_123",
                  "Plant_1233",
                  "Pot_1233",
                  "Block_12",
                  "Entry_12",
                  "Rep_11",
                  "25.5",
                  "3",
                  "50.76"
                ],
                [
                  "d98d0d4c",
                  "Plant Epsilon",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_124",
                  "Plant_1244",
                  "Pot_1244",
                  "Block_12",
                  "Entry_12",
                  "Rep_12",
                  "28.9",
                  "0",
                  "46.5"
                ]
              ],
              "items": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "array"
            },
            "headerRow": {
              "description": "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>",
              "example": [
                "observationUnitDbId",
                "observationUnitName",
                "studyDbId",
                "studyName",
                "germplasmDbId",
                "germplasmName",
                "positionCoordinateX",
                "positionCoordinateY",
                "year",
                "field",
                "plot",
                "sub-plot",
                "plant",
                "pot",
                "block",
                "entry",
                "rep"
              ],
              "items": {
                "description": "valid header fields",
                "enum": [
                  "observationUnitDbId",
                  "observationUnitName",
                  "studyDbId",
                  "studyName",
                  "germplasmDbId",
                  "germplasmName",
                  "positionCoordinateX",
                  "positionCoordinateY",
                  "year",
                  "field",
                  "plot",
                  "sub-plot",
                  "plant",
                  "pot",
                  "block",
                  "entry",
                  "rep"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "observationVariables": {
              "description": "The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
              "example": [{
                  "observationVariableDbId": "367aa1a9",
                  "observationVariableName": "Plant height"
                }, {
                  "observationVariableDbId": "2acb934c",
                  "observationVariableName": "Carotenoid"
                }, {
                  "observationVariableDbId": "85a21ce1",
                  "observationVariableName": "Root color"
                }, {
                  "observationVariableDbId": "46f590e5",
                  "observationVariableName": "Virus severity"
                }
              ],
              "items": {
                "properties": {
                  "observationVariableDbId": {
                    "description": "Variable unique identifier",
                    "example": "367aa1a9",
                    "type": "string"
                  },
                  "observationVariableName": {
                    "description": "Variable name (usually a short name)",
                    "example": "Plant height",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Observation Variables": {
      "Calls": {
        "/search/variables": {
          "methods": {
            "post": {
              "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationVariableSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for Observation Variables",
              "tags": [
                "Observation Variables"
              ]
            }
          }
        },
        "/search/variables/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Search observation variables.\n\nSee Search Services for additional implementation details.",
              "parameters": [{
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the results of a Observation Variable search request",
              "tags": [
                "Observation Variables"
              ]
            }
          }
        },
        "/variables": {
          "methods": {
            "get": {
              "description": "Call to retrieve a list of observationVariables available in the system.",
              "parameters": [{
                  "description": "Variable's unique ID",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Variable's trait class (phenological, physiological, morphological, etc.)",
                  "in": "query",
                  "name": "traitClass",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a studies to filter on",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Observation Variables",
              "tags": [
                "Observation Variables"
              ]
            },
            "post": {
              "description": "Add new Observation Variables to the system.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ObservationVariableNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Observation Variables",
              "tags": [
                "Observation Variables"
              ]
            }
          }
        },
        "/variables/{observationVariableDbId}": {
          "methods": {
            "get": {
              "description": "Retrieve variable details",
              "parameters": [{
                  "description": "string id of the variable",
                  "in": "path",
                  "name": "observationVariableDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details for a specific Observation Variable",
              "tags": [
                "Observation Variables"
              ]
            },
            "put": {
              "description": "Update an existing Observation Variable",
              "parameters": [{
                  "description": "string id of the variable",
                  "in": "path",
                  "name": "observationVariableDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationVariableNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationVariableSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Observation Variable",
              "tags": [
                "Observation Variables"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "ObservationVariable": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Crop name (examples: \"Maize\", \"Wheat\")",
              "example": "Maize",
              "type": "string"
            },
            "contextOfUse": {
              "description": "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
              "example": [
                "Trial evaluation",
                "Nursery evaluation"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "defaultValue": {
              "description": "Variable default value. (examples: \"red\", \"2.3\", etc.)",
              "example": "2.0",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org/documentation.html",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthStage": {
              "description": "Growth stage at which measurement is made (examples: \"flowering\")",
              "example": "flowering",
              "type": "string"
            },
            "institution": {
              "description": "Name of institution submitting the variable",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "language": {
              "description": "2 letter ISO 639-1 code for the language of submission of the variable.",
              "example": "en",
              "type": "string"
            },
            "method": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "bibliographicalReference": {
                  "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                  "example": "Smith, 1893, Really Cool Paper, Popular Journal",
                  "type": "string"
                },
                "description": {
                  "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                  "example": "A measuring tape was used",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "formula": {
                  "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                  "example": "a^2 + b^2 = c^2",
                  "type": "string"
                },
                "methodClass": {
                  "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                  "example": "Measurement",
                  "type": "string"
                },
                "methodDbId": {
                  "description": "Method unique identifier",
                  "example": "0adb2764",
                  "type": "string"
                },
                "methodName": {
                  "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                  "example": "Measuring Tape",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "observationVariableDbId": {
              "description": "Variable unique identifier\n\nMIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.",
              "example": "b9b7edd1",
              "type": "string"
            },
            "observationVariableName": {
              "description": "Variable name (usually a short name)\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.",
              "example": "Variable Name",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scale": {
              "description": "Scale metadata",
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "dataType": {
                  "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                  "enum": [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                  ],
                  "example": "Numerical",
                  "type": "string"
                },
                "decimalPlaces": {
                  "description": "For numerical, number of decimal places to be reported",
                  "example": 2,
                  "type": "integer"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "scaleDbId": {
                  "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                  "example": "af730171",
                  "type": "string"
                },
                "scaleName": {
                  "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                  "example": "Meters",
                  "type": "string"
                },
                "validValues": {
                  "properties": {
                    "categories": {
                      "description": "List of possible values with optional labels",
                      "example": [{
                          "label": "low",
                          "value": "0"
                        }, {
                          "label": "medium",
                          "value": "5"
                        }, {
                          "label": "high",
                          "value": "10"
                        }
                      ],
                      "items": {
                        "properties": {
                          "label": {
                            "description": "A text label for a category",
                            "type": "string"
                          },
                          "value": {
                            "description": "The actual value for a category",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "max": {
                      "description": "Maximum value (used for field data capture control).",
                      "example": 9999,
                      "type": "integer"
                    },
                    "min": {
                      "description": "Minimum value (used for data capture control) for numerical and date scales",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "scientist": {
              "description": "Name of scientist submitting the variable.",
              "example": "Dr. Bob Robertson",
              "type": "string"
            },
            "status": {
              "description": "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "submissionTimestamp": {
              "description": "Timestamp when the Variable was added (ISO 8601)",
              "format": "date-time",
              "type": "string"
            },
            "synonyms": {
              "description": "Other variable names",
              "example": [
                "Maize Height",
                "Stalk Height",
                "Corn Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trait": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "alternativeAbbreviations": {
                  "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
                  "example": [
                    "H",
                    "PH",
                    "H1"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attribute": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                  "example": "height",
                  "type": "string"
                },
                "entity": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                  "example": "Stalk",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "mainAbbreviation": {
                  "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
                  "example": "PH",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "status": {
                  "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                  "example": "recommended",
                  "type": "string"
                },
                "synonyms": {
                  "description": "Other trait names",
                  "example": [
                    "Height",
                    "Plant Height",
                    "Stalk Height",
                    "Canopy Height"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "traitClass": {
                  "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
                  "example": "phenological",
                  "type": "string"
                },
                "traitDbId": {
                  "description": "The ID which uniquely identifies a trait",
                  "example": "9b2e34f5",
                  "type": "string"
                },
                "traitDescription": {
                  "description": "The description of a trait",
                  "example": "The height of the plant",
                  "type": "string"
                },
                "traitName": {
                  "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                  "example": "Height",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ObservationVariableNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "commonCropName": {
              "description": "Crop name (examples: \"Maize\", \"Wheat\")",
              "example": "Maize",
              "type": "string"
            },
            "contextOfUse": {
              "description": "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
              "example": [
                "Trial evaluation",
                "Nursery evaluation"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "defaultValue": {
              "description": "Variable default value. (examples: \"red\", \"2.3\", etc.)",
              "example": "2.0",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org/documentation.html",
              "format": "uri",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "growthStage": {
              "description": "Growth stage at which measurement is made (examples: \"flowering\")",
              "example": "flowering",
              "type": "string"
            },
            "institution": {
              "description": "Name of institution submitting the variable",
              "example": "The BrAPI Institute",
              "type": "string"
            },
            "language": {
              "description": "2 letter ISO 639-1 code for the language of submission of the variable.",
              "example": "en",
              "type": "string"
            },
            "method": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "bibliographicalReference": {
                  "description": "Bibliographical reference describing the method.\n\nMIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                  "example": "Smith, 1893, Really Cool Paper, Popular Journal",
                  "type": "string"
                },
                "description": {
                  "description": "Method description\n\nMIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                  "example": "A measuring tape was used",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "formula": {
                  "description": "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                  "example": "a^2 + b^2 = c^2",
                  "type": "string"
                },
                "methodClass": {
                  "description": "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                  "example": "Measurement",
                  "type": "string"
                },
                "methodDbId": {
                  "description": "Method unique identifier",
                  "example": "0adb2764",
                  "type": "string"
                },
                "methodName": {
                  "description": "Human readable name for the method\n\nMIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                  "example": "Measuring Tape",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "observationVariableName": {
              "description": "Variable name (usually a short name)",
              "example": "Variable Name",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scale": {
              "description": "Scale metadata",
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "dataType": {
                  "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                  "enum": [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                  ],
                  "example": "Numerical",
                  "type": "string"
                },
                "decimalPlaces": {
                  "description": "For numerical, number of decimal places to be reported",
                  "example": 2,
                  "type": "integer"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "scaleDbId": {
                  "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                  "example": "af730171",
                  "type": "string"
                },
                "scaleName": {
                  "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                  "example": "Meters",
                  "type": "string"
                },
                "validValues": {
                  "properties": {
                    "categories": {
                      "description": "List of possible values with optional labels",
                      "example": [{
                          "label": "low",
                          "value": "0"
                        }, {
                          "label": "medium",
                          "value": "5"
                        }, {
                          "label": "high",
                          "value": "10"
                        }
                      ],
                      "items": {
                        "properties": {
                          "label": {
                            "description": "A text label for a category",
                            "type": "string"
                          },
                          "value": {
                            "description": "The actual value for a category",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "max": {
                      "description": "Maximum value (used for field data capture control).",
                      "example": 9999,
                      "type": "integer"
                    },
                    "min": {
                      "description": "Minimum value (used for data capture control) for numerical and date scales",
                      "example": 2,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "scientist": {
              "description": "Name of scientist submitting the variable.",
              "example": "Dr. Bob Robertson",
              "type": "string"
            },
            "status": {
              "description": "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "submissionTimestamp": {
              "description": "Timestamp when the Variable was added (ISO 8601)",
              "format": "date-time",
              "type": "string"
            },
            "synonyms": {
              "description": "Other variable names",
              "example": [
                "Maize Height",
                "Stalk Height",
                "Corn Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trait": {
              "properties": {
                "additionalInfo": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "Additional arbitrary info",
                  "type": "object"
                },
                "alternativeAbbreviations": {
                  "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
                  "example": [
                    "H",
                    "PH",
                    "H1"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "attribute": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                  "example": "height",
                  "type": "string"
                },
                "entity": {
                  "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                  "example": "Stalk",
                  "type": "string"
                },
                "externalReferences": {
                  "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "example": [{
                      "referenceID": "doi:10.155454/12341234",
                      "referenceSource": "DOI"
                    }, {
                      "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                      "referenceSource": "OBO Library"
                    }, {
                      "referenceID": "75a50e76",
                      "referenceSource": "Remote Data Collection Upload Tool"
                    }
                  ],
                  "items": {
                    "properties": {
                      "referenceID": {
                        "description": "The external reference ID. Could be a simple string or a URI.",
                        "type": "string"
                      },
                      "referenceSource": {
                        "description": "An identifier for the source system or database of this reference",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "title": "ExternalReferences",
                  "type": "array"
                },
                "mainAbbreviation": {
                  "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
                  "example": "PH",
                  "type": "string"
                },
                "ontologyReference": {
                  "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                  "properties": {
                    "documentationLinks": {
                      "description": "links to various ontology documentation",
                      "items": {
                        "properties": {
                          "URL": {
                            "example": "http://purl.obolibrary.org/obo/ro.owl",
                            "format": "uri",
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "OBO",
                              "RDF",
                              "WEBPAGE"
                            ],
                            "example": "OBO",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "ontologyDbId": {
                      "description": "Ontology database unique identifier",
                      "example": "6b071868",
                      "type": "string"
                    },
                    "ontologyName": {
                      "description": "Ontology name",
                      "example": "The Crop Ontology",
                      "type": "string"
                    },
                    "version": {
                      "description": "Ontology version (no specific format)",
                      "example": "7.2.3",
                      "type": "string"
                    }
                  },
                  "required": [
                    "ontologyName",
                    "ontologyDbId"
                  ],
                  "type": "object"
                },
                "status": {
                  "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                  "example": "recommended",
                  "type": "string"
                },
                "synonyms": {
                  "description": "Other trait names",
                  "example": [
                    "Height",
                    "Plant Height",
                    "Stalk Height",
                    "Canopy Height"
                  ],
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "traitClass": {
                  "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
                  "example": "phenological",
                  "type": "string"
                },
                "traitDbId": {
                  "description": "The ID which uniquely identifies a trait",
                  "example": "9b2e34f5",
                  "type": "string"
                },
                "traitDescription": {
                  "description": "The description of a trait",
                  "example": "The height of the plant",
                  "type": "string"
                },
                "traitName": {
                  "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                  "example": "Height",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ObservationVariableSearchRequest": {
          "properties": {
            "dataTypes": {
              "description": "List of scale data types to filter search results",
              "example": [
                "Numerical",
                "Ordinal",
                "Text"
              ],
              "items": {
                "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum": [
                  "Code",
                  "Date",
                  "Duration",
                  "Nominal",
                  "Numerical",
                  "Ordinal",
                  "Text"
                ],
                "example": "Numerical",
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "methodDbIds": {
              "description": "List of methods to filter search results",
              "example": [
                "07e34f83",
                "d3d5517a"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableDbIds": {
              "description": "List of observation variable IDs to search for",
              "example": [
                "2ef15c9f",
                "318e7f7d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableNames": {
              "description": "List of human readable observation variable names to search for",
              "example": [
                "Plant Height 1",
                "Root Color"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ontologyDbIds": {
              "description": "List of ontology IDs to search for",
              "example": [
                "f44f7b23",
                "a26b576e"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "scaleDbIds": {
              "description": "List of scales to filter search results",
              "example": [
                "a13ecffa",
                "7e1afe4f"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbId": {
              "description": "The unique ID of a studies to filter on",
              "example": [
                "5bcac0ae",
                "7f48e22d"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitClasses": {
              "description": "List of trait classes to filter search results",
              "example": [
                "morphological",
                "phenological",
                "agronomical"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitDbIds": {
              "description": "List of trait unique ID to filter search results",
              "example": [
                "ef81147b",
                "78d82fad"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Observations": {
      "Calls": {
        "/observations": {
          "methods": {
            "get": {
              "description": "Retrieve all observations where there are measurements for the given observation variables.\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
              "parameters": [{
                  "description": "The unique ID of an Observation",
                  "in": "query",
                  "name": "observationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of an Observation Unit",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a germplasm (accession) to filter on",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a studies to filter on",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a location where these observations were collected",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a trial to filter on",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a program to filter on",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelName",
                  "in": "query",
                  "name": "observationUnitLevelName",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder",
                  "in": "query",
                  "name": "observationUnitLevelOrder",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode",
                  "in": "query",
                  "name": "observationUnitLevelCode",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Timestamp range start",
                  "in": "query",
                  "name": "observationTimeStampRangeStart",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "description": "Timestamp range end",
                  "in": "query",
                  "name": "observationTimeStampRangeEnd",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a filtered set of Observations",
              "tags": [
                "Observations"
              ]
            },
            "post": {
              "description": "Add new Observation entities",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ObservationNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Add new Observation entities",
              "tags": [
                "Observations"
              ]
            },
            "put": {
              "description": "Update multiple Observation entities simultaneously with a single call\n\nInclude as many `observationDbIds` in the request as needed.\n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON.",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "additionalProperties": {
                        "$ref": "#/components/schemas/ObservationNewRequest"
                      },
                      "example": {
                        "<observationDbId_1>": {
                          "additionalInfo": {},
                          "collector": "917d3ae0",
                          "externalReferences": [{
                              "referenceID": "75a50e76",
                              "referenceSource": "Remote Data Collection Upload Tool"
                            }
                          ],
                          "germplasmDbId": "2408ab11",
                          "germplasmName": "A0000003",
                          "observationTimeStamp": "2020-08-12T18:10:40.413Z",
                          "observationUnitDbId": "598111d4",
                          "observationUnitName": "Plot 1",
                          "observationVariableDbId": "c403d107",
                          "observationVariableName": "Plant Height in meters",
                          "season": {
                            "season": "Spring",
                            "seasonDbId": "Spring_2018",
                            "year": 2018
                          },
                          "studyDbId": "ef2829db",
                          "uploadedBy": "a2f7f60b",
                          "value": "2.3"
                        },
                        "<observationDbId_2>": {
                          "additionalInfo": {},
                          "collector": "03ba8c2c",
                          "externalReferences": [{
                              "referenceID": "75a50e76",
                              "referenceSource": "Remote Data Collection Upload Tool"
                            }
                          ],
                          "germplasmDbId": "69310ca4",
                          "germplasmName": "A0000438",
                          "observationTimeStamp": "2020-08-12T18:10:40.413Z",
                          "observationUnitDbId": "1177a714",
                          "observationUnitName": "Plot 13",
                          "observationVariableDbId": "e4f8ba8c",
                          "observationVariableName": "Carotenoid",
                          "season": {
                            "season": "Spring",
                            "seasonDbId": "Spring_2018",
                            "year": 2018
                          },
                          "studyDbId": "6f9e267d",
                          "uploadedBy": "182c72ad",
                          "value": "2.5"
                        }
                      },
                      "type": "object"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update multiple Observation entities",
              "tags": [
                "Observations"
              ]
            }
          }
        },
        "/observations/table": {
          "methods": {
            "get": {
              "description": "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
              "parameters": [{
                  "description": "The unique ID of an Observation Unit",
                  "in": "query",
                  "name": "observationUnitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a germplasm (accession) to filter on",
                  "in": "query",
                  "name": "germplasmDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a studies to filter on",
                  "in": "query",
                  "name": "studyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a location where these observations were collected",
                  "in": "query",
                  "name": "locationDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a trial to filter on",
                  "in": "query",
                  "name": "trialDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique ID of a program to filter on",
                  "in": "query",
                  "name": "programDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                  "in": "query",
                  "name": "seasonDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.",
                  "in": "query",
                  "name": "observationLevel",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Permanent unique identifier which references the search results",
                  "in": "query",
                  "name": "searchResultsDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "Timestamp range start",
                  "in": "query",
                  "name": "observationTimeStampRangeStart",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "description": "Timestamp range end",
                  "in": "query",
                  "name": "observationTimeStampRangeEnd",
                  "required": false,
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/acceptHeader"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationTableResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get a list of Observations in a table format",
              "tags": [
                "Observations"
              ]
            }
          }
        },
        "/observations/{observationDbId}": {
          "methods": {
            "get": {
              "description": "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
              "parameters": [{
                  "description": "The unique ID of an observation",
                  "in": "path",
                  "name": "observationDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Observations",
              "tags": [
                "Observations"
              ]
            },
            "put": {
              "description": "Update an existing Observation",
              "parameters": [{
                  "description": "The unique ID of an observation",
                  "in": "path",
                  "name": "observationDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Observation",
              "tags": [
                "Observations"
              ]
            }
          }
        },
        "/search/observations": {
          "methods": {
            "post": {
              "description": "Submit a search request for a set of Observations. Returns an Id which reference the results of this search",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ObservationSearchRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Submit a search request for a set of Observations",
              "tags": [
                "Observations"
              ]
            }
          }
        },
        "/search/observations/{searchResultsDbId}": {
          "methods": {
            "get": {
              "description": "Returns a list of Observations based on search criteria.\n\nobservationTimeStamp - Iso Standard 8601.\n\nobservationValue data type inferred from the ontology",
              "parameters": [{
                  "$ref": "#/components/parameters/acceptHeader"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }, {
                  "$ref": "#/components/parameters/searchResultsDbId"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationListResponse"
                },
                "202": {
                  "$ref": "#/components/responses/202AcceptedSearchResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Returns a list of Observations based on search criteria.",
              "tags": [
                "Observations"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Observation": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "collector": {
              "description": "The name or identifier of the entity which collected the observation",
              "example": "917d3ae0",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "2408ab11",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000003",
              "type": "string"
            },
            "observationDbId": {
              "description": "The ID which uniquely identifies an observation",
              "example": "ef24b615",
              "type": "string"
            },
            "observationTimeStamp": {
              "description": "The date and time when this observation was made",
              "format": "date-time",
              "type": "string"
            },
            "observationUnitDbId": {
              "description": "The ID which uniquely identifies an observation unit",
              "example": "598111d4",
              "type": "string"
            },
            "observationUnitName": {
              "description": "A human readable name for an observation unit",
              "example": "Plot 1",
              "type": "string"
            },
            "observationVariableDbId": {
              "description": "The ID which uniquely identifies an observation variable",
              "example": "c403d107",
              "type": "string"
            },
            "observationVariableName": {
              "description": "A human readable name for an observation variable",
              "example": "Plant Height in meters",
              "type": "string"
            },
            "season": {
              "properties": {
                "season": {
                  "description": "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                  "example": "Spring",
                  "type": "string"
                },
                "seasonDbId": {
                  "description": "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                  "example": "Spring_2018",
                  "type": "string"
                },
                "year": {
                  "description": "The 4 digit year of the season.",
                  "example": 2018,
                  "type": "integer"
                }
              },
              "required": [
                "seasonDbId"
              ],
              "type": "object"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "ef2829db",
              "type": "string"
            },
            "uploadedBy": {
              "description": "The name or id of the user who uploaded the observation to the database system",
              "example": "a2f7f60b",
              "type": "string"
            },
            "value": {
              "description": "The value of the data collected as an observation",
              "example": "2.3",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ObservationNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "collector": {
              "description": "The name or identifier of the entity which collected the observation",
              "example": "917d3ae0",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "germplasmDbId": {
              "description": "The ID which uniquely identifies a germplasm",
              "example": "2408ab11",
              "type": "string"
            },
            "germplasmName": {
              "description": "Name of the germplasm. It can be the preferred name and does not have to be unique.",
              "example": "A0000003",
              "type": "string"
            },
            "observationTimeStamp": {
              "description": "The date and time when this observation was made",
              "format": "date-time",
              "type": "string"
            },
            "observationUnitDbId": {
              "description": "The ID which uniquely identifies an observation unit",
              "example": "598111d4",
              "type": "string"
            },
            "observationUnitName": {
              "description": "A human readable name for an observation unit",
              "example": "Plot 1",
              "type": "string"
            },
            "observationVariableDbId": {
              "description": "The ID which uniquely identifies an observation variable",
              "example": "c403d107",
              "type": "string"
            },
            "observationVariableName": {
              "description": "A human readable name for an observation variable",
              "example": "Plant Height in meters",
              "type": "string"
            },
            "season": {
              "properties": {
                "season": {
                  "description": "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                  "example": "Spring",
                  "type": "string"
                },
                "seasonDbId": {
                  "description": "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                  "example": "Spring_2018",
                  "type": "string"
                },
                "year": {
                  "description": "The 4 digit year of the season.",
                  "example": 2018,
                  "type": "integer"
                }
              },
              "required": [
                "seasonDbId"
              ],
              "type": "object"
            },
            "studyDbId": {
              "description": "The ID which uniquely identifies a study within the given database server",
              "example": "ef2829db",
              "type": "string"
            },
            "uploadedBy": {
              "description": "The name or id of the user who uploaded the observation to the database system",
              "example": "a2f7f60b",
              "type": "string"
            },
            "value": {
              "description": "The value of the data collected as an observation",
              "example": "2.3",
              "type": "string"
            }
          },
          "type": "object"
        },
        "ObservationSearchRequest": {
          "properties": {
            "externalReferenceIDs": {
              "description": "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
              "example": [
                "http://purl.obolibrary.org/obo/ro.owl",
                "14a19841"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "externalReferenceSources": {
              "description": "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
              "example": [
                "OBO Library",
                "Field App Name"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmDbIds": {
              "description": "List of IDs which uniquely identify germplasm to search for",
              "example": [
                "e9c6edd7",
                "1b1df4a6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "germplasmNames": {
              "description": "List of human readable names to identify germplasm to search for",
              "example": [
                "A0000003",
                "A0000477"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationDbIds": {
              "description": "The location ids to search for",
              "example": [
                "b28911cf",
                "5071d1e4"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "locationNames": {
              "description": "A human readable names to search for",
              "example": [
                "Location Alpha",
                "The Large Hadron Collider"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationDbIds": {
              "description": "The unique id of an Observation",
              "example": [
                "6a4a59d8",
                "3ff067e0"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationLevelRelationships": {
              "description": "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
              "example": [{
                  "levelCode": "Field_1",
                  "levelName": "field"
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                "properties": {
                  "levelCode": {
                    "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "example": "Plot_123",
                    "type": "string"
                  },
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitLevelRelationship",
                "type": "object"
              },
              "type": "array"
            },
            "observationLevels": {
              "description": "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
              "example": [{
                  "levelCode": "Plot_123",
                  "levelName": "plot"
                }, {
                  "levelCode": "Plot_456",
                  "levelName": "plot"
                }, {
                  "levelCode": "Plot_789",
                  "levelName": "plot"
                }
              ],
              "items": {
                "description": "Observation levels indicate the granularity level at which the measurements are taken. \n\n`levelName` defines the level \n\n`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\n`levelCode` is an ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                "properties": {
                  "levelCode": {
                    "description": "An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists",
                    "example": "Plot_123",
                    "type": "string"
                  },
                  "levelName": {
                    "description": "A name for this level",
                    "enum": [
                      "study",
                      "field",
                      "entry",
                      "rep",
                      "block",
                      "sub-block",
                      "plot",
                      "sub-plot",
                      "plant",
                      "pot",
                      "sample"
                    ],
                    "example": "plot",
                    "type": "string"
                  },
                  "levelOrder": {
                    "description": "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers are at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9).",
                    "example": 2,
                    "type": "integer"
                  }
                },
                "title": "ObservationUnitLevelRelationship",
                "type": "object"
              },
              "type": "array"
            },
            "observationTimeStampRangeEnd": {
              "description": "Timestamp range end",
              "format": "date-time",
              "type": "string"
            },
            "observationTimeStampRangeStart": {
              "description": "Timestamp range start",
              "format": "date-time",
              "type": "string"
            },
            "observationUnitDbIds": {
              "description": "The unique id of an Observation Unit",
              "example": [
                "76f559b5",
                "066bc5d3"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableDbIds": {
              "description": "The DbIds of Variables to search for",
              "example": [
                "a646187d",
                "6d23513b"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "observationVariableNames": {
              "description": "The names of Variables to search for",
              "example": [
                "Plant Height in meters",
                "Wheat rust score 1-5"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "page": {
              "description": "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
              "example": 0,
              "type": "integer"
            },
            "pageSize": {
              "description": "The size of the pages to be returned. Default is `1000`.",
              "example": 1000,
              "type": "integer"
            },
            "programDbIds": {
              "description": "A program identifier to search for",
              "example": [
                "8f5de35b",
                "0e2d4a13"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "programNames": {
              "description": "A name of a program to search for",
              "example": [
                "Better Breeding Program",
                "Best Breeding Program"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "seasonDbIds": {
              "description": "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
              "example": [
                "Spring 2018",
                "Season A"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyDbIds": {
              "description": "List of study identifiers to search for",
              "example": [
                "cf6c4bd4",
                "691e69d6"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "studyNames": {
              "description": "List of study names to filter search results",
              "example": [
                "The First Bob Study 2017",
                "Wheat Yield Trial 246"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialDbIds": {
              "description": "The ID which uniquely identifies a trial to search for",
              "example": [
                "d2593dc2",
                "9431a731"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "trialNames": {
              "description": "The human readable name of a trial to search for",
              "example": [
                "All Yield Trials 2016",
                "Disease Resistance Study Comparison Group"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "ObservationTable": {
          "properties": {
            "data": {
              "description": "Matrix of observation data recorded for different observation variables across different observation units",
              "example": [
                [
                  "2019-09-10T18:13:27.223Z",
                  "f3a8a3db",
                  "Plant Alpha",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_111",
                  "Plant_1111",
                  "Pot_1111",
                  "Block_11",
                  "Entry_11",
                  "Rep_11",
                  "25.3",
                  "",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:14:27.223Z",
                  "f3a8a3db",
                  "Plant Alpha",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_111",
                  "Plant_1111",
                  "Pot_1111",
                  "Block_11",
                  "Entry_11",
                  "Rep_11",
                  "",
                  "3",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:15:54.868Z",
                  "05d1b011",
                  "Plant Beta",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_112",
                  "Plant_1122",
                  "Pot_1122",
                  "Block_11",
                  "Entry_11",
                  "Rep_12",
                  "27.9",
                  "",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:16:54.868Z",
                  "05d1b011",
                  "Plant Beta",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409301",
                  "2017",
                  "Field_1",
                  "Plot_11",
                  "SubPlot_112",
                  "Plant_1122",
                  "Pot_1122",
                  "Block_11",
                  "Entry_11",
                  "Rep_12",
                  "",
                  "1",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:17:34.433Z",
                  "67e2d87c",
                  "Plant Gamma",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_123",
                  "Plant_1233",
                  "Pot_1233",
                  "Block_12",
                  "Entry_12",
                  "Rep_11",
                  "",
                  "3",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:18:34.433Z",
                  "67e2d87c",
                  "Plant Gamma",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "06307ec0",
                  "A0043001",
                  "76.50106681",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_123",
                  "Plant_1233",
                  "Pot_1233",
                  "Block_12",
                  "Entry_12",
                  "Rep_11",
                  "25.5",
                  "",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:19:15.629Z",
                  "d98d0d4c",
                  "Plant Epsilon",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_124",
                  "Plant_1244",
                  "Pot_1244",
                  "Block_12",
                  "Entry_12",
                  "Rep_12",
                  "28.9",
                  "",
                  "",
                  ""
                ],
                [
                  "2019-09-10T18:20:15.629Z",
                  "d98d0d4c",
                  "Plant Epsilon",
                  "0fe3e48b",
                  "2017 Plant Study",
                  "59d435cd",
                  "A0043002",
                  "76.50106683",
                  "42.44409356",
                  "2017",
                  "Field_1",
                  "Plot_12",
                  "SubPlot_124",
                  "Plant_1244",
                  "Pot_1244",
                  "Block_12",
                  "Entry_12",
                  "Rep_12",
                  "",
                  "0",
                  "",
                  ""
                ]
              ],
              "items": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": "array"
            },
            "headerRow": {
              "description": "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>",
              "example": [
                "observationTimeStamp",
                "observationUnitDbId",
                "observationUnitName",
                "studyDbId",
                "studyName",
                "germplasmDbId",
                "germplasmName",
                "positionCoordinateX",
                "positionCoordinateY",
                "year",
                "field",
                "plot",
                "sub-plot",
                "plant",
                "pot",
                "block",
                "entry",
                "rep"
              ],
              "items": {
                "description": "valid header fields",
                "enum": [
                  "observationTimeStamp",
                  "observationUnitDbId",
                  "observationUnitName",
                  "studyDbId",
                  "studyName",
                  "germplasmDbId",
                  "germplasmName",
                  "positionCoordinateX",
                  "positionCoordinateY",
                  "year",
                  "field",
                  "plot",
                  "sub-plot",
                  "plant",
                  "pot",
                  "block",
                  "entry",
                  "rep"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "observationVariables": {
              "description": "The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
              "example": [{
                  "observationVariableDbId": "367aa1a9",
                  "observationVariableName": "Plant height"
                }, {
                  "observationVariableDbId": "2acb934c",
                  "observationVariableName": "Carotenoid"
                }, {
                  "observationVariableDbId": "85a21ce1",
                  "observationVariableName": "Root color"
                }, {
                  "observationVariableDbId": "46f590e5",
                  "observationVariableName": "Virus severity"
                }
              ],
              "items": {
                "properties": {
                  "observationVariableDbId": {
                    "description": "Variable unique identifier",
                    "example": "367aa1a9",
                    "type": "string"
                  },
                  "observationVariableName": {
                    "description": "Variable name (usually a short name)",
                    "example": "Plant height",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      }
    },
    "Ontologies": {
      "Calls": {
        "/ontologies": {
          "methods": {
            "get": {
              "description": "Call to retrieve a list of observation variable ontologies available in the system.",
              "parameters": [{
                  "description": "The unique identifier for an ontology definition",
                  "in": "query",
                  "name": "ontologyDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "@context": {
                            "$ref": "#/components/schemas/Context"
                          },
                          "metadata": {
                            "$ref": "#/components/schemas/metadata"
                          },
                          "result": {
                            "properties": {
                              "data": {
                                "items": {
                                  "$ref": "#/components/schemas/Ontology"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "data"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "metadata",
                          "result"
                        ],
                        "title": "OntologyListResponse",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK",
                  "headers": {}
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Ontologies",
              "tags": [
                "Ontologies"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Ontology": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "authors": {
              "description": "Ontology's list of authors (no specific format)",
              "example": "Bob Robertson, Rob Robertson",
              "type": "string"
            },
            "copyright": {
              "description": "Ontology copyright",
              "example": "Copyright 1987, Bob Robertson",
              "type": "string"
            },
            "description": {
              "description": "Human readable description of Ontology",
              "example": "This is an example ontology that does not exist",
              "type": "string"
            },
            "documentationURL": {
              "description": "A URL to the human readable documentation of this object",
              "example": "https://wiki.brapi.org/ontology",
              "format": "uri",
              "type": "string"
            },
            "licence": {
              "description": "Ontology licence",
              "example": "MIT Open source licence",
              "type": "string"
            },
            "ontologyDbId": {
              "description": "Ontology database unique identifier",
              "example": "18e186cd",
              "type": "string"
            },
            "ontologyName": {
              "description": "Ontology name",
              "example": "The Official Ontology",
              "type": "string"
            },
            "version": {
              "description": "Ontology version (no specific format)",
              "example": "V1.3.2",
              "type": "string"
            }
          },
          "required": [
            "ontologyDbId",
            "ontologyName"
          ],
          "type": "object"
        }
      }
    },
    "Scales": {
      "Calls": {
        "/scales": {
          "methods": {
            "get": {
              "description": "Returns a list of Scales available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
              "parameters": [{
                  "description": "The unique identifier for a scale",
                  "in": "query",
                  "name": "scaleDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique identifier for an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ScaleListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Scales",
              "tags": [
                "Scales"
              ]
            },
            "post": {
              "description": "Create new scale objects in the database",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/ScaleNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ScaleListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Scales",
              "tags": [
                "Scales"
              ]
            }
          }
        },
        "/scales/{scaleDbId}": {
          "methods": {
            "get": {
              "description": "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
              "parameters": [{
                  "description": "Id of the scale to retrieve details of.",
                  "in": "path",
                  "name": "scaleDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ScaleSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Scale",
              "tags": [
                "Scales"
              ]
            },
            "put": {
              "description": "Update the details of an existing scale",
              "parameters": [{
                  "description": "Id of the scale to retrieve details of.",
                  "in": "path",
                  "name": "scaleDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ScaleNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ScaleSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Scale",
              "tags": [
                "Scales"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Scale": {
          "description": "Scale metadata",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "dataType": {
              "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "enum": [
                "Code",
                "Date",
                "Duration",
                "Nominal",
                "Numerical",
                "Ordinal",
                "Text"
              ],
              "example": "Numerical",
              "type": "string"
            },
            "decimalPlaces": {
              "description": "For numerical, number of decimal places to be reported",
              "example": 2,
              "type": "integer"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scaleDbId": {
              "description": "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
              "example": "af730171",
              "type": "string"
            },
            "scaleName": {
              "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
              "example": "Meters",
              "type": "string"
            },
            "validValues": {
              "properties": {
                "categories": {
                  "description": "List of possible values with optional labels",
                  "example": [{
                      "label": "low",
                      "value": "0"
                    }, {
                      "label": "medium",
                      "value": "5"
                    }, {
                      "label": "high",
                      "value": "10"
                    }
                  ],
                  "items": {
                    "properties": {
                      "label": {
                        "description": "A text label for a category",
                        "type": "string"
                      },
                      "value": {
                        "description": "The actual value for a category",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "max": {
                  "description": "Maximum value (used for field data capture control).",
                  "example": 9999,
                  "type": "integer"
                },
                "min": {
                  "description": "Minimum value (used for data capture control) for numerical and date scales",
                  "example": 2,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "ScaleNewRequest": {
          "description": "Scale metadata",
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "dataType": {
              "description": "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "enum": [
                "Code",
                "Date",
                "Duration",
                "Nominal",
                "Numerical",
                "Ordinal",
                "Text"
              ],
              "example": "Numerical",
              "type": "string"
            },
            "decimalPlaces": {
              "description": "For numerical, number of decimal places to be reported",
              "example": 2,
              "type": "integer"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "scaleName": {
              "description": "Name of the scale\n\nMIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
              "example": "Meters",
              "type": "string"
            },
            "validValues": {
              "properties": {
                "categories": {
                  "description": "List of possible values with optional labels",
                  "example": [{
                      "label": "low",
                      "value": "0"
                    }, {
                      "label": "medium",
                      "value": "5"
                    }, {
                      "label": "high",
                      "value": "10"
                    }
                  ],
                  "items": {
                    "properties": {
                      "label": {
                        "description": "A text label for a category",
                        "type": "string"
                      },
                      "value": {
                        "description": "The actual value for a category",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "max": {
                  "description": "Maximum value (used for field data capture control).",
                  "example": 9999,
                  "type": "integer"
                },
                "min": {
                  "description": "Minimum value (used for data capture control) for numerical and date scales",
                  "example": 2,
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          "required": [
            "scaleName"
          ],
          "type": "object"
        }
      }
    },
    "Traits": {
      "Calls": {
        "/traits": {
          "methods": {
            "get": {
              "description": "Call to retrieve a list of traits available in the system and their associated variables.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
              "parameters": [{
                  "description": "The unique identifier for a trait",
                  "in": "query",
                  "name": "traitDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "description": "The unique identifier for an observation variable",
                  "in": "query",
                  "name": "observationVariableDbId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/externalReferenceID"
                }, {
                  "$ref": "#/components/parameters/externalReferenceSource"
                }, {
                  "$ref": "#/components/parameters/page"
                }, {
                  "$ref": "#/components/parameters/pageSize"
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TraitListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Get the Traits",
              "tags": [
                "Traits"
              ]
            },
            "post": {
              "description": "Create new trait objects in the database",
              "parameters": [{
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "items": {
                        "$ref": "#/components/schemas/TraitNewRequest"
                      },
                      "type": "array"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TraitListResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                }
              },
              "summary": "Add new Traits",
              "tags": [
                "Traits"
              ]
            }
          }
        },
        "/traits/{traitDbId}": {
          "methods": {
            "get": {
              "description": "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
              "parameters": [{
                  "description": "Id of the trait to retrieve details of.",
                  "in": "path",
                  "name": "traitDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TraitSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Get the details of a specific Trait",
              "tags": [
                "Traits"
              ]
            },
            "put": {
              "description": "Update an existing trait",
              "parameters": [{
                  "description": "Id of the trait to retrieve details of.",
                  "in": "path",
                  "name": "traitDbId",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }, {
                  "$ref": "#/components/parameters/authorizationHeader"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TraitNewRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TraitSingleResponse"
                },
                "400": {
                  "$ref": "#/components/responses/400BadRequest"
                },
                "401": {
                  "$ref": "#/components/responses/401Unauthorized"
                },
                "403": {
                  "$ref": "#/components/responses/403Forbidden"
                },
                "404": {
                  "$ref": "#/components/responses/404NotFound"
                }
              },
              "summary": "Update an existing Trait",
              "tags": [
                "Traits"
              ]
            }
          }
        }
      },
      "Datatypes": {
        "Trait": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "alternativeAbbreviations": {
              "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
              "example": [
                "H",
                "PH",
                "H1"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "attribute": {
              "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
              "example": "height",
              "type": "string"
            },
            "entity": {
              "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
              "example": "Stalk",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "mainAbbreviation": {
              "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
              "example": "PH",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "status": {
              "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "synonyms": {
              "description": "Other trait names",
              "example": [
                "Height",
                "Plant Height",
                "Stalk Height",
                "Canopy Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitClass": {
              "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
              "example": "phenological",
              "type": "string"
            },
            "traitDbId": {
              "description": "The ID which uniquely identifies a trait",
              "example": "9b2e34f5",
              "type": "string"
            },
            "traitDescription": {
              "description": "The description of a trait",
              "example": "The height of the plant",
              "type": "string"
            },
            "traitName": {
              "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
              "example": "Height",
              "type": "string"
            }
          },
          "type": "object"
        },
        "TraitNewRequest": {
          "properties": {
            "additionalInfo": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Additional arbitrary info",
              "type": "object"
            },
            "alternativeAbbreviations": {
              "description": "Other frequent abbreviations of the trait, if any. These abbreviations do not have to follow a convention",
              "example": [
                "H",
                "PH",
                "H1"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "attribute": {
              "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
              "example": "height",
              "type": "string"
            },
            "entity": {
              "description": "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
              "example": "Stalk",
              "type": "string"
            },
            "externalReferences": {
              "description": "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
              "example": [{
                  "referenceID": "doi:10.155454/12341234",
                  "referenceSource": "DOI"
                }, {
                  "referenceID": "http://purl.obolibrary.org/obo/ro.owl",
                  "referenceSource": "OBO Library"
                }, {
                  "referenceID": "75a50e76",
                  "referenceSource": "Remote Data Collection Upload Tool"
                }
              ],
              "items": {
                "properties": {
                  "referenceID": {
                    "description": "The external reference ID. Could be a simple string or a URI.",
                    "type": "string"
                  },
                  "referenceSource": {
                    "description": "An identifier for the source system or database of this reference",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "title": "ExternalReferences",
              "type": "array"
            },
            "mainAbbreviation": {
              "description": "Main abbreviation for trait name. (examples: \"Carotenoid content\" => \"CC\")",
              "example": "PH",
              "type": "string"
            },
            "ontologyReference": {
              "description": "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
              "properties": {
                "documentationLinks": {
                  "description": "links to various ontology documentation",
                  "items": {
                    "properties": {
                      "URL": {
                        "example": "http://purl.obolibrary.org/obo/ro.owl",
                        "format": "uri",
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "OBO",
                          "RDF",
                          "WEBPAGE"
                        ],
                        "example": "OBO",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "ontologyDbId": {
                  "description": "Ontology database unique identifier",
                  "example": "6b071868",
                  "type": "string"
                },
                "ontologyName": {
                  "description": "Ontology name",
                  "example": "The Crop Ontology",
                  "type": "string"
                },
                "version": {
                  "description": "Ontology version (no specific format)",
                  "example": "7.2.3",
                  "type": "string"
                }
              },
              "required": [
                "ontologyName",
                "ontologyDbId"
              ],
              "type": "object"
            },
            "status": {
              "description": "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
              "example": "recommended",
              "type": "string"
            },
            "synonyms": {
              "description": "Other trait names",
              "example": [
                "Height",
                "Plant Height",
                "Stalk Height",
                "Canopy Height"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "traitClass": {
              "description": "Trait class. (examples: \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.)",
              "example": "phenological",
              "type": "string"
            },
            "traitDescription": {
              "description": "The description of a trait",
              "example": "The height of the plant",
              "type": "string"
            },
            "traitName": {
              "description": "The human readable name of a trait\n\nMIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
              "example": "Height",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    }
  }
}